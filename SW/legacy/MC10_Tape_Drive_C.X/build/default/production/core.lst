

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                                           Sat Jun 10 16:15:36 2023


     1                           	processor	16F747
     2                           	opt	pw 132
     3                           	psect	intentry,global,class=CODE,delta=2
     4                           	psect	barfunc,local,class=CODE,delta=2
     5                           	psect	pa_nodes0,global,class=CODE,delta=2
     6  0000                     stk_offset	set	0
     7  0000                     auto_size	set	0
     8                           
     9                           ; stack_auto defines a symbol /name/_offset which equates to the
    10                           ; stack offset of the auto object in question
    11  0000                     
    12                           ; stack_param defines a symbol /name/_offset which equates to the
    13                           ; stack offset of the parameter object in question
    14  0000                     
    15                           ; alloc_stack adjusts the SP to allocate space for auto objects
    16                           ; it also links in to the btemp symbol so that can be used
    17  0000                     
    18                           ; restore_stack adjusts the SP to remove all auto and parameter
    19                           ; objects from the stack prior to returning from a function
    20  0000                     
    21                           	psect	intentry
    22                           
    23                           ;#define TAPE_OUT PORTB, 2
    24                           ;PIN USAGE:
    25                           ; PORTA,0 UNUSED OUTPUT
    26                           ; PORTA,1 UNUSED OUTPUT
    27                           ; PORTA,2 DISPLAY CE OUTPUT
    28                           ; PORTA,3 DISPLAY RS OUTPUT
    29                           ; PORTA,4 UNUSED (OPEN DRAIN) OUTPUT
    30                           ; PORTA,5 UNUSED OUTPUT
    31                           ; PORTA,6 CLOCK INPUT
    32                           ; PORTA,7 CLOCK INPUT
    33                           ; PORTB,0 CH376S INTERRUPT INPUT
    34                           ; PORTB,1 TAPE INPUT
    35                           ; PORTB,2 TAPE OUTPUT
    36                           ; PORTB,3 BUTTON 1 INPUT
    37                           ; PORTB,4 BUTTON 2 INPUT
    38                           ; PORTB,5 BUTTON 3 INPUT
    39                           ; PORTB,6 BUTTON 4 INPUT ICSP CLOCK
    40                           ; PORTB,7 RAM CE OUTPUT ICSP DATA
    41                           ; PORTC,0 UNUSED OUTPUT
    42                           ; PORTC,1 UNUSED OUTPUT
    43                           ; PORTC,2 UNUSED OUTPUT
    44                           ; PORTC,3 SCK (HARDWARE SPI) OUTPUT
    45                           ; PORTC,4 SDI (HARDWARE SPI) INPUT
    46                           ; PORTC,5 SDO (HARDWARE SPI) OUTPUT
    47                           ; PORTC,6 TXD (HARDWARE UART) INPUT (MUST BE CONFIGURED AS INPUT FOR UART MODULE TO WORK. THIS IS AC
      +                          TUALLY AN OUTPUT)
    48                           ; PORTC,7 RXD (HARDWARE UART) INPUT
    49                           ; PORTD,0 UNUSED OUTPUT
    50                           ; PORTD,1 UNUSED OUTPUT
    51                           ; PORTD,2 CH376S CE OUTPUT
    52                           ; PORTD,3 CH376S RESET OUTPUT
    53                           ; PORTD,4 TEST OUTPUT
    54                           ; PORTD,5 UNUSED OUTPUT
    55                           ; PORTD,6 DISPLAY CLOCK OUTPUT
    56                           ; PORTD,7 DISPLAY DATA OUTPUT
    57                           ; PORTE,0 UNUSED OUTPUT
    58                           ; PORTE,1 UNUSED OUTPUT
    59                           ; PORTE,2 UNUSED OUTPUT
    60                           ;FLAG REG USAGE:
    61                           ;BIT0 SET IF S_REG_LOW CONTAINS VALID DATA
    62                           ;BIT1 SET IF BUILD_BYTE IS WAITING FOR THE FIRST BYTE OF A TRANSMISSION (PREVENTS RESET IF TRANSMISS
      +                          ION FAILS)
    63                           ;BIT2 SET IF TIMEOUT OCCURED WHILE WAITING FOR USB STATUS
    64                           ;BIT3 SET IF FREE SPACE EXCEEDS TAPE SIZE
    65                           ;BIT4 SET IF FREE SPACE EXCEEDS 0x20000
    66                           ;BIT5 UNUSED
    67                           ;BIT6 UNUSED
    68                           ;BIT7 UNUSED
    69                           ; When assembly code is placed in a psect, it can be manipulated as a
    70                           ; whole by the linker and placed in memory.
    71                           ;
    72                           ; In this example, barfunc is the program section (psect) name, 'local' means
    73                           ; that the section will not be combined with other sections even if they have
    74                           ; the same name. class=CODE means the barfunc must go in the CODE container.
    75                           ; PIC18s should have a delta (addressible unit size) of 1 (default) since they
    76                           ; are byte addressible. PIC10/12/16s have a delta of 2 since they are word
    77                           ; addressible. PIC18s should have a reloc (alignment) flag of 2 for any
    78                           ; psect which contains executable code. PIC10/12/16s can use the default
    79                           ; reloc value of 1. Use one of the psects below for the device you use:
    80  0004  29CF               	goto	_tape_int	; PIC10/12/16
    81                           
    82                           	psect	barfunc
    83  0049                     _initialize:	
    84                           ; psect barfunc,local,class=CODE,reloc=2 ; PIC18
    85                           ;extern entry__byte_to_hex
    86                           
    87  0049  1303 1283          	banksel	5
    88  004B  0185               	clrf	5
    89  004C  0186               	clrf	6
    90  004D  0187               	clrf	7
    91  004E  0188               	clrf	8
    92  004F  0986               	comf	6,f
    93  0050  0987               	comf	7,f
    94  0051  0988               	comf	8,f
    95  0052  1303 1683          	banksel	133	;SWITCH TO BANK 1
    96  0054  30C0               	movlw	192
    97  0055  0085               	movwf	5	;CONFIGURE PORTA
    98  0056  307B               	movlw	123
    99  0057  0086               	movwf	6	;CONFIGURE PORTB
   100  0058  30D0               	movlw	208
   101  0059  0087               	movwf	7	;CONFIGURE PORTC
   102  005A  3000               	movlw	0
   103  005B  0088               	movwf	8	;CONFIGURE PORTD
   104  005C  30F8               	movlw	248
   105  005D  0089               	movwf	9	;CONFIGURE PORTE
   106  005E  3000               	movlw	0	;((SSPSTAT) and 07Fh), 7=0, ((SSPSTAT) and 07Fh), 6=0, DA=0, P=0, S=0, RW=0, ((SSPSTAT) and
      +                           07Fh), 1=0, ((SSPSTAT) and 07Fh), 0=0
   107  005F  0094               	movwf	20	;CONFIGURE SPI
   108  0060  300F               	movlw	15	;PCFG=1111
   109  0061  009F               	movwf	31	;DISABLE ANALOG INPUTS
   110  0062  3026               	movlw	38	;((TXSTA) and 07Fh), 7=0, ((TXSTA) and 07Fh), 6=0, ((TXSTA) and 07Fh), 5=1, ((TXSTA) and 0
      +                          7Fh), 4=0, UNIMPLEMENTED=0, ((TXSTA) and 07Fh), 2=1, ((TXSTA) and 07Fh), 1=1, ((TXSTA) and 07Fh), 0=
      +                          0
   111  0063  0098               	movwf	24	;CONFIGURE UART
   112  0064  3019               	movlw	25
   113  0065  0099               	movwf	25	;CONFIGURE BAUD RATE
   114  0066  30D8               	movlw	216	;RBPU = 1, ((OPTION_REG) and 07Fh), 6 = 1, ((OPTION_REG) and 07Fh), 5 = 0, ((OPTION_REG) 
      +                          and 07Fh), 4 = 1, ((OPTION_REG) and 07Fh), 3 = 1, ((OPTION_REG) and 07Fh), 2 = 0, ((OPTION_REG) and 
      +                          07Fh), 1 = 0, ((OPTION_REG) and 07Fh), 0 = 0
   115  0067  0081               	movwf	1	;CONFIGURE TIMER
   116  0068  1303 1283          	banksel	20
   117  006A  3030               	movlw	48	;((SSPCON) and 07Fh), 7=0, ((SSPCON) and 07Fh), 6=0, ((SSPCON) and 07Fh), 5=1, ((SSPCON) a
      +                          nd 07Fh), 4=1, SSPM=0000
   118  006B  0094               	movwf	20	;CONFIGURE SPI
   119  006C  3090               	movlw	144	;((RCSTA) and 07Fh), 7=1, ((RCSTA) and 07Fh), 6=0,((RCSTA) and 07Fh), 5=0, ((RCSTA) and 0
      +                          7Fh), 4=1, ((RCSTA) and 07Fh), 3=0, ((RCSTA) and 07Fh), 2=0, ((RCSTA) and 07Fh), 1=0, ((RCSTA) and 0
      +                          7Fh), 0=0
   120  006D  0098               	movwf	24	;CONFIGURE UART
   121  006E  3020               	movlw	32
   122  006F  008B               	movwf	11	;ENABLE TIMER 0 INTERRUPT
   123  0070  01A3               	clrf	_flag_reg
   124  0071  01A8               	clrf	_s_reg_high
   125  0072  01A7               	clrf	_s_reg_low
   126  0073  1188               	bcf	8,3
   127  0074  3032               	movlw	50
   128  0075  2232               	call	_delay_millis	;50 MS DELAY AT STARTUP
   129  0076  2458               	call	_fifo_init
   130  0077  2108               	call	RAM_CONFIG
   131  0078  01C2               	clrf	_ram_address_h
   132  0079  01C1               	clrf	_ram_address_l
   133  007A  3055               	movlw	85
   134  007B  20E3               	call	RAM_WRITE
   135  007C  30AA               	movlw	170
   136  007D  20E0               	call	RAM_WRITE_AUTO
   137                           
   138                           ;CALL _mem_clear
   139  007E  2131               	call	FUNCTIONSET_LCD	;INITIALIZE DISPLAY
   140  007F  213A               	call	DISPLAYON	;POWER ON THE DISPLAY
   141  0080  2141               	call	CLEARDISPLAY	;CLEAR THE DISPLAY
   142  0081  2148               	call	SETHOME_LCD	;SET CURSOR TO THE START OF LINE 1
   143  0082  0008               	return
   144  0083                     _mem_clear:	
   145  0083  30FF               	movlw	255
   146  0084  00C1               	movwf	_ram_address_l
   147  0085  00C2               	movwf	_ram_address_h
   148  0086                     MEM_CLEAR_LOOP:	
   149                           
   150                           ;BSF PORTD, 4
   151  0086  30FF               	movlw	255
   152  0087  20E0               	call	RAM_WRITE_AUTO
   153                           
   154                           ;BCF PORTD, 4 ;PORTD 4 IS A DEBUG OUTPUT TO MEASURE THE DURATION OF RAM_WRITE
   155  0088  0841               	movf	_ram_address_l,w
   156  0089  3AFF               	xorlw	255
   157  008A  1D03               	btfss	3,2
   158  008B  2886               	goto	MEM_CLEAR_LOOP
   159  008C  0842               	movf	_ram_address_h,w
   160  008D  3AFF               	xorlw	255
   161  008E  1D03               	btfss	3,2
   162  008F  2886               	goto	MEM_CLEAR_LOOP
   163  0090  0008               	return
   164  0091                     _mem_dump:	
   165  0091  30FF               	movlw	255
   166  0092  00C1               	movwf	_ram_address_l
   167  0093  00C2               	movwf	_ram_address_h
   168  0094                     MEM_DUMP_LOOP:	
   169  0094  20BA               	call	RAM_READ_AUTO
   170  0095  20B6               	call	_uart_send
   171  0096  0841               	movf	_ram_address_l,w
   172  0097  3AFF               	xorlw	255
   173  0098  1D03               	btfss	3,2
   174  0099  2894               	goto	MEM_DUMP_LOOP
   175  009A  0842               	movf	_ram_address_h,w
   176  009B  3AFF               	xorlw	255
   177  009C  1D03               	btfss	3,2
   178  009D  2894               	goto	MEM_DUMP_LOOP
   179  009E  0008               	return
   180  009F                     _file_dump:	
   181  009F  0833               	movf	_usb_file_size_high,w
   182  00A0  0432               	iorwf	_usb_file_size_low,w
   183  00A1  1903               	btfsc	3,2
   184  00A2  0008               	return
   185  00A3  0833               	movf	_usb_file_size_high,w
   186  00A4  00BE               	movwf	_gen_count
   187  00A5  0832               	movf	_usb_file_size_low,w
   188  00A6  00BD               	movwf	_gen_count2
   189  00A7  30FF               	movlw	255
   190  00A8  00C1               	movwf	_ram_address_l
   191  00A9  00C2               	movwf	_ram_address_h
   192  00AA  0ABE               	incf	_gen_count,f
   193  00AB                     FD_INNER:	
   194  00AB  20BA               	call	RAM_READ_AUTO
   195  00AC  20B6               	call	_uart_send
   196  00AD  0BBD               	decfsz	_gen_count2,f
   197  00AE  28AB               	goto	FD_INNER
   198  00AF  0BBE               	decfsz	_gen_count,f
   199  00B0  28AB               	goto	FD_INNER
   200  00B1  0008               	return
   201  00B2                     _uart_read:	
   202  00B2  1E8C               	btfss	12,5	;CHECK IF UART RECEIVE BUFFER IS FULL
   203  00B3  28B2               	goto	_uart_read	;IF NOT WAIT UNTIL ITS FULL
   204  00B4  081A               	movf	26,w	;COPY DATA TO W
   205  00B5  0008               	return
   206  00B6                     _uart_send:	
   207  00B6  1E0C               	btfss	12,4	;CHECK IF UART TRANSMIT BUFFER IS EMPTY
   208  00B7  28B6               	goto	_uart_send	;IF NOT WAIT UNTIL IT IS
   209  00B8  0099               	movwf	25	;COPY DATA TO TXREG
   210  00B9  0008               	return
   211  00BA                     RAM_READ_AUTO:	
   212  00BA  0FC1               	incfsz	_ram_address_l,f	;INCREMENT LOW ADDRESS
   213  00BB  03C2               	decf	_ram_address_h,f
   214  00BC  0AC2               	incf	_ram_address_h,f	;IF LOW ADDRESS IS ((STATUS) and 07Fh), 2 INCREMENT THE HIGH ADDRESS TOO
   215  00BD                     RAM_READ:	
   216  00BD  1386               	bcf	6,7	;CHIP ENABLE
   217  00BE  3003               	movlw	3	;PUT WRITE COMMAND IN W
   218  00BF  0093               	movwf	19	;SEND COMMAND
   219  00C0  0842               	movf	_ram_address_h,w	;COPY ADDRESS TO W
   220  00C1  1303 1683          	banksel	148
   221  00C3                     RAM_WAIT_AH:	
   222  00C3  1C14               	btfss	20,0	;IS THE TRANSMISSION READY
   223  00C4  28C3               	goto	RAM_WAIT_AH	;IF NOT WAIT UNTIL IT IS
   224  00C5  1303 1283          	banksel	19
   225  00C7  0093               	movwf	19	;SEND ADDRESS HIGH BYTE
   226  00C8  0841               	movf	_ram_address_l,w	;COPY ADDRESS TO W
   227  00C9  1303 1683          	banksel	148
   228  00CB                     RAM_WAIT_AL:	
   229  00CB  1C14               	btfss	20,0
   230  00CC  28CB               	goto	RAM_WAIT_AL
   231  00CD  1303 1283          	banksel	19
   232  00CF  0093               	movwf	19	;SEND ADDRESS LOW BYTE
   233  00D0  1303 1683          	banksel	148
   234  00D2                     RAM_WAIT_D:	
   235  00D2  1C14               	btfss	20,0
   236  00D3  28D2               	goto	RAM_WAIT_D
   237  00D4  1303 1283          	banksel	19
   238  00D6  0193               	clrf	19
   239  00D7  1303 1683          	banksel	148
   240  00D9                     RAM_WAIT_R:	
   241  00D9  1C14               	btfss	20,0
   242  00DA  28D9               	goto	RAM_WAIT_R
   243  00DB  1303 1283          	banksel	19
   244  00DD  0813               	movf	19,w	;COPY DATA TO W
   245  00DE  1786               	bsf	6,7
   246  00DF  0008               	return
   247  00E0                     RAM_WRITE_AUTO:	
   248  00E0  0FC1               	incfsz	_ram_address_l,f	;INCREMENT LOW ADDRESS
   249  00E1  03C2               	decf	_ram_address_h,f
   250  00E2  0AC2               	incf	_ram_address_h,f	;IF LOW ADDRESS IS ((STATUS) and 07Fh), 2 INCREMENT THE HIGH ADDRESS TOO
   251  00E3                     RAM_WRITE:	
   252  00E3  00C3               	movwf	_temp5
   253  00E4  1386               	bcf	6,7	;CHIP ENABLE
   254  00E5  3002               	movlw	2	;PUT WRITE COMMAND IN W
   255  00E6  0093               	movwf	19	;SEND COMMAND
   256  00E7  0842               	movf	_ram_address_h,w	;COPY ADDRESS TO W
   257  00E8  1303 1683          	banksel	148
   258  00EA                     RAM_WRITE_AH:	
   259  00EA  1C14               	btfss	20,0	;IS THE TRANSMISSION READY
   260  00EB  28EA               	goto	RAM_WRITE_AH	;IF NOT WAIT UNTIL IT IS
   261  00EC  1303 1283          	banksel	19
   262  00EE  0093               	movwf	19	;SEND ADDRESS HIGH BYTE
   263  00EF  0841               	movf	_ram_address_l,w	;COPY ADDRESS TO W
   264  00F0  1303 1683          	banksel	148
   265  00F2                     RAM_WRITE_AL:	
   266  00F2  1C14               	btfss	20,0
   267  00F3  28F2               	goto	RAM_WRITE_AL
   268  00F4  1303 1283          	banksel	19
   269  00F6  0093               	movwf	19	;SEND ADDRESS LOW BYTE
   270  00F7  0843               	movf	_temp5,w	;COPY DATA TO W
   271  00F8  1303 1683          	banksel	148
   272  00FA                     RAM_WRITE_D:	
   273  00FA  1C14               	btfss	20,0
   274  00FB  28FA               	goto	RAM_WRITE_D
   275  00FC  1303 1283          	banksel	19
   276  00FE  0093               	movwf	19	;SEND DATA
   277  00FF  1303 1683          	banksel	148
   278  0101                     RAM_WRITE_R:	
   279  0101  1C14               	btfss	20,0
   280  0102  2901               	goto	RAM_WRITE_R
   281  0103  1303 1283          	banksel	19
   282  0105  0813               	movf	19,w	;COPY DUMMY DATA TO W
   283  0106  1786               	bsf	6,7
   284  0107  0008               	return
   285  0108                     RAM_CONFIG:	
   286  0108  1386               	bcf	6,7	;CHIP ENABLE
   287  0109  3001               	movlw	1	;PUT WRITE COMMAND IN W
   288  010A  0093               	movwf	19	;SEND COMMAND
   289  010B  3000               	movlw	0	;CONFIGURE FOR BYTE MODE
   290  010C  1303 1683          	banksel	148
   291  010E                     RAM_CONFIG_C:	
   292  010E  1C14               	btfss	20,0	;IS THE TRANSMISSION READY
   293  010F  290E               	goto	RAM_CONFIG_C	;IF NOT WAIT UNTIL IT IS
   294  0110  1303 1283          	banksel	19
   295  0112  0093               	movwf	19	;SEND CONFIG DATA
   296  0113  1303 1683          	banksel	148
   297  0115                     RAM_CONFIG_D:	
   298  0115  1C14               	btfss	20,0
   299  0116  2915               	goto	RAM_CONFIG_D
   300  0117  1303 1283          	banksel	19
   301  0119  0813               	movf	19,w	;COPY DUMMY DATA TO W
   302  011A  1786               	bsf	6,7
   303  011B  0008               	return
   304  011C                     _lcd_putc:	
   305  011C  1585               	bsf	5,3	;RS LINE TO 1 (PORT A BIT 3)
   306  011D  2122               	call	_lcd_send
   307  011E  2175               	call	_pulse_e
   308  011F  3002               	movlw	2
   309  0120  2232               	call	_delay_millis
   310  0121  0008               	return
   311  0122                     _lcd_send:	
   312                           
   313                           ;SENDS DATA OR COMMAND TO LCD SHIFT REGISTER
   314  0122  00C5               	movwf	_temp3	;COPY DATA TO TEMP VARIABLE
   315  0123  3008               	movlw	8
   316  0124  00BC               	movwf	_gen_count3	;COUNT 8 BITS
   317  0125                     LCD_SEND_LOOP:	
   318  0125  1BC5               	btfsc	_temp3,7
   319  0126  1788               	bsf	8,7
   320  0127  1FC5               	btfss	_temp3,7
   321  0128  1388               	bcf	8,7
   322  0129  0DC5               	rlf	_temp3,f
   323  012A  1708               	bsf	8,6
   324  012B  0000               	nop
   325  012C  0000               	nop
   326  012D  1308               	bcf	8,6
   327  012E  0BBC               	decfsz	_gen_count3,f
   328  012F  2925               	goto	LCD_SEND_LOOP
   329  0130  0008               	return
   330  0131                     FUNCTIONSET_LCD:	
   331  0131  1105               	bcf	5,2	;MAKE SURE THAT E STARTS LOW
   332  0132  1308               	bcf	8,6	;MAKE SURE DISPLAY CLOCK STARTS LOW
   333  0133  1185               	bcf	5,3	;RS LINE TO 0 (PORT A BIT 3)
   334  0134  3038               	movlw	56	;FUNCTION SET COMMAND
   335  0135  2122               	call	_lcd_send
   336  0136  2175               	call	_pulse_e	;PULSE E LINE HIGH (PORT A BIT 2)
   337  0137  300A               	movlw	10
   338  0138  2232               	call	_delay_millis
   339  0139  0008               	return
   340  013A                     DISPLAYON:	
   341  013A  1185               	bcf	5,3	;RS LINE TO 0 (PORT A BIT 3)
   342  013B  300F               	movlw	15	;DISPLAY ON/OFF AND CURSOR COMMAND
   343  013C  2122               	call	_lcd_send
   344  013D  2175               	call	_pulse_e
   345  013E  300A               	movlw	10
   346  013F  2232               	call	_delay_millis
   347  0140  0008               	return
   348  0141                     CLEARDISPLAY:	
   349  0141  1185               	bcf	5,3	;RS LINE LOW
   350  0142  3001               	movlw	1	;CLEAR DISPLAY COMMAND
   351  0143  2122               	call	_lcd_send	;WRITE TO DATA LINES
   352  0144  2175               	call	_pulse_e
   353  0145  300A               	movlw	10
   354  0146  2232               	call	_delay_millis
   355  0147  0008               	return
   356  0148                     SETHOME_LCD:	
   357  0148  1185               	bcf	5,3	;RS LINE LOW
   358  0149  3003               	movlw	3	;DISPLAY AND CURSOR HOME COMMAND
   359  014A  2122               	call	_lcd_send	;WRITE TO DATA LINES
   360  014B  2175               	call	_pulse_e
   361  014C  3005               	movlw	5
   362  014D  2232               	call	_delay_millis
   363  014E  0008               	return
   364  014F                     _lcd_line2:	
   365  014F  2148               	call	SETHOME_LCD
   366  0150  3028               	movlw	40	;SET COUNTER TO 40
   367  0151  00BD               	movwf	_gen_count2
   368  0152  3010               	movlw	16	;CURSOR LEFT COMMAND
   369  0153  2122               	call	_lcd_send	;WRITE COMMAND TO DATA LINES
   370  0154                     CLLOOP40:	
   371  0154  1185               	bcf	5,3	;RS LINE LOW (COMMAND MODE)
   372  0155  2175               	call	_pulse_e
   373  0156  3002               	movlw	2
   374  0157  2232               	call	_delay_millis
   375  0158  0BBD               	decfsz	_gen_count2,f
   376  0159  2954               	goto	CLLOOP40
   377  015A  0008               	return
   378  015B                     LCD_CLEAR1:	
   379  015B  2148               	call	SETHOME_LCD
   380  015C  3020               	movlw	32	;SPACE CHAR
   381  015D  1585               	bsf	5,3	;RS LINE HIGH FOR DATA
   382  015E  2122               	call	_lcd_send	;PUT CHAR ON THE DATA LINES
   383  015F  3014               	movlw	20	;COUNT 20 SPACE CHARS
   384  0160  00BD               	movwf	_gen_count2
   385  0161                     LCD_CLEAR12:	
   386  0161  2175               	call	_pulse_e
   387  0162  3002               	movlw	2
   388  0163  2232               	call	_delay_millis
   389  0164  0BBD               	decfsz	_gen_count2,f
   390  0165  2961               	goto	LCD_CLEAR12
   391  0166  2148               	call	SETHOME_LCD
   392  0167  0008               	return
   393  0168                     _lcd_clear2:	
   394  0168  214F               	call	_lcd_line2
   395  0169  3020               	movlw	32	;SPACE CHAR
   396  016A  1585               	bsf	5,3	;RS LINE HIGH FOR DATA
   397  016B  2122               	call	_lcd_send	;PUT CHAR ON THE DATA LINES
   398  016C  3014               	movlw	20	;COUNT 20 SPACE CHARS
   399  016D  00BD               	movwf	_gen_count2
   400  016E                     LCD_CLEAR22:	
   401  016E  2175               	call	_pulse_e
   402  016F  3002               	movlw	2
   403  0170  2232               	call	_delay_millis
   404  0171  0BBD               	decfsz	_gen_count2,f
   405  0172  296E               	goto	LCD_CLEAR22
   406  0173  214F               	call	_lcd_line2
   407  0174  0008               	return
   408  0175                     _pulse_e:	
   409  0175  1505               	bsf	5,2	;SET E LINE HIGH
   410  0176  0000               	nop
   411  0177  0000               	nop
   412  0178  0000               	nop
   413  0179  0000               	nop
   414  017A  0000               	nop	;MODIFIED FOR 4MHZ CLOCK
   415  017B  0000               	nop
   416  017C  0000               	nop
   417  017D  0000               	nop
   418  017E  1105               	bcf	5,2	;SET E LINE LOW
   419  017F  0008               	return
   420  0180                     _print_name:	
   421  0180  1383               	bcf	3,7	;SET BANK 0 AND 1
   422  0181  3053               	movlw	_tape_name
   423  0182  0084               	movwf	4
   424  0183  3008               	movlw	8	;COUNT 8 CHARS
   425  0184  00BD               	movwf	_gen_count2
   426  0185  1585               	bsf	5,3	;RS LINE HIGH FOR DATA
   427  0186                     PN_LOOP:	
   428  0186  0800               	movf	0,w
   429  0187  2122               	call	_lcd_send
   430  0188  2175               	call	_pulse_e
   431  0189  3002               	movlw	2
   432  018A  2232               	call	_delay_millis
   433  018B  0A84               	incf	4,f
   434  018C  0BBD               	decfsz	_gen_count2,f
   435  018D  2986               	goto	PN_LOOP
   436  018E  0008               	return
   437  018F                     TAPE_OUT:	
   438                           ;PORTB, 1
   439                           ; MOVLW H'FF'
   440                           ; MOVWF RAM_ADDRESS_H
   441                           ; MOVWF RAM_ADDRESS_L
   442                           ; BSF FLAG_REG,1 ;DISSABLE RESET IF TRANSMISSION FAILS
   443                           ; CALL GET_LEADER
   444                           ; BCF FLAG_REG,1 ;ENABLE RESET IF TRANSMISSION FAILS
   445                           ; CALL SAVE_FIRST_BLOCK
   446                           ; INCFSZ RAM_ADDRESS_L, F ;INCREMENT LOW ADDRESS
   447                           ; DECF RAM_ADDRESS_H, F
   448                           ; INCF RAM_ADDRESS_H, F ;IF LOW ADDRESS IS ((STATUS) and 07Fh), 2 INCREMENT THE HIGH ADDRESS TOO
   449                           ; MOVF RAM_ADDRESS_H, W
   450                           ; MOVWF TAPE_SIZE_HIGH
   451                           ; MOVF RAM_ADDRESS_L, W
   452                           ; MOVWF TAPE_SIZE_LOW
   453                           ; CLRF RAM_ADDRESS_H
   454                           ; MOVLW H'03'
   455                           ; MOVWF RAM_ADDRESS_L
   456                           ; BCF STATUS, 7 ;SET BANKS 0 AND 1
   457                           ; MOVLW TAPE_NAME
   458                           ; MOVWF FSR
   459                           ; MOVLW D'08'
   460                           ; MOVWF GEN_COUNT
   461                           ;NAME_COPY
   462                           ; CALL RAM_READ_AUTO
   463                           ; MOVF DREG, W
   464                           ; MOVWF INDF
   465                           ; INCF FSR, F
   466                           ; DECFSZ GEN_COUNT, F
   467                           ; GOTO NAME_COPY
   468                           ; RETURN
   469                           ;GET_LEADER
   470                           ; MOVLW D'128' ;LENGTH OF LEADER
   471                           ; MOVWF GEN_COUNT2
   472                           ;LEADER_LOOP
   473                           ; CALL BUILD_BYTE
   474                           ; MOVF DREG,W
   475                           ; XORLW H'55'
   476                           ; BTFSS STATUS, Z
   477                           ; GOTO GL_FIX
   478                           ; DECFSZ GEN_COUNT2, F
   479                           ; GOTO LEADER_LOOP
   480                           ; RETURN
   481                           ;GL_FIX
   482                           ; DECFSZ GEN_COUNT2, F
   483                           ; GOTO GL_FIX2
   484                           ; GOTO BUILD_PANIC
   485                           ;GL_FIX2
   486                           ; CALL BUILD_ALIGN
   487                           ; MOVF DREG,W
   488                           ; XORLW H'55'
   489                           ; BTFSS STATUS,Z
   490                           ; GOTO BUILD_PANIC
   491                           ; DECFSZ GEN_COUNT2, F
   492                           ; GOTO LEADER_LOOP
   493                           ; GOTO BUILD_PANIC
   494                           ;SAVE_FIRST_BLOCK
   495                           ; CALL BUILD_BYTE
   496                           ; BTFSS DREG,0 ;CHECK IF BIT 0 IS SET (IF IT IS CLEARED THERE HAS BEEN AN ALIGNMENT ERROR)
   497                           ; GOTO BUILD_PANIC
   498                           ; CALL RAM_WRITE_AUTO ;SAVE LEADER BYTE
   499                           ; CALL BUILD_BYTE
   500                           ; CALL RAM_WRITE_AUTO ;SAVE ((TXSTA) and 07Fh), 4 BYTE
   501                           ; CALL BUILD_BYTE
   502                           ; CALL RAM_WRITE_AUTO ;SAVE BLOCK TYPE BYTE
   503                           ; CALL BUILD_BYTE
   504                           ; CALL RAM_WRITE_AUTO ;SAVE BLOCK LENGTH
   505                           ; MOVF DREG, W
   506                           ; MOVWF GEN_COUNT2
   507                           ;FIRST_BLOCK_LOOP
   508                           ; CALL BUILD_BYTE
   509                           ; CALL RAM_WRITE_AUTO
   510                           ; DECFSZ GEN_COUNT2, F
   511                           ; GOTO FIRST_BLOCK_LOOP
   512                           ; CALL BUILD_BYTE
   513                           ; CALL RAM_WRITE_AUTO ;SAVE CHECKSUM
   514                           ; CALL BUILD_BYTE
   515                           ; CALL RAM_WRITE_AUTO ;SAVE LEADER BYTE
   516                           ; CALL GET_LEADER ;GETS THE SECOND LEADER
   517                           ;SAVE_BLOCKS
   518                           ; CALL BUILD_BYTE
   519                           ; CALL RAM_WRITE_AUTO ;SAVE LEADER BYTE
   520                           ; CALL BUILD_BYTE
   521                           ; CALL RAM_WRITE_AUTO ;SAVE ((TXSTA) and 07Fh), 4 BYTE
   522                           ; CALL BUILD_BYTE
   523                           ; INCFSZ DREG, W ;CHECK IF BLOCK IS END OF FILE
   524                           ; GOTO NOT_EOF_BLOCK
   525                           ; CALL RAM_WRITE_AUTO ;SAVE BLOCK TYPE
   526                           ; CALL BUILD_BYTE
   527                           ; CALL RAM_WRITE_AUTO ;SAVE BLOCK LENGTH
   528                           ; CALL BUILD_BYTE
   529                           ; CALL RAM_WRITE_AUTO ;SAVE CHECKSUM
   530                           ; CALL BUILD_BYTE
   531                           ; CALL RAM_WRITE_AUTO ;SAVE LEADER BYTE
   532                           ; RETURN
   533                           ;NOT_EOF_BLOCK
   534                           ; CALL RAM_WRITE_AUTO ;SAVE BLOCK TYPE
   535                           ; CALL BUILD_BYTE
   536                           ; CALL RAM_WRITE_AUTO ;SAVE LENGTH BYTE
   537                           ; MOVF DREG, W
   538                           ; MOVWF GEN_COUNT2 ;COPY LENGTH TO GEN_COUNT2
   539                           ;BLOCK_DATA_LOOP
   540                           ; CALL BUILD_BYTE
   541                           ; CALL RAM_WRITE_AUTO
   542                           ; DECFSZ GEN_COUNT2, F
   543                           ; GOTO BLOCK_DATA_LOOP
   544                           ; CALL BUILD_BYTE
   545                           ; CALL RAM_WRITE_AUTO ;SAVE CHECKSUM
   546                           ; CALL BUILD_BYTE
   547                           ; CALL RAM_WRITE_AUTO ;SAVE LEADER BYTE
   548                           ; GOTO SAVE_BLOCKS
   549                           ;BUILD_ALIGN ;SKIPS INITIAL WAIT IN AN ATTEMPT TO FIX ALIGNMENT. BUILD_BYTE IS THE NORMAL ENTRY POIN
      +                          T
   550                           ; MOVLW H'08'
   551                           ; MOVWF GEN_COUNT ;INITIALIZE COUNTER TO 8
   552                           ; MOVF PORTB, W
   553                           ; XORLW H'02' ;INVERT TAPE BIT
   554                           ; MOVWF TEMP1 ;COPY PORTB TO TEMP1
   555                           ; GOTO WAIT_STOP
   556                           ;BUILD_BYTE
   557                           ; MOVLW H'08'
   558                           ; MOVWF GEN_COUNT ;INITIALIZE COUNTER TO 8
   559                           ;BUILD_LOOP
   560                           ; MOVF PORTB, W
   561                           ; MOVWF TEMP1 ;COPY PORTB TO TEMP1
   562                           ; CLRF PULSE_LENGTH
   563                           ; RRF DREG, F
   564                           ; BCF DREG, 7
   565                           ;WAIT_START
   566                           ; MOVF PORTB, W
   567                           ; XORWF TEMP1, W ;COMPARE PORTB WITH PREVIOUS STATE
   568                           ; MOVWF TEMP2 ;STORE RESULT IN TEMP2
   569                           ; BTFSS TEMP2, 1
   570                           ; GOTO WAIT_START ;IF STATE HAS NOT CHANGED KEEP WAITING
   571                           ;WAIT_STOP
   572                           ; CALL TAPE_DELAY
   573                           ; INCF PULSE_LENGTH, F ;#1
   574                           ; MOVF PULSE_LENGTH, W ;#2
   575                           ; SUBLW D'22' ;#3
   576                           ; BTFSC STATUS, C ;CHECK IF LENGTH IS GREATER THAN 22 #4
   577                           ; GOTO BUILD_NO_ERROR ;IF NOT CONTINUE NORMALLY #6
   578                           ;BUILD_ERROR
   579                           ; BTFSS FLAG_REG, 1 ;IF ERROR IS IN FIRST BYTE TRY TO RECOVER
   580                           ; GOTO BUILD_PANIC ;IF NOT RESET TO AVOID INFINITE LOOP
   581                           ; ;MOVF GEN_COUNT, W
   582                           ; ;SUBLW H'08'
   583                           ; ;BTFSS STATUS, Z ;CHECK IF ERROR IS IN FIRST BIT
   584                           ; ;GOTO BUILD_PANIC ; IF NOT RESET TO AVOID INFINITE LOOP
   585                           ; GOTO BUILD_BYTE ;IF IT IS IN FIRST BIT OF FIRST BYTE RESTART SUBROUTINE
   586                           ;BUILD_NO_ERROR
   587                           ; MOVF PORTB, W ;#7
   588                           ; XORWF TEMP1, W ;#8
   589                           ; MOVWF TEMP2 ;#9
   590                           ; BTFSC TEMP2, 1 ;#10
   591                           ; GOTO WAIT_STOP ;WAIT UNTIL TAPE INPUT RETURNS TO ORIGINAL STATE #12
   592                           ; MOVF PULSE_LENGTH, W
   593                           ; SUBLW D'08'
   594                           ; BTFSC STATUS, C ;CHECK IF LENGTH IS LESS THAN 8
   595                           ; GOTO BUILD_ERROR ;IF IT IS ((ADCON0) and 07Fh), 2 TO LOCAL ERROR HANDLER
   596                           ; MOVLW D'15'
   597                           ; SUBWF PULSE_LENGTH, F ;SUBTRACT THRESHOLD FROM PULSE LENGTH
   598                           ; BTFSC PULSE_LENGTH, 7 ;CHECK IF PULSE LENGHT IS NEGATIVE
   599                           ; BSF DREG, 7 ;IF IT IS SET BIT IN DREG
   600                           ; DECFSZ GEN_COUNT, F
   601                           ; GOTO BUILD_LOOP
   602                           ; RETLW H'00' ;RETURN ((STATUS) and 07Fh), 2 TO INDICATE SUCCESS
   603                           ;BUILD_PANIC ;ENABLES THE WATCHDOG TO CAUSE A RESET
   604                           ; BANKSEL WDTCON
   605                           ; BSF WDTCON, ((WDTCON) and 07Fh), 0 ;ENABLE WATCHDOG
   606                           ;BP_HALT
   607                           ; GOTO BP_HALT ;WAIT FOR THE WATCHDOG TO DO THE THING
   608                           ;TAPE_DELAY
   609                           ; NOP
   610                           ; NOP
   611                           ; NOP
   612                           ; NOP
   613                           ; NOP ;5 CYCLE DELAY
   614                           ; RETURN
   615                           
   616  018F  01C7               	clrf	_temp1
   617  0190  01B6               	clrf	_bit_count
   618  0191  30FF               	movlw	255
   619  0192  00C2               	movwf	_ram_address_h
   620  0193  00C1               	movwf	_ram_address_l	;RAM READ FUNCTION WILL AUTO INCREMENT ADDRESS, SO IT SHOULD OVERFLOW WHEN IT 
      +                          IS FIRST CALLED
   621  0194  3055               	movlw	85
   622  0195  00C3               	movwf	_temp5	;TAPE LEADER VALUE
   623  0196  307F               	movlw	127
   624  0197  00BE               	movwf	_gen_count	;128 LEADER BYTES
   625  0198  0181               	clrf	1
   626  0199  0000               	nop
   627  019A  110B               	bcf	11,2
   628  019B  178B               	bsf	11,7	;ENABLE INTERRUPT
   629  019C                     LEADER_OUT:	
   630  019C  1D36               	btfss	_bit_count,2
   631  019D  299C               	goto	LEADER_OUT	;WAIT UNTIL BIT COUNT IS NOT ((STATUS) and 07Fh), 2
   632  019E                     LEADER_WAIT:	
   633  019E  1936               	btfsc	_bit_count,2
   634  019F  299E               	goto	LEADER_WAIT	;WAIT UNTIL BIT_COUNT IS ((STATUS) and 07Fh), 2
   635  01A0  0BBE               	decfsz	_gen_count,f
   636  01A1  299C               	goto	LEADER_OUT	;LOOP UNTIL 128 LEADER BYTES HAVE BEEN SENT
   637  01A2  3016               	movlw	22
   638  01A3  00BE               	movwf	_gen_count	;ONE PAST THE END OF THE NAME FILE
   639  01A4                     TAPE_NAMEBLOCK:	
   640  01A4  20BA               	call	RAM_READ_AUTO	;GET FIRST BYTE
   641  01A5  00C3               	movwf	_temp5
   642  01A6                     TAPE_W1:	
   643  01A6  1D36               	btfss	_bit_count,2
   644  01A7  29A6               	goto	TAPE_W1	;WAIT UNTIL BIT COUNT IS NOT ((STATUS) and 07Fh), 2
   645  01A8                     TAPE_W2:	
   646  01A8  1936               	btfsc	_bit_count,2
   647  01A9  29A8               	goto	TAPE_W2
   648  01AA  0BBE               	decfsz	_gen_count,f
   649  01AB  29A4               	goto	TAPE_NAMEBLOCK
   650  01AC  138B               	bcf	11,7	;STOP INTERRUPT
   651  01AD  2204               	call	TAPE_PAUSE	;1/2 SECOND SILENCE
   652  01AE  307F               	movlw	127
   653  01AF  00BE               	movwf	_gen_count	;128 LEADER BYTES
   654  01B0  0181               	clrf	1
   655  01B1  01C7               	clrf	_temp1
   656  01B2  0000               	nop
   657  01B3  110B               	bcf	11,2
   658  01B4  178B               	bsf	11,7	;ENABLE INTERRUPT
   659  01B5                     LEADER_OUT2:	
   660  01B5  1D36               	btfss	_bit_count,2
   661  01B6  29B5               	goto	LEADER_OUT2	;WAIT UNTIL BIT COUNT IS NOT ((STATUS) and 07Fh), 2
   662  01B7                     LEADER_WAIT2:	
   663  01B7  1936               	btfsc	_bit_count,2
   664  01B8  29B7               	goto	LEADER_WAIT2	;WAIT UNTIL BIT_COUNT IS ((STATUS) and 07Fh), 2
   665  01B9  0BBE               	decfsz	_gen_count,f
   666  01BA  29B5               	goto	LEADER_OUT2	;LOOP UNTIL 128 LEADER BYTES HAVE BEEN SENT
   667  01BB                     TAPE_NE:	
   668  01BB  20BA               	call	RAM_READ_AUTO
   669  01BC  00C3               	movwf	_temp5
   670  01BD                     TAPE_W3:	
   671  01BD  1D36               	btfss	_bit_count,2
   672  01BE  29BD               	goto	TAPE_W3	;WAIT UNTIL BIT_COUNT IS NOT ((STATUS) and 07Fh), 2
   673  01BF                     TAPE_W4:	
   674  01BF  1936               	btfsc	_bit_count,2
   675  01C0  29BF               	goto	TAPE_W4
   676  01C1  0838               	movf	_tape_size_high,w
   677  01C2  0642               	xorwf	_ram_address_h,w
   678  01C3  00C5               	movwf	_temp3	;STORE RESULT IN TEMP3
   679  01C4  0AC5               	incf	_temp3,f	;INCREMENT RESULT
   680  01C5  0BC5               	decfsz	_temp3,f
   681  01C6  29BB               	goto	TAPE_NE
   682  01C7  0837               	movf	_tape_size_low,w
   683  01C8  0641               	xorwf	_ram_address_l,w
   684  01C9  00C5               	movwf	_temp3	;STORE RESULT IN TEMP3
   685  01CA  0AC5               	incf	_temp3,f	;TODO: this needs optimizing
   686  01CB  0BC5               	decfsz	_temp3,f
   687  01CC  29BB               	goto	TAPE_NE
   688  01CD  138B               	bcf	11,7
   689  01CE  0008               	return
   690  01CF                     _tape_int:	
   691  01CF  00C4               	movwf	_temp4	;SAVE W REG
   692  01D0  110B               	bcf	11,2
   693  01D1  303B               	movlw	59	;USED TO BE 58, CHANGED IT BECAUSE I ADDED THE SAVE W INSTRUCTION
   694  01D2  0081               	movwf	1	;PRELOAD TIMER
   695  01D3  1847               	btfsc	_temp1,0	;IDENTIFY PHASE
   696  01D4  29E4               	goto	PHASE1
   697  01D5  18C7               	btfsc	_temp1,1
   698  01D6  29EB               	goto	PHASE2
   699  01D7  1947               	btfsc	_temp1,2
   700  01D8  29F3               	goto	PHASE3
   701  01D9  19C7               	btfsc	_temp1,3
   702  01DA  29F7               	goto	PHASE4
   703  01DB  3004               	movlw	4	;DEFAULT PHASE - LOAD NEW DATA AND INITIALIZE VARIABLES
   704  01DC  0686               	xorwf	6,f	;TOGGLE TAPE OUT
   705  01DD  0843               	movf	_temp5,w
   706  01DE  00C6               	movwf	_temp2	;COPY NEW DATA TO BUFFER
   707  01DF  01B6               	clrf	_bit_count
   708  01E0  3001               	movlw	1
   709  01E1  00C7               	movwf	_temp1	;SET PHASE TO 1
   710  01E2  0844               	movf	_temp4,w	;RESTORE W
   711  01E3  0009               	retfie
   712  01E4                     PHASE1:	
   713                           
   714                           ;TOGGLE IF BIT IS 1
   715  01E4  3004               	movlw	4	;WILL USE THIS TO TOGGLE OUTPUT
   716  01E5  1846               	btfsc	_temp2,0	;CHECK IF BIT IS 1 OR 0
   717  01E6  0686               	xorwf	6,f	;IF BIT IS 1 TOGGLE OUTPUT
   718  01E7  3002               	movlw	2
   719  01E8  00C7               	movwf	_temp1	;SET PHASE TO 2
   720  01E9  0844               	movf	_temp4,w	;RESTORE W
   721  01EA  0009               	retfie
   722  01EB                     PHASE2:	
   723                           
   724                           ;ALWAYS TOGGLE
   725  01EB  3004               	movlw	4
   726  01EC  0686               	xorwf	6,f	;TOGGLE OUTPUT
   727  01ED  1846               	btfsc	_temp2,0	;CHECK IF BIT IS 1 OR 0
   728  01EE  29F9               	goto	PHASE2_NEXT	;IF BIT IS SET THEN LOAD NEXT BIT AND RESET PHASE
   729  01EF  3004               	movlw	4
   730  01F0  00C7               	movwf	_temp1	;SET PHASE TO 3
   731  01F1  0844               	movf	_temp4,w	;RESTORE W
   732  01F2  0009               	retfie
   733  01F3                     PHASE3:	
   734                           
   735                           ;NEVER TOGGLE
   736  01F3  3008               	movlw	8
   737  01F4  00C7               	movwf	_temp1	;SET PHASE TO 4
   738  01F5  0844               	movf	_temp4,w
   739  01F6  0009               	retfie
   740  01F7                     PHASE4:	
   741                           
   742                           ;ALWAYS TOGGLE
   743  01F7  3004               	movlw	4
   744  01F8  0686               	xorwf	6,f	;TOGGLE OUTPUT
   745  01F9                     PHASE2_NEXT:	
   746  01F9  3001               	movlw	1
   747  01FA  00C7               	movwf	_temp1	;SET PHASE TO 1
   748  01FB  0CC6               	rrf	_temp2,f	;SHIFT TO NEXT BIT
   749  01FC  0AB6               	incf	_bit_count,f	;NEXT BIT COUNT
   750  01FD  1DB6               	btfss	_bit_count,3	;CHECK IF BIT COUNT HAS REACHED 8
   751  01FE  2A02               	goto	PHASE_DONE	;IF NOT, RETURN
   752  01FF  01B6               	clrf	_bit_count	;CLEAR BIT COUNT
   753  0200  0843               	movf	_temp5,w
   754  0201  00C6               	movwf	_temp2	;COPY NEW DATA TO BUFFER
   755  0202                     PHASE_DONE:	
   756  0202  0844               	movf	_temp4,w
   757  0203  0009               	retfie
   758  0204                     TAPE_PAUSE:	
   759  0204  3020               	movlw	32
   760  0205  00BE               	movwf	_gen_count
   761  0206                     TP1:	
   762  0206  3036               	movlw	54
   763  0207  00BD               	movwf	_gen_count2
   764  0208                     TP2:	
   765  0208  305F               	movlw	95
   766  0209  00BF               	movwf	_ldel_count
   767  020A                     TP3:	
   768  020A  0BBF               	decfsz	_ldel_count,f
   769  020B  2A0A               	goto	TP3
   770  020C  0BBD               	decfsz	_gen_count2,f
   771  020D  2A08               	goto	TP2
   772  020E  0BBE               	decfsz	_gen_count,f
   773  020F  2A06               	goto	TP1
   774  0210  0008               	return
   775  0211                     SPI_TRANSFER:	
   776  0211  0093               	movwf	19	;SEND DATA
   777  0212  1303 1683          	banksel	148
   778  0214                     SPI_WAIT:	
   779  0214  1C14               	btfss	20,0	;IS THE TRANSMISSION READY
   780  0215  2A14               	goto	SPI_WAIT	;IF NOT WAIT UNTIL IT IS
   781  0216  1303 1283          	banksel	19
   782  0218  0813               	movf	19,w	;COPY DATA TO W
   783  0219  0008               	return
   784  021A                     BUILD_WORD:	
   785                           
   786                           ;GENERATES PSEUDO-RANDOM TEST DATA
   787  021A  3010               	movlw	16
   788  021B  00BB               	movwf	_gen_count4
   789  021C                     BUILD_WORD_LOOP:	
   790                           
   791                           ;GET WORD HERE
   792  021C  01C5               	clrf	_temp3	;THIS WILL CONTAIN BIT 7 OF S_REG_LOW
   793  021D  1BA7               	btfsc	_s_reg_low,7
   794  021E  1445               	bsf	_temp3,0
   795  021F  0827               	movf	_s_reg_low,w
   796  0220  3901               	andlw	1	;GET BIT 0
   797  0221  3A01               	xorlw	1	;FLIP BIT 0
   798  0222  06C5               	xorwf	_temp3,f	;TEMP3 NOW CONTAINS BIT0 ^ BIT7 ^ 1
   799  0223  0CC5               	rrf	_temp3,f
   800  0224  0CA8               	rrf	_s_reg_high,f
   801  0225  0CA7               	rrf	_s_reg_low,f
   802  0226  0BBB               	decfsz	_gen_count4,f
   803  0227  2A1C               	goto	BUILD_WORD_LOOP
   804  0228  0008               	return
   805  0229                     GET_TEST_BYTE:	
   806                           
   807                           ;SPLITS PSEUDO-RANDOM TEST DATA INTO SINGLE BYTES
   808  0229  1C23               	btfss	_flag_reg,0
   809  022A  2A2E               	goto	GTB_UPDATE
   810  022B  0827               	movf	_s_reg_low,w
   811  022C  1023               	bcf	_flag_reg,0
   812  022D  0008               	return
   813  022E                     GTB_UPDATE:	
   814  022E  221A               	call	BUILD_WORD
   815  022F  1423               	bsf	_flag_reg,0
   816  0230  0828               	movf	_s_reg_high,w
   817  0231  0008               	return
   818  0232                     _delay_millis:	
   819                           
   820                           ;DESIGNED FOR 4MHZ CLOCK
   821  0232  00A4               	movwf	_delay_counter
   822  0233                     DM_MILLIS:	
   823  0233  3014               	movlw	20
   824  0234  00BF               	movwf	_ldel_count
   825  0235                     DM_OUTER:	
   826  0235  3010               	movlw	16
   827  0236  00C0               	movwf	_sdel_count
   828  0237                     DM_INNER:	
   829  0237  0BC0               	decfsz	_sdel_count,f
   830  0238  2A37               	goto	DM_INNER
   831  0239  0BBF               	decfsz	_ldel_count,f
   832  023A  2A35               	goto	DM_OUTER
   833  023B  0BA4               	decfsz	_delay_counter,f
   834  023C  2A33               	goto	DM_MILLIS
   835  023D  0008               	return
   836  023E                     _print_test_data:	
   837  023E  01BE               	clrf	_gen_count
   838  023F                     PTD_OUTER:	
   839  023F  01BD               	clrf	_gen_count2
   840  0240                     PTD_INNER:	
   841  0240  083D               	movf	_gen_count2,w
   842  0241  390F               	andlw	15
   843  0242  1D03               	btfss	3,2	;EVERY 16 WORDS PRINT A NEWLINE
   844  0243  2A46               	goto	PTD_NO_NEWLINE
   845  0244  300A               	movlw	10	;NEWLINE CHAR
   846  0245  20B6               	call	_uart_send
   847  0246                     PTD_NO_NEWLINE:	
   848  0246  2229               	call	GET_TEST_BYTE	;GET MSB
   849  0247  158A               	pagesel	_byte_to_hex
   850  0248  27A5               	call	_byte_to_hex& (0+2047)
   851  0249  118A               	pagesel	_print_test_data
   852  024A  0876               	movf	_hex_char_high,w
   853  024B  20B6               	call	_uart_send	;HIGH NIBBLE HIGH BYTE
   854  024C  0875               	movf	_hex_char_low,w
   855  024D  20B6               	call	_uart_send	;LOW NIBBLE HIGH BYTE
   856  024E  2229               	call	GET_TEST_BYTE	;GET LSB
   857  024F  158A               	pagesel	_byte_to_hex
   858  0250  27A5               	call	_byte_to_hex& (0+2047)
   859  0251  118A               	pagesel	_print_test_data
   860  0252  0876               	movf	_hex_char_high,w
   861  0253  20B6               	call	_uart_send	;HIGH NIBBLE LOW BYTE
   862  0254  0875               	movf	_hex_char_low,w
   863  0255  20B6               	call	_uart_send	;LOW NIBBLE LOW BYTE
   864  0256  0BBD               	decfsz	_gen_count2,f
   865  0257  2A40               	goto	PTD_INNER
   866  0258  0BBE               	decfsz	_gen_count,f
   867  0259  2A3F               	goto	PTD_OUTER
   868  025A  0008               	return
   869  025B                     _usb_reset_all:	
   870                           ;CHECK_FREE_SPACE
   871                           ; BCF FLAG_REG, 3
   872                           ; BCF FLAG_REG, 4
   873                           ; MOVF USB_FREE_SPACE3, F
   874                           ; BTFSS STATUS, Z
   875                           ; GOTO CFS2
   876                           ; BSF FLAG_REG, 3
   877                           ; BSF FLAG_REG, 4
   878                           ; RETURN
   879                           ;CFS2
   880                           ; MOVF USB_FREE_SPACE2, W
   881                           ; SUBLW H'02'
   882                           ; BTFSS STATUS, C
   883                           ; GOTO CFS3
   884                           ; BSF FLAG_REG, 3
   885                           ; BSF FLAG_REG, 4
   886                           ; RETURN
   887                           ;CFS3
   888                           ; MOVF USB_FREE_SPACE1, W
   889                           ; XORWF TAPE_SIZE_HIGH, W
   890                           ; BTFSC STATUS, Z
   891                           ; GOTO CFS4
   892                           ; MOVF TAPE_SIZE_HIGH, W
   893                           ; SUBWF USB_FREE_SPACE1, W
   894                           ; BTFSC STATUS, C
   895                           ; BSF FLAG_REG, 3
   896                           ; RETURN
   897                           ;CFS4
   898                           ; MOVF TAPE_SIZE_LOW, F
   899                           ; BTFSC STATUS, Z
   900                           ; BSF FLAG_REG, 3
   901                           ; RETURN
   902                           
   903  025B  1108               	bcf	8,2	;CH376 CE LINE LOW
   904  025C  3005               	movlw	5	;RESET ALL COMMAND
   905  025D  2211               	call	SPI_TRANSFER
   906  025E  1508               	bsf	8,2	;CH376S CE LINE HIGH
   907  025F  0008               	return
   908  0260                     _usb_set_file_name:	
   909  0260  1383               	bcf	3,7
   910  0261  3053               	movlw	_tape_name	;NAME ADDRESS
   911  0262  0084               	movwf	4
   912  0263  3008               	movlw	8	;NAME LENGTH
   913  0264  00BB               	movwf	_gen_count4
   914  0265  1108               	bcf	8,2
   915  0266  302F               	movlw	47	;SET FILE NAME COMMAND
   916  0267  2211               	call	SPI_TRANSFER
   917  0268  302F               	movlw	47	;'\' CHAR NEEDED AT START OF NAME
   918  0269  2211               	call	SPI_TRANSFER
   919  026A                     USFN_LOOP:	
   920  026A  0800               	movf	0,w
   921  026B  2211               	call	SPI_TRANSFER
   922  026C  0A84               	incf	4,f
   923  026D  0BBB               	decfsz	_gen_count4,f
   924  026E  2A6A               	goto	USFN_LOOP
   925  026F  0100               	clrw	;NULL CHAR AT END OF NAME
   926  0270  2211               	call	SPI_TRANSFER
   927  0271  1508               	bsf	8,2	;CE LINE HIGH
   928  0272  0008               	return
   929  0273                     _usb_file_open:	
   930  0273  1108               	bcf	8,2
   931  0274  3032               	movlw	50	;FILE OPEN COMMAND
   932  0275  2211               	call	SPI_TRANSFER
   933  0276  1508               	bsf	8,2
   934  0277  0008               	return
   935  0278                     _usb_file_close:	
   936  0278  1108               	bcf	8,2
   937  0279  3036               	movlw	54	;FILE CLOSE COMMAND
   938  027A  2211               	call	SPI_TRANSFER
   939  027B  3001               	movlw	1	;UPDATE FILE LENGTH
   940  027C  2211               	call	SPI_TRANSFER
   941  027D  1508               	bsf	8,2
   942  027E  0008               	return
   943  027F                     USB_BYTE_READ:	
   944  027F  1108               	bcf	8,2
   945  0280  303A               	movlw	58	;BYTE READ COMMAND
   946  0281  2211               	call	SPI_TRANSFER
   947  0282  0832               	movf	_usb_file_size_low,w
   948  0283  2211               	call	SPI_TRANSFER
   949  0284  0833               	movf	_usb_file_size_high,w
   950  0285  2211               	call	SPI_TRANSFER
   951  0286  1508               	bsf	8,2
   952  0287  0008               	return
   953  0288                     USB_BYTE_READ_GO:	
   954  0288  1108               	bcf	8,2
   955  0289  303B               	movlw	59	;BYTE READ ((ADCON0) and 07Fh), 2 COMMAND
   956  028A  2211               	call	SPI_TRANSFER
   957  028B  1508               	bsf	8,2
   958  028C  0008               	return
   959  028D                     USB_READ_DATA0:	
   960  028D  1108               	bcf	8,2
   961  028E  3027               	movlw	39	;READ DATA0 COMMAND
   962  028F  2211               	call	SPI_TRANSFER
   963  0290  0100               	clrw
   964  0291  2211               	call	SPI_TRANSFER	;GET NUMBER OF BYTES TO READ
   965  0292  07B0               	addwf	_usb_bytes_read_low,f
   966  0293  1803               	btfsc	3,0
   967  0294  0AB1               	incf	_usb_bytes_read_high,f
   968  0295  00BB               	movwf	_gen_count4
   969  0296                     URD_LOOP:	
   970  0296  0100               	clrw
   971  0297  2211               	call	SPI_TRANSFER
   972                           
   973                           ;CALL RAM_WRITE_AUTO ;this is a problem, two active spi devices
   974  0298  2798               	call	_fifo_push
   975  0299  0BBB               	decfsz	_gen_count4,f
   976  029A  2A96               	goto	URD_LOOP
   977  029B  1508               	bsf	8,2
   978  029C  245E               	call	_fifo_tf_to_mem
   979  029D  0008               	return
   980  029E                     _usb_get_file_size:	
   981  029E  1108               	bcf	8,2
   982  029F  300C               	movlw	12	;GET FILE SIZE COMMAND
   983  02A0  2211               	call	SPI_TRANSFER
   984  02A1  3068               	movlw	104	;COMMAND DATA
   985  02A2  2211               	call	SPI_TRANSFER
   986  02A3  0100               	clrw
   987  02A4  2211               	call	SPI_TRANSFER
   988  02A5  00B2               	movwf	_usb_file_size_low
   989  02A6  0100               	clrw
   990  02A7  2211               	call	SPI_TRANSFER
   991  02A8  00B3               	movwf	_usb_file_size_high
   992  02A9  0100               	clrw
   993  02AA  2211               	call	SPI_TRANSFER
   994  02AB  0100               	clrw
   995  02AC  2211               	call	SPI_TRANSFER	;DISCARD UPPER BYTES OF FILE SIZE
   996  02AD  1508               	bsf	8,2
   997  02AE  0008               	return
   998  02AF                     _usb_check_exists:	
   999  02AF  1108               	bcf	8,2
  1000  02B0  00C4               	movwf	_temp4
  1001  02B1  3006               	movlw	6
  1002  02B2  2211               	call	SPI_TRANSFER	;SEND CHECK_EXISTS COMMAND
  1003  02B3  0844               	movf	_temp4,w
  1004  02B4  2211               	call	SPI_TRANSFER	;SEND TEST DATA
  1005  02B5  0100               	clrw
  1006  02B6  2211               	call	SPI_TRANSFER	;GET RESULT
  1007  02B7  1508               	bsf	8,2
  1008  02B8  0008               	return
  1009  02B9                     _usb_file_create:	
  1010  02B9  1108               	bcf	8,2
  1011  02BA  3034               	movlw	52
  1012  02BB  2211               	call	SPI_TRANSFER
  1013  02BC  1508               	bsf	8,2
  1014  02BD  0008               	return
  1015  02BE                     USB_BYTE_WRITE:	
  1016  02BE  1108               	bcf	8,2
  1017  02BF  303C               	movlw	60
  1018  02C0  2211               	call	SPI_TRANSFER
  1019  02C1  0832               	movf	_usb_file_size_low,w
  1020  02C2  2211               	call	SPI_TRANSFER
  1021  02C3  0833               	movf	_usb_file_size_high,w
  1022  02C4  2211               	call	SPI_TRANSFER
  1023  02C5  1508               	bsf	8,2
  1024  02C6  0008               	return
  1025  02C7                     USB_BYTE_WR_GO:	
  1026  02C7  1108               	bcf	8,2
  1027  02C8  303D               	movlw	61
  1028  02C9  2211               	call	SPI_TRANSFER
  1029  02CA  1508               	bsf	8,2
  1030  02CB  0008               	return
  1031  02CC                     _usb_get_status:	
  1032  02CC  1108               	bcf	8,2
  1033  02CD  3022               	movlw	34
  1034  02CE  2211               	call	SPI_TRANSFER
  1035  02CF  0100               	clrw
  1036  02D0  2211               	call	SPI_TRANSFER
  1037  02D1  1508               	bsf	8,2
  1038  02D2  0008               	return
  1039  02D3                     _usb_disk_mount:	
  1040  02D3  1108               	bcf	8,2
  1041  02D4  3031               	movlw	49
  1042  02D5  2211               	call	SPI_TRANSFER
  1043  02D6  1508               	bsf	8,2
  1044  02D7  0008               	return
  1045  02D8                     _usb_disk_connect:	
  1046  02D8  1108               	bcf	8,2
  1047  02D9  3030               	movlw	48
  1048  02DA  2211               	call	SPI_TRANSFER
  1049  02DB  1508               	bsf	8,2
  1050  02DC  0008               	return
  1051  02DD                     _usb_set_mode:	
  1052  02DD  00C3               	movwf	_temp5
  1053  02DE  1108               	bcf	8,2
  1054  02DF  3015               	movlw	21
  1055  02E0  2211               	call	SPI_TRANSFER
  1056  02E1  0843               	movf	_temp5,w
  1057  02E2  2211               	call	SPI_TRANSFER
  1058  02E3  1508               	bsf	8,2
  1059  02E4  0008               	return
  1060  02E5                     _usb_get_version:	
  1061  02E5  1108               	bcf	8,2
  1062  02E6  3001               	movlw	1
  1063  02E7  2211               	call	SPI_TRANSFER
  1064  02E8  0100               	clrw
  1065  02E9  2211               	call	SPI_TRANSFER
  1066  02EA  1508               	bsf	8,2
  1067  02EB  0008               	return
  1068  02EC                     USB_WAIT_STATUS:	
  1069  02EC  1123               	bcf	_flag_reg,2
  1070  02ED  0AA6               	incf	_timeout_high,f
  1071  02EE  0AA5               	incf	_timeout_low,f
  1072  02EF                     UWS_LOOP:	
  1073  02EF  3001               	movlw	1
  1074  02F0  2232               	call	_delay_millis	;DELAY 1 MILLISECOND
  1075  02F1  22CC               	call	_usb_get_status
  1076  02F2  00C3               	movwf	_temp5
  1077  02F3  0629               	xorwf	_usb_target_status,w
  1078  02F4  1903               	btfsc	3,2
  1079  02F5  3400               	retlw	0
  1080  02F6  0BA5               	decfsz	_timeout_low,f
  1081  02F7  2AEF               	goto	UWS_LOOP
  1082  02F8  0BA6               	decfsz	_timeout_high,f
  1083  02F9  2AEF               	goto	UWS_LOOP
  1084  02FA  1523               	bsf	_flag_reg,2	;SET FLAG TO INDICATE A TIMEOUT
  1085  02FB  0843               	movf	_temp5,w
  1086  02FC  0008               	return
  1087  02FD                     _usb_disk_capacity:	
  1088  02FD  1108               	bcf	8,2
  1089  02FE  303E               	movlw	62
  1090  02FF  2211               	call	SPI_TRANSFER	;SEND DISK CAPACITY COMMAND
  1091  0300  1508               	bsf	8,2
  1092  0301  3014               	movlw	20
  1093  0302  00A9               	movwf	_usb_target_status	;SET TARGET STATUS TO 14 (DEVICE READY)
  1094  0303  01A6               	clrf	_timeout_high
  1095  0304  3064               	movlw	100
  1096  0305  00A5               	movwf	_timeout_low	;SET TIMEOUT TO 16 MILLISECONDS
  1097  0306  22EC               	call	USB_WAIT_STATUS
  1098  0307  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1099  0308  0008               	return
  1100  0309  1108               	bcf	8,2
  1101  030A  3027               	movlw	39
  1102  030B  2211               	call	SPI_TRANSFER	;SEND READ DATA0 COMMAND
  1103  030C  0100               	clrw
  1104  030D  2211               	call	SPI_TRANSFER	;GET NUMBER OF BYTES TO READ (ALWAYS 4)
  1105  030E  0100               	clrw
  1106  030F  2211               	call	SPI_TRANSFER	;GET LSB OF DISK SIZE
  1107                           
  1108                           ;THE DISK SIZE IS GIVEN IN SECTORS, SO TO GET THE NUMBER OF BYTES WE MULTIPLY BY 512 WHICH IS THE SA
      +                          ME AS SHIFTING BY 9
  1109                           ;THIS MEANS THE LSB IS ALWAYS ((STATUS) and 07Fh), 2 AND THERE IS NO NEED TO HAVE A REGISTER FOR IT.
  1110                           ;INSTEAD WE PUT THE LSB IN USB_DRIVE_SIZE1 WHICH CORRESPONDS TO SHIFTING BY 8.
  1111  0310  00F4               	movwf	_usb_drive_size1
  1112  0311  0100               	clrw
  1113  0312  2211               	call	SPI_TRANSFER
  1114  0313  00F3               	movwf	_usb_drive_size2
  1115  0314  0100               	clrw
  1116  0315  2211               	call	SPI_TRANSFER
  1117  0316  00F2               	movwf	_usb_drive_size3
  1118  0317  0100               	clrw
  1119  0318  2211               	call	SPI_TRANSFER
  1120  0319  1508               	bsf	8,2
  1121  031A  1003               	bcf	3,0	;CLEAR ((STATUS) and 07Fh), 0 FLAG
  1122  031B  0DF4               	rlf	_usb_drive_size1,f
  1123  031C  0DF3               	rlf	_usb_drive_size2,f
  1124  031D  0DF2               	rlf	_usb_drive_size3,f
  1125  031E  0008               	return
  1126  031F                     _usb_disk_query:	
  1127  031F  1108               	bcf	8,2
  1128  0320  303F               	movlw	63
  1129  0321  2211               	call	SPI_TRANSFER	;SEND DISK QUERY COMMAND
  1130  0322  1508               	bsf	8,2
  1131  0323  3014               	movlw	20
  1132  0324  00A9               	movwf	_usb_target_status	;SET TARGET STATUS TO 14 (DEVICE READY)
  1133  0325  01A6               	clrf	_timeout_high
  1134  0326  3064               	movlw	100
  1135  0327  00A5               	movwf	_timeout_low	;SET TIMEOUT TO 16 MILLISECONDS
  1136  0328  22EC               	call	USB_WAIT_STATUS
  1137  0329  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1138  032A  0008               	return
  1139  032B  1108               	bcf	8,2
  1140  032C  3027               	movlw	39
  1141  032D  2211               	call	SPI_TRANSFER	;SEND READ DATA0 COMMAND
  1142  032E  0100               	clrw
  1143  032F  2211               	call	SPI_TRANSFER	;GET NUMBER OF BYTES TO READ (ALWAYS 8)
  1144  0330  0100               	clrw
  1145  0331  2211               	call	SPI_TRANSFER	;GET LSB OF LOGICAL BYTES
  1146  0332  00AC               	movwf	_usb_logical_bytes1
  1147  0333  0100               	clrw
  1148  0334  2211               	call	SPI_TRANSFER
  1149  0335  00AB               	movwf	_usb_logical_bytes2
  1150  0336  0100               	clrw
  1151  0337  2211               	call	SPI_TRANSFER
  1152  0338  00AA               	movwf	_usb_logical_bytes3
  1153  0339  0100               	clrw
  1154  033A  2211               	call	SPI_TRANSFER	;DISCARD MSB OF LOGICAL BYTES
  1155  033B  0100               	clrw
  1156  033C  2211               	call	SPI_TRANSFER	;GET LSB OF FREE SPACE
  1157  033D  00AF               	movwf	_usb_free_space1
  1158  033E  0100               	clrw
  1159  033F  2211               	call	SPI_TRANSFER
  1160  0340  00AE               	movwf	_usb_free_space2
  1161  0341  0100               	clrw
  1162  0342  2211               	call	SPI_TRANSFER
  1163  0343  00AD               	movwf	_usb_free_space3
  1164  0344  0100               	clrw
  1165  0345  2211               	call	SPI_TRANSFER	;DISCARD MSB OF FREE SPACE
  1166  0346  1508               	bsf	8,2
  1167  0347  1003               	bcf	3,0
  1168  0348  0DAC               	rlf	_usb_logical_bytes1,f
  1169  0349  0DAB               	rlf	_usb_logical_bytes2,f
  1170  034A  0DAA               	rlf	_usb_logical_bytes3,f
  1171  034B  1003               	bcf	3,0
  1172  034C  0DAF               	rlf	_usb_free_space1,f
  1173  034D  0DAE               	rlf	_usb_free_space2,f
  1174  034E  0DAD               	rlf	_usb_free_space3,f
  1175  034F  0008               	return
  1176  0350                     _usb_write_test_data:	
  1177  0350  01A7               	clrf	_s_reg_low
  1178  0351  01A8               	clrf	_s_reg_high
  1179  0352  1023               	bcf	_flag_reg,0	;INITIALIZE PSUEDO-RANDOM DATA GENERATOR
  1180  0353  22B9               	call	_usb_file_create
  1181  0354  30B8               	movlw	184
  1182  0355  00A5               	movwf	_timeout_low
  1183  0356  300B               	movlw	11
  1184  0357  00A6               	movwf	_timeout_high	;SET TIMEOUT TO 3 SECONDS
  1185  0358  3014               	movlw	20
  1186  0359  00A9               	movwf	_usb_target_status	;SET TARGET STATUS TO 0x14
  1187  035A  22EC               	call	USB_WAIT_STATUS
  1188  035B  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1189  035C  0008               	return
  1190  035D  3004               	movlw	4	;WE WILL WRITE 4 BLOCKS OF 32KB
  1191  035E  00B9               	movwf	_gen_count6
  1192  035F                     UWTD_L4:	
  1193  035F  01B5               	clrf	_usb_bytes_sent_high
  1194  0360  01B4               	clrf	_usb_bytes_sent_low
  1195  0361  3080               	movlw	128	;SET FILE SIZE TO 32KB
  1196  0362  00B3               	movwf	_usb_file_size_high
  1197  0363  01B2               	clrf	_usb_file_size_low
  1198  0364  22BE               	call	USB_BYTE_WRITE
  1199  0365  300B               	movlw	11
  1200  0366  00A6               	movwf	_timeout_high
  1201  0367  30B8               	movlw	184
  1202  0368  00A5               	movwf	_timeout_low	;3 SECOND TIMEOUT
  1203  0369  301E               	movlw	30
  1204  036A  00A9               	movwf	_usb_target_status
  1205  036B  22EC               	call	USB_WAIT_STATUS
  1206  036C  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1207  036D  0008               	return
  1208  036E                     UWTD_ND_LOOP:	
  1209  036E  1108               	bcf	8,2
  1210  036F  302D               	movlw	45
  1211  0370  2211               	call	SPI_TRANSFER	;SEND WR_REQ_DATA
  1212  0371  0100               	clrw
  1213  0372  2211               	call	SPI_TRANSFER	;GET NUMBER OF BYTES TO SEND
  1214  0373  00BA               	movwf	_gen_count5
  1215  0374                     UWTD_WR_LOOP:	
  1216  0374  2229               	call	GET_TEST_BYTE
  1217  0375  2211               	call	SPI_TRANSFER
  1218  0376  0FB4               	incfsz	_usb_bytes_sent_low,f
  1219  0377  03B5               	decf	_usb_bytes_sent_high,f
  1220  0378  0AB5               	incf	_usb_bytes_sent_high,f
  1221  0379  0835               	movf	_usb_bytes_sent_high,w
  1222  037A  0633               	xorwf	_usb_file_size_high,w
  1223  037B  1D03               	btfss	3,2
  1224  037C  2B81               	goto	UWTD_NB
  1225  037D  0834               	movf	_usb_bytes_sent_low,w
  1226  037E  0632               	xorwf	_usb_file_size_low,w
  1227  037F  1903               	btfsc	3,2
  1228  0380  2B83               	goto	UWTD_BREAK
  1229  0381                     UWTD_NB:	
  1230                           
  1231                           ;((ADCON0) and 07Fh), 2 HERE IF BYTES SENT != FILE SIZE
  1232  0381  0BBA               	decfsz	_gen_count5,f
  1233  0382  2B74               	goto	UWTD_WR_LOOP
  1234  0383                     UWTD_BREAK:	
  1235                           
  1236                           ;((ADCON0) and 07Fh), 2 HERE IF BYTES SENT == FILE SIZE
  1237  0383  1508               	bsf	8,2
  1238  0384  300B               	movlw	11
  1239  0385  00A6               	movwf	_timeout_high
  1240  0386  30B8               	movlw	184
  1241  0387  00A5               	movwf	_timeout_low	;3 SECOND TIMEOUT
  1242  0388  301E               	movlw	30
  1243  0389  00A9               	movwf	_usb_target_status
  1244  038A  22EC               	call	USB_WAIT_STATUS
  1245  038B  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1246  038C  0008               	return
  1247  038D  0835               	movf	_usb_bytes_sent_high,w
  1248  038E  0633               	xorwf	_usb_file_size_high,w
  1249  038F  1D03               	btfss	3,2
  1250  0390  2B95               	goto	UWTD_NE
  1251  0391  0834               	movf	_usb_bytes_sent_low,w
  1252  0392  0632               	xorwf	_usb_file_size_low,w
  1253  0393  1903               	btfsc	3,2
  1254  0394  2BA0               	goto	UWTD_EQUAL
  1255  0395                     UWTD_NE:	
  1256  0395  22C7               	call	USB_BYTE_WR_GO
  1257  0396  300B               	movlw	11
  1258  0397  00A6               	movwf	_timeout_high
  1259  0398  30B8               	movlw	184
  1260  0399  00A5               	movwf	_timeout_low	;3 SECOND TIMEOUT
  1261  039A  301E               	movlw	30
  1262  039B  00A9               	movwf	_usb_target_status
  1263  039C  22EC               	call	USB_WAIT_STATUS
  1264  039D  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1265  039E  0008               	return
  1266  039F  2B6E               	goto	UWTD_ND_LOOP
  1267  03A0                     UWTD_EQUAL:	
  1268  03A0  22C7               	call	USB_BYTE_WR_GO
  1269  03A1  300B               	movlw	11
  1270  03A2  00A6               	movwf	_timeout_high
  1271  03A3  30B8               	movlw	184
  1272  03A4  00A5               	movwf	_timeout_low	;3 SECOND TIMEOUT
  1273  03A5  3014               	movlw	20
  1274  03A6  00A9               	movwf	_usb_target_status
  1275  03A7  22EC               	call	USB_WAIT_STATUS
  1276  03A8  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1277  03A9  0008               	return
  1278  03AA  0BB9               	decfsz	_gen_count6,f
  1279  03AB  2B5F               	goto	UWTD_L4
  1280  03AC  2278               	call	_usb_file_close
  1281  03AD  300B               	movlw	11
  1282  03AE  00A6               	movwf	_timeout_high
  1283  03AF  30B8               	movlw	184
  1284  03B0  00A5               	movwf	_timeout_low	;3 SECOND TIMEOUT
  1285  03B1  3014               	movlw	20
  1286  03B2  00A9               	movwf	_usb_target_status
  1287  03B3  22EC               	call	USB_WAIT_STATUS
  1288  03B4  0008               	return
  1289  03B5                     _usb_file_write:	
  1290  03B5  2458               	call	_fifo_init
  1291  03B6  2260               	call	_usb_set_file_name
  1292  03B7  3010               	movlw	16
  1293  03B8  00A5               	movwf	_timeout_low
  1294  03B9  01A6               	clrf	_timeout_high
  1295  03BA  3014               	movlw	20
  1296  03BB  00A9               	movwf	_usb_target_status
  1297  03BC  22EC               	call	USB_WAIT_STATUS
  1298  03BD  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1299  03BE  0008               	return
  1300  03BF  22B9               	call	_usb_file_create
  1301  03C0  30B8               	movlw	184
  1302  03C1  00A5               	movwf	_timeout_low
  1303  03C2  300B               	movlw	11
  1304  03C3  00A6               	movwf	_timeout_high	;SET TIMEOUT TO 3 SECONDS
  1305  03C4  3014               	movlw	20
  1306  03C5  00A9               	movwf	_usb_target_status	;SET TARGET STATUS TO 0x14
  1307  03C6  22EC               	call	USB_WAIT_STATUS
  1308  03C7  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1309  03C8  0008               	return
  1310  03C9  01B5               	clrf	_usb_bytes_sent_high
  1311  03CA  01B4               	clrf	_usb_bytes_sent_low
  1312  03CB  0838               	movf	_tape_size_high,w
  1313  03CC  00B3               	movwf	_usb_file_size_high
  1314  03CD  0837               	movf	_tape_size_low,w
  1315  03CE  00B2               	movwf	_usb_file_size_low
  1316  03CF  22BE               	call	USB_BYTE_WRITE
  1317  03D0  300B               	movlw	11
  1318  03D1  00A6               	movwf	_timeout_high
  1319  03D2  30B8               	movlw	184
  1320  03D3  00A5               	movwf	_timeout_low
  1321  03D4  301E               	movlw	30
  1322  03D5  00A9               	movwf	_usb_target_status
  1323  03D6  22EC               	call	USB_WAIT_STATUS
  1324  03D7  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1325  03D8  0008               	return
  1326  03D9                     UFW_ND_LOOP:	
  1327                           
  1328                           ;CALL BUFF_INIT ;TODO: CHANGE THIS TO USE FIFO
  1329  03D9  0834               	movf	_usb_bytes_sent_low,w
  1330  03DA  00C1               	movwf	_ram_address_l
  1331  03DB  0835               	movf	_usb_bytes_sent_high,w
  1332  03DC  00C2               	movwf	_ram_address_h
  1333  03DD  03C1               	decf	_ram_address_l,f
  1334  03DE  1C03               	btfss	3,0
  1335  03DF  03C2               	decf	_ram_address_h,f
  1336  03E0  2464               	call	_fifo_tf_from_mem
  1337  03E1  1108               	bcf	8,2
  1338  03E2  302D               	movlw	45
  1339  03E3  2211               	call	SPI_TRANSFER	;SEND WR_REQ_DATA
  1340  03E4  0100               	clrw
  1341  03E5  2211               	call	SPI_TRANSFER	;GET NUMBER OF BYTES TO SEND
  1342  03E6  00BA               	movwf	_gen_count5
  1343  03E7                     UFW_WR_LOOP:	
  1344  03E7  25A9               	call	_fifo_pop
  1345  03E8  2211               	call	SPI_TRANSFER
  1346  03E9  0FB4               	incfsz	_usb_bytes_sent_low,f
  1347  03EA  03B5               	decf	_usb_bytes_sent_high,f
  1348  03EB  0AB5               	incf	_usb_bytes_sent_high,f
  1349  03EC  0835               	movf	_usb_bytes_sent_high,w
  1350  03ED  0633               	xorwf	_usb_file_size_high,w
  1351  03EE  1D03               	btfss	3,2
  1352  03EF  2BF4               	goto	UFW_NB
  1353  03F0  0834               	movf	_usb_bytes_sent_low,w
  1354  03F1  0632               	xorwf	_usb_file_size_low,w
  1355  03F2  1903               	btfsc	3,2
  1356  03F3  2BF6               	goto	UFW_BREAK
  1357  03F4                     UFW_NB:	
  1358  03F4  0BBA               	decfsz	_gen_count5,f
  1359  03F5  2BE7               	goto	UFW_WR_LOOP
  1360  03F6                     UFW_BREAK:	
  1361  03F6  1508               	bsf	8,2
  1362  03F7  300B               	movlw	11
  1363  03F8  00A6               	movwf	_timeout_high
  1364  03F9  30B8               	movlw	184
  1365  03FA  00A5               	movwf	_timeout_low
  1366  03FB  301E               	movlw	30
  1367  03FC  00A9               	movwf	_usb_target_status
  1368  03FD  22EC               	call	USB_WAIT_STATUS
  1369  03FE  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1370  03FF  0008               	return
  1371  0400  0835               	movf	_usb_bytes_sent_high,w
  1372  0401  0633               	xorwf	_usb_file_size_high,w
  1373  0402  1D03               	btfss	3,2
  1374  0403  2C08               	goto	UFW_NE
  1375  0404  0834               	movf	_usb_bytes_sent_low,w
  1376  0405  0632               	xorwf	_usb_file_size_low,w
  1377  0406  1903               	btfsc	3,2
  1378  0407  2C13               	goto	UFW_EQUAL
  1379  0408                     UFW_NE:	
  1380  0408  22C7               	call	USB_BYTE_WR_GO
  1381  0409  300B               	movlw	11
  1382  040A  00A6               	movwf	_timeout_high
  1383  040B  30B8               	movlw	184
  1384  040C  00A5               	movwf	_timeout_low
  1385  040D  301E               	movlw	30
  1386  040E  00A9               	movwf	_usb_target_status
  1387  040F  22EC               	call	USB_WAIT_STATUS
  1388  0410  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1389  0411  0008               	return
  1390  0412  2BD9               	goto	UFW_ND_LOOP
  1391  0413                     UFW_EQUAL:	
  1392  0413  22C7               	call	USB_BYTE_WR_GO
  1393  0414  300B               	movlw	11
  1394  0415  00A6               	movwf	_timeout_high
  1395  0416  30B8               	movlw	184
  1396  0417  00A5               	movwf	_timeout_low
  1397  0418  3014               	movlw	20
  1398  0419  00A9               	movwf	_usb_target_status
  1399  041A  22EC               	call	USB_WAIT_STATUS
  1400  041B  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1401  041C  0008               	return
  1402  041D  2278               	call	_usb_file_close
  1403  041E  300B               	movlw	11
  1404  041F  00A6               	movwf	_timeout_high
  1405  0420  30B8               	movlw	184
  1406  0421  00A5               	movwf	_timeout_low
  1407  0422  3014               	movlw	20
  1408  0423  00A9               	movwf	_usb_target_status
  1409  0424  22EC               	call	USB_WAIT_STATUS
  1410  0425  0008               	return
  1411  0426                     _usb_file_read:	
  1412  0426  30FF               	movlw	255
  1413  0427  00C2               	movwf	_ram_address_h
  1414  0428  00C1               	movwf	_ram_address_l	;RAM ADDRESS WILL OVERFLOW BEFORE FIRST WRITE
  1415  0429  227F               	call	USB_BYTE_READ
  1416  042A  01A6               	clrf	_timeout_high
  1417  042B  3080               	movlw	128
  1418  042C  00A5               	movwf	_timeout_low
  1419  042D  301D               	movlw	29
  1420  042E  00A9               	movwf	_usb_target_status
  1421  042F  22EC               	call	USB_WAIT_STATUS
  1422  0430  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1423  0431  0008               	return
  1424  0432                     UFR_LOOP:	
  1425  0432  228D               	call	USB_READ_DATA0
  1426  0433  3001               	movlw	1
  1427  0434  2232               	call	_delay_millis
  1428  0435  0832               	movf	_usb_file_size_low,w
  1429  0436  0630               	xorwf	_usb_bytes_read_low,w
  1430  0437  1D03               	btfss	3,2
  1431  0438  2C3D               	goto	UFR_GO
  1432  0439  0833               	movf	_usb_file_size_high,w
  1433  043A  0631               	xorwf	_usb_bytes_read_high,w
  1434  043B  1903               	btfsc	3,2
  1435  043C  2C47               	goto	UFR_DONE
  1436  043D                     UFR_GO:	
  1437  043D  2288               	call	USB_BYTE_READ_GO
  1438  043E  01A6               	clrf	_timeout_high
  1439  043F  30FF               	movlw	255
  1440  0440  00A5               	movwf	_timeout_low
  1441  0441  301D               	movlw	29
  1442  0442  00A9               	movwf	_usb_target_status
  1443  0443  22EC               	call	USB_WAIT_STATUS
  1444  0444  1923               	btfsc	_flag_reg,2	;CHECK TIMEOUT FLAG
  1445  0445  0008               	return
  1446  0446  2C32               	goto	UFR_LOOP
  1447  0447                     UFR_DONE:	
  1448  0447  0832               	movf	_usb_file_size_low,w
  1449  0448  00B7               	movwf	_tape_size_low
  1450  0449  0833               	movf	_usb_file_size_high,w
  1451  044A  00B8               	movwf	_tape_size_high
  1452  044B  1108               	bcf	8,2
  1453  044C  3036               	movlw	54
  1454  044D  2211               	call	SPI_TRANSFER	;SEND FILE CLOSE COMMAND
  1455  044E  0100               	clrw
  1456  044F  2211               	call	SPI_TRANSFER	;FILE CLOSE PARAMETER IS 0 (DO NOT UPDATE FILE SIZE)
  1457  0450  1508               	bsf	8,2
  1458  0451  01A6               	clrf	_timeout_high
  1459  0452  3080               	movlw	128
  1460  0453  00A5               	movwf	_timeout_low
  1461  0454  3014               	movlw	20
  1462  0455  00A9               	movwf	_usb_target_status
  1463  0456  22EC               	call	USB_WAIT_STATUS
  1464  0457  0008               	return
  1465  0458                     _fifo_init:	
  1466  0458  01F0               	clrf	_fifo_write_idx
  1467  0459  01A1               	clrf	_fifo_write_bank
  1468  045A  01F1               	clrf	_fifo_read_idx
  1469  045B  01A2               	clrf	_fifo_read_bank
  1470  045C  01A0               	clrf	_fifo_num_bytes
  1471  045D  0008               	return
  1472  045E                     _fifo_tf_to_mem:	
  1473  045E  08A0               	movf	_fifo_num_bytes,f
  1474  045F  1903               	btfsc	3,2
  1475  0460  0008               	return
  1476  0461  25A9               	call	_fifo_pop
  1477  0462  20E0               	call	RAM_WRITE_AUTO
  1478  0463  2C5E               	goto	_fifo_tf_to_mem
  1479  0464                     _fifo_tf_from_mem:	
  1480  0464  0920               	comf	_fifo_num_bytes,w
  1481  0465  1903               	btfsc	3,2
  1482  0466  0008               	return
  1483  0467  20BA               	call	RAM_READ_AUTO
  1484  0468  2798               	call	_fifo_push
  1485  0469  2C64               	goto	_fifo_tf_from_mem


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                               Sat Jun 10 16:15:36 2023

                          FSR 0004                            TP1 0206                            TP2 0208  
                          TP3 020A                 _hex_char_high 0076                 _usb_file_read 0426  
               _usb_file_open 0273                           INDF 0000                           PIR1 000C  
                         TMR0 0001                  LCD_SEND_LOOP 0125           _usb_bytes_read_high 0031  
              _usb_file_close 0278                  _usb_set_mode 02DD                _usb_file_write 03B5  
                        RCREG 001A                          RCSTA 0018                          SPBRG 0099  
                        PORTA 0005                          PORTB 0006                          PORTC 0007  
                        PORTD 0008                _usb_disk_mount 02D3                          TRISA 0085  
                        TRISB 0086                          TRISC 0087                          TRISD 0088  
                        TRISE 0089                _usb_disk_query 031F                          TXREG 0019  
                        TXSTA 0098                  GET_TEST_BYTE 0229                _usb_get_status 02CC  
         _usb_bytes_sent_high 0035               _usb_file_create 02B9                 _usb_reset_all 025B  
                       ADCON1 009F                         PHASE1 01E4                         PHASE2 01EB  
                       PHASE3 01F3                         PHASE4 01F7                         INTCON 000B  
               TAPE_NAMEBLOCK 01A4                         UFR_GO 043D                         STATUS 0003  
                       SSPCON 0014                         SSPBUF 0013                         UFW_NB 03F4  
                       UFW_NE 0408               _usb_get_version 02E5                         _temp1 0047  
                       _temp2 0046                         _temp3 0045                         _temp4 0044  
                       _temp5 0043               _usb_free_space1 002F               _usb_free_space2 002E  
             _usb_free_space3 002D                  USB_BYTE_READ 027F             _usb_target_status 0029  
               RAM_WRITE_AUTO 00E0               _usb_drive_size1 0074               _usb_drive_size2 0073  
             _usb_drive_size3 0072             _usb_set_file_name 0260              _usb_disk_connect 02D8  
                      TAPE_W1 01A6                        TAPE_W2 01A8                        TAPE_W3 01BD  
                      TAPE_NE 01BB                        TAPE_W4 01BF                        PN_LOOP 0186  
                      SSPSTAT 0094                        UWTD_L4 035F                        UWTD_NB 0381  
                      UWTD_NE 0395                     LEADER_OUT 019C                   RAM_CONFIG_C 010E  
                 RAM_CONFIG_D 0115                     BUILD_WORD 021A                     LCD_CLEAR1 015B  
               USB_BYTE_WRITE 02BE                 USB_BYTE_WR_GO 02C7                 USB_READ_DATA0 028D  
              _tape_size_high 0038                     GTB_UPDATE 022E                   RAM_WRITE_AH 00EA  
                 RAM_WRITE_AL 00F2                     PHASE_DONE 0202                  MEM_DUMP_LOOP 0094  
           _usb_disk_capacity 02FD                       CLLOOP40 0154                     RAM_CONFIG 0108  
                     FD_INNER 00AB             _usb_file_size_low 0032                       DM_INNER 0237  
                   RAM_WAIT_D 00D2                     RAM_WAIT_R 00D9                       DM_OUTER 0235  
                   TAPE_PAUSE 0204                  _delay_millis 0232                       RAM_READ 00BD  
                     TAPE_OUT 018F             _usb_get_file_size 029E           _usb_write_test_data 0350  
                     UFR_DONE 0447                       UFR_LOOP 0432                       SPI_WAIT 0214  
                   OPTION_REG 0081                       URD_LOOP 0296                    _gen_count2 003D  
                  _gen_count3 003C                    _gen_count4 003B                    _gen_count5 003A  
                  _gen_count6 0039                    _lcd_clear2 0168                 _ram_address_h 0042  
               _ram_address_l 0041                       UWS_LOOP 02EF                    _ldel_count 003F  
                  _initialize 0049                     UWTD_BREAK 0383                     UWTD_EQUAL 03A0  
                     _pulse_e 0175                    _s_reg_high 0028                    _sdel_count 0040  
                  LEADER_WAIT 019E                    LEADER_OUT2 01B5                    LCD_CLEAR12 0161  
                  LCD_CLEAR22 016E                    _print_name 0180                  RAM_READ_AUTO 00BA  
               MEM_CLEAR_LOOP 0086                  _hex_char_low 0075               _fifo_write_bank 0021  
          _usb_bytes_read_low 0030                   SPI_TRANSFER 0211            _usb_bytes_sent_low 0034  
                  PHASE2_NEXT 01F9                BUILD_WORD_LOOP 021C                      DISPLAYON 013A  
          _usb_file_size_high 0033                 _tape_size_low 0037                      DM_MILLIS 0233  
                  RAM_WAIT_AH 00C3                    RAM_WAIT_AL 00CB                 _delay_counter 0024  
                  RAM_WRITE_D 00FA                    RAM_WRITE_R 0101                USB_WAIT_STATUS 02EC  
                    RAM_WRITE 00E3                    SETHOME_LCD 0148                     _bit_count 0036  
                   _gen_count 003E                     _fifo_init 0458                      PTD_INNER 0240  
                   _file_dump 009F                     _fifo_push 0798                      PTD_OUTER 023F  
                   _lcd_line2 014F            _usb_logical_bytes1 002C            _usb_logical_bytes2 002B  
          _usb_logical_bytes3 002A                      UFW_BREAK 03F6                      UFW_EQUAL 0413  
              _fifo_read_bank 0022                      USFN_LOOP 026A                     _mem_clear 0083  
              _fifo_tf_to_mem 045E                   UWTD_ND_LOOP 036E                     _s_reg_low 0027  
              _fifo_num_bytes 0020                     _tape_name 0053                FUNCTIONSET_LCD 0131  
                 UWTD_WR_LOOP 0374                     _uart_read 00B2                     _uart_send 00B6  
                 CLEARDISPLAY 0141                _fifo_write_idx 0070                    UFW_ND_LOOP 03D9  
             _print_test_data 023E                    UFW_WR_LOOP 03E7                 PTD_NO_NEWLINE 0246  
                 _byte_to_hex 0FA5              _fifo_tf_from_mem 0464                      _flag_reg 0023  
                    _fifo_pop 05A9                      _lcd_send 0122                      _lcd_putc 011C  
               _fifo_read_idx 0071                      _mem_dump 0091                      _tape_int 01CF  
                 LEADER_WAIT2 01B7                  _timeout_high 0026              _usb_check_exists 02AF  
                 _timeout_low 0025               USB_BYTE_READ_GO 0288  

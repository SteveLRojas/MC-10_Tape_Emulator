Disassembly Listing for MC10_Tape_Drive_C
Generated From:
/home/dragomir/repos/MC-10_Tape_Emulator/MC10_Tape_Drive_C.X/dist/default/production/MC10_Tape_Drive_C.X.production.elf
May 29, 2023 4:49:11 PM

---  /home/dragomir/repos/MC-10_Tape_Emulator/MC10_Tape_Drive_C.X/main.c  -------------------------------
1:             /*
2:              * File:   main.c
3:              * Author: Steve
4:              *
5:              * Created on August 25, 2022, 1:44 PM
6:              */
7:             // CONFIG1
8:             #pragma config FOSC = XT        // Oscillator Selection bits (XT oscillator)
9:             #pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
10:            #pragma config PWRTE = ON       // Power-up Timer Enable bit (PWRT enabled)
11:            #pragma config MCLRE = ON       // MCLR/VPP/RE3 Pin Function Select bit (MCLR/VPP/RE3 pin function is MCLR)
12:            #pragma config BOREN = ON       // Brown-out Reset Enable bit (Enabled)
13:            #pragma config BORV = 42        // Brown-out Reset Voltage bits (VBOR set to 4.2V)
14:            #pragma config CCP2MX = RC1     // CCP2 Multiplex bit (CCP2 is on RC1)
15:            #pragma config CP = OFF         // Flash Program Memory Code Protection bits (Code protection off)
16:            
17:            // CONFIG2
18:            #pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
19:            #pragma config IESO = OFF       // Internal External Switchover bit (Internal External Switchover mode disabled)
20:            #pragma config BORSEN = OFF     // Brown-out Reset Software Enable bit (Disabled)
21:            
22:            #define MHz *1000000UL
23:            #define _XTAL_FREQ (4 MHz)
24:            
25:            #include <xc.h>
26:            #include <pic16f747.h>
27:            
28:            //ASM globals
29:            //unsigned char dreg;
30:            unsigned char temp3;
31:            unsigned char temp4;
32:            unsigned char temp5;
33:            unsigned char ram_address_h;
34:            unsigned char ram_address_l;
35:            unsigned char sdel_count;
36:            unsigned char ldel_count;
37:            unsigned char gen_count;
38:            unsigned char gen_count2;
39:            unsigned char gen_count3;
40:            unsigned char gen_count4;
41:            unsigned char tape_size_high;
42:            unsigned char tape_size_low;
43:            unsigned char hex_char_high;
44:            unsigned char hex_char_low;
45:            unsigned char usb_file_size_high;
46:            unsigned char usb_file_size_low;
47:            unsigned char usb_bytes_read_high;
48:            unsigned char usb_bytes_read_low;
49:            unsigned char usb_drive_size1;
50:            unsigned char usb_drive_size2;
51:            unsigned char usb_drive_size3;
52:            unsigned char usb_free_space1;
53:            unsigned char usb_free_space2;
54:            unsigned char usb_free_space3;
55:            unsigned char usb_logical_bytes1;
56:            unsigned char usb_logical_bytes2;
57:            unsigned char usb_logical_bytes3;
58:            unsigned char usb_target_status;
59:            unsigned char s_reg_high;
60:            unsigned char s_reg_low;
61:            unsigned char timeout_high;
62:            unsigned char timeout_low;
63:            unsigned char delay_counter;
64:            unsigned char flag_reg;
65:            unsigned char fifo_read_idx;
66:            unsigned char fifo_read_bank;
67:            unsigned char fifo_write_idx;
68:            unsigned char fifo_write_bank;
69:            unsigned char fifo_num_bytes;
70:            
71:            unsigned char tape_name[8] = {'D', 'E', 'R', 'G', 'A', 'N', 'Q', 'Q'};
72:            
73:            //ASM function declarations
74:            void initialize();
75:            void mem_clear();
76:            void mem_dump();
77:            void file_dump();
78:            unsigned char uart_read();
79:            void uart_send(unsigned char);
80:            void lcd_putc(unsigned char);
81:            void lcd_line2();
82:            void lcd_clear2();
83:            void print_name();
84:            void delay_millis(unsigned char);
85:            void print_test_data();
86:            void usb_reset_all();
87:            void usb_set_file_name();
88:            void usb_file_open();
89:            void usb_file_close();
90:            void usb_get_file_size();
91:            unsigned char usb_check_exists(unsigned char);
92:            void usb_file_create();
93:            unsigned char usb_get_status();
94:            void usb_disk_mount();
95:            void usb_disk_connect();
96:            void usb_set_mode(unsigned char);
97:            unsigned char usb_get_version();
98:            void usb_disk_capacity();
99:            void usb_disk_query();
100:           //void usb_write_test_data();
101:           //void usb_file_write();
102:           unsigned char usb_file_read();
103:           
104:           //C globals
105:           unsigned char fifo_bank_A[64];
106:           unsigned char fifo_bank_B[96];
107:           unsigned char fifo_bank_C[96];
108:           
109:           const char str_timeout[] = "Timeout: ";
110:           const char str_cmd_mode[] = "Command mode\n";
111:           
112:           const unsigned char hex_table[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
113:           
114:           
115:           unsigned char fifo_push(unsigned char data)
0288  00F8     MOVWF data
116:           {
117:               switch(fifo_write_bank)
0289  2AA0     GOTO 0x2A0
02A0  1283     BCF STATUS, 0x5
02A1  1303     BCF STATUS, 0x6
02A2  0821     MOVF fifo_write_bank, W
02A3  3A00     XORLW 0x0
02A4  1903     BTFSC STATUS, 0x2
02A5  2A8A     GOTO 0x28A
02A6  3A01     XORLW 0x1
02A7  1903     BTFSC STATUS, 0x2
02A8  2A8A     GOTO 0x28A
02A9  3A03     XORLW 0x3
02AA  1903     BTFSC STATUS, 0x2
02AB  2A92     GOTO 0x292
02AC  3A01     XORLW 0x1
02AD  1903     BTFSC STATUS, 0x2
02AE  2A92     GOTO 0x292
02AF  3A07     XORLW 0x7
02B0  1903     BTFSC STATUS, 0x2
02B1  2A92     GOTO 0x292
02B2  3A01     XORLW 0x1
02B3  1903     BTFSC STATUS, 0x2
02B4  2A97     GOTO 0x297
02B5  3A03     XORLW 0x3
02B6  1903     BTFSC STATUS, 0x2
02B7  2A97     GOTO 0x297
02B8  3A01     XORLW 0x1
02B9  1903     BTFSC STATUS, 0x2
02BA  2A97     GOTO 0x297
02BB  2ABC     GOTO 0x2BC
118:               {
119:                   case 0:
120:                   case 1:
121:                       fifo_bank_A[fifo_write_idx] = data;
028A  0878     MOVF data, W
028B  00F7     MOVWF __pcstackCOMMON
028C  0870     MOVF fifo_write_idx, W
028D  3EA0     ADDLW 0xA0
028E  0084     MOVWF FSR
028F  0877     MOVF __pcstackCOMMON, W
0290  1383     BCF STATUS, 0x7
0291  2A9E     GOTO 0x29E
122:                       break;
123:                   case 2:
124:                   case 3:
125:                   case 4:
126:                       fifo_bank_B[fifo_write_idx - 64] = data;
0292  0878     MOVF data, W
0293  00F7     MOVWF __pcstackCOMMON
0294  0870     MOVF fifo_write_idx, W
0295  3E50     ADDLW 0x50
0296  2A9B     GOTO 0x29B
127:                       break;
128:                   case 5:
129:                   case 6:
130:                   case 7:
131:                       fifo_bank_C[fifo_write_idx - (64 + 96)] = data;
0297  0878     MOVF data, W
0298  00F7     MOVWF __pcstackCOMMON
0299  0870     MOVF fifo_write_idx, W
029A  3E70     ADDLW 0x70
029B  0084     MOVWF FSR
029C  0877     MOVF __pcstackCOMMON, W
029D  1783     BSF STATUS, 0x7
029E  0080     MOVWF INDF
132:                       break;
029F  2ABC     GOTO 0x2BC
133:               }
134:               ++fifo_write_idx;
02BC  3001     MOVLW 0x1
02BD  00F7     MOVWF __pcstackCOMMON
02BE  0877     MOVF __pcstackCOMMON, W
02BF  07F0     ADDWF fifo_write_idx, F
135:               if(!(fifo_write_idx & 0x1F))
02C0  0870     MOVF fifo_write_idx, W
02C1  391F     ANDLW 0x1F
02C2  1D03     BTFSS STATUS, 0x2
02C3  2AC8     GOTO 0x2C8
136:               {
137:                   ++fifo_write_bank;
02C4  3001     MOVLW 0x1
02C5  00F7     MOVWF __pcstackCOMMON
02C6  0877     MOVF __pcstackCOMMON, W
02C7  07A1     ADDWF fifo_write_bank, F
138:               }
139:               ++fifo_num_bytes;
02C8  3001     MOVLW 0x1
02C9  00F7     MOVWF __pcstackCOMMON
02CA  0877     MOVF __pcstackCOMMON, W
02CB  07A0     ADDWF fifo_num_bytes, F
140:               return fifo_num_bytes;
02CC  0820     MOVF fifo_num_bytes, W
141:           }
02CD  0008     RETURN
142:           
143:           unsigned char fifo_pop(void)
144:           {
145:               unsigned char temp;
146:               switch(fifo_read_bank)
024A  2A5C     GOTO 0x25C
025C  1283     BCF STATUS, 0x5
025D  1303     BCF STATUS, 0x6
025E  0822     MOVF fifo_read_bank, W
025F  3A00     XORLW 0x0
0260  1903     BTFSC STATUS, 0x2
0261  2A4B     GOTO 0x24B
0262  3A01     XORLW 0x1
0263  1903     BTFSC STATUS, 0x2
0264  2A4B     GOTO 0x24B
0265  3A03     XORLW 0x3
0266  1903     BTFSC STATUS, 0x2
0267  2A50     GOTO 0x250
0268  3A01     XORLW 0x1
0269  1903     BTFSC STATUS, 0x2
026A  2A50     GOTO 0x250
026B  3A07     XORLW 0x7
026C  1903     BTFSC STATUS, 0x2
026D  2A50     GOTO 0x250
026E  3A01     XORLW 0x1
026F  1903     BTFSC STATUS, 0x2
0270  2A53     GOTO 0x253
0271  3A03     XORLW 0x3
0272  1903     BTFSC STATUS, 0x2
0273  2A53     GOTO 0x253
0274  3A01     XORLW 0x1
0275  1903     BTFSC STATUS, 0x2
0276  2A53     GOTO 0x253
0277  2A78     GOTO 0x278
147:               {
148:                   case 0:
149:                   case 1:
150:                       temp = fifo_bank_A[fifo_read_idx];
024B  0871     MOVF fifo_read_idx, W
024C  3EA0     ADDLW 0xA0
024D  0084     MOVWF FSR
024E  1383     BCF STATUS, 0x7
024F  2A57     GOTO 0x257
151:                       break;
152:                   case 2:
153:                   case 3:
154:                   case 4:
155:                       temp = fifo_bank_B[fifo_read_idx - 64];
0250  0871     MOVF fifo_read_idx, W
0251  3E50     ADDLW 0x50
0252  2A55     GOTO 0x255
156:                       break;
157:                   case 5:
158:                   case 6:
159:                   case 7:
160:                       temp = fifo_bank_C[fifo_read_idx - (64 + 96)];
0253  0871     MOVF fifo_read_idx, W
0254  3E70     ADDLW 0x70
0255  0084     MOVWF FSR
0256  1783     BSF STATUS, 0x7
0257  0800     MOVF INDF, W
0258  00F9     MOVWF 0x79
0259  0879     MOVF 0x79, W
025A  00FA     MOVWF temp
161:                       break;
025B  2A78     GOTO 0x278
162:               }
163:               ++fifo_read_idx;
0278  3001     MOVLW 0x1
0279  00F9     MOVWF 0x79
027A  0879     MOVF 0x79, W
027B  07F1     ADDWF fifo_read_idx, F
164:               if(!(fifo_read_idx & 0x1F))
027C  0871     MOVF fifo_read_idx, W
027D  391F     ANDLW 0x1F
027E  1D03     BTFSS STATUS, 0x2
027F  2A84     GOTO 0x284
165:               {
166:                   ++fifo_read_bank;
0280  3001     MOVLW 0x1
0281  00F9     MOVWF 0x79
0282  0879     MOVF 0x79, W
0283  07A2     ADDWF fifo_read_bank, F
167:               }
168:               --fifo_num_bytes;
0284  3001     MOVLW 0x1
0285  02A0     SUBWF fifo_num_bytes, F
169:               return temp;
0286  087A     MOVF temp, W
170:           }
0287  0008     RETURN
171:           
172:           void byte_to_hex(unsigned char data)
01EF  1283     BCF STATUS, 0x5
01F0  1303     BCF STATUS, 0x6
01F1  00C3     MOVWF data
173:           {
174:               hex_char_low = hex_table[data & (unsigned char)0x0F];
01F2  0843     MOVF data, W
01F3  390F     ANDLW 0xF
01F4  3E01     ADDLW 0x1
01F5  0084     MOVWF FSR
01F6  118A     BCF PCLATH, 0x3
01F7  2002     CALL 0x2
01F8  118A     BCF PCLATH, 0x3
01F9  00C1     MOVWF __pcstackBANK0
01FA  0841     MOVF __pcstackBANK0, W
01FB  00F5     MOVWF hex_char_low
175:               data = data >> 4;
01FC  0843     MOVF data, W
01FD  00C1     MOVWF __pcstackBANK0
01FE  3004     MOVLW 0x4
01FF  1003     BCF STATUS, 0x0
0200  0CC1     RRF __pcstackBANK0, F
0201  3EFF     ADDLW 0xFF
0202  1D03     BTFSS STATUS, 0x2
0203  29FF     GOTO 0x1FF
0204  0841     MOVF __pcstackBANK0, W
0205  00C2     MOVWF 0x42
0206  0842     MOVF 0x42, W
0207  00C3     MOVWF data
176:               hex_char_high = hex_table[data & (unsigned char)0x0F];
0208  0843     MOVF data, W
0209  390F     ANDLW 0xF
020A  3E01     ADDLW 0x1
020B  0084     MOVWF FSR
020C  118A     BCF PCLATH, 0x3
020D  2002     CALL 0x2
020E  00C1     MOVWF __pcstackBANK0
020F  0841     MOVF __pcstackBANK0, W
0210  00F6     MOVWF hex_char_high
177:               return;
178:           }
0211  0008     RETURN
179:           
180:           void print_string_lcd(const char* string)
01D2  1283     BCF STATUS, 0x5
01D3  1303     BCF STATUS, 0x6
01D4  00C5     MOVWF string
181:           {
182:               unsigned char i = 0;
01D5  01C6     CLRF i
183:               while(string[i])
01D6  0846     MOVF i, W
01D7  0745     ADDWF string, W
01D8  0084     MOVWF FSR
01D9  118A     BCF PCLATH, 0x3
01DA  2002     CALL 0x2
01DB  118A     BCF PCLATH, 0x3
01DC  3A00     XORLW 0x0
01DD  1903     BTFSC STATUS, 0x2
01DE  0008     RETURN
01EE  29D6     GOTO 0x1D6
184:               {
185:                   lcd_putc(string[i]);
01DF  0846     MOVF i, W
01E0  0745     ADDWF string, W
01E1  0084     MOVWF FSR
01E2  118A     BCF PCLATH, 0x3
01E3  2002     CALL 0x2
01E4  118A     BCF PCLATH, 0x3
01E5  118A     BCF PCLATH, 0x3
01E6  25CC     CALL 0x5CC
01E7  118A     BCF PCLATH, 0x3
186:                   ++i;
01E8  3001     MOVLW 0x1
01E9  1283     BCF STATUS, 0x5
01EA  1303     BCF STATUS, 0x6
01EB  00C4     MOVWF 0x44
01EC  0844     MOVF 0x44, W
01ED  07C6     ADDWF i, F
01EE  29D6     GOTO 0x1D6
187:               }
188:               return;
189:           }
190:           
191:           void print_string_serial(const char* string)
01B5  1283     BCF STATUS, 0x5
01B6  1303     BCF STATUS, 0x6
01B7  00C6     MOVWF i
192:           {
193:               unsigned char i = 0;
01B8  01C5     CLRF string
194:               while(string[i])
01B9  0845     MOVF string, W
01BA  0746     ADDWF i, W
01BB  0084     MOVWF FSR
01BC  118A     BCF PCLATH, 0x3
01BD  2002     CALL 0x2
01BE  118A     BCF PCLATH, 0x3
01BF  3A00     XORLW 0x0
01C0  1903     BTFSC STATUS, 0x2
01C1  0008     RETURN
01D1  29B9     GOTO 0x1B9
195:               {
196:                   uart_send(string[i]);
01C2  0845     MOVF string, W
01C3  0746     ADDWF i, W
01C4  0084     MOVWF FSR
01C5  118A     BCF PCLATH, 0x3
01C6  2002     CALL 0x2
01C7  118A     BCF PCLATH, 0x3
01C8  118A     BCF PCLATH, 0x3
01C9  2566     CALL 0x566
01CA  118A     BCF PCLATH, 0x3
197:                   ++i;
01CB  3001     MOVLW 0x1
01CC  1283     BCF STATUS, 0x5
01CD  1303     BCF STATUS, 0x6
01CE  00C4     MOVWF 0x44
01CF  0844     MOVF 0x44, W
01D0  07C5     ADDWF string, F
01D1  29B9     GOTO 0x1B9
198:               }
199:               return;
200:           }
201:           
202:           void timeout_error()
203:           {
204:               print_string_serial(str_timeout);
205:               byte_to_hex(usb_target_status);
206:               uart_send(hex_char_high);
207:               uart_send(hex_char_low);
208:               uart_send('\n');
209:               return;
210:           }
211:           
212:           void print_capacity()
213:           {
214:               usb_disk_capacity();
0212  118A     BCF PCLATH, 0x3
0213  2727     CALL 0x727
0214  118A     BCF PCLATH, 0x3
215:               print_string_serial("Physical bytes: ");
0215  303A     MOVLW 0x3A
0216  118A     BCF PCLATH, 0x3
0217  21B5     CALL 0x1B5
0218  118A     BCF PCLATH, 0x3
216:               byte_to_hex(usb_drive_size3);
0219  0872     MOVF usb_drive_size3, W
021A  118A     BCF PCLATH, 0x3
021B  21EF     CALL 0x1EF
021C  118A     BCF PCLATH, 0x3
217:               uart_send(hex_char_high);
021D  0876     MOVF hex_char_high, W
021E  118A     BCF PCLATH, 0x3
021F  2566     CALL 0x566
0220  118A     BCF PCLATH, 0x3
218:               uart_send(hex_char_low);
0221  0875     MOVF hex_char_low, W
0222  118A     BCF PCLATH, 0x3
0223  2566     CALL 0x566
0224  118A     BCF PCLATH, 0x3
219:               byte_to_hex(usb_drive_size2);
0225  0873     MOVF usb_drive_size2, W
0226  118A     BCF PCLATH, 0x3
0227  21EF     CALL 0x1EF
0228  118A     BCF PCLATH, 0x3
220:               uart_send(hex_char_high);
0229  0876     MOVF hex_char_high, W
022A  118A     BCF PCLATH, 0x3
022B  2566     CALL 0x566
022C  118A     BCF PCLATH, 0x3
221:               uart_send(hex_char_low);
022D  0875     MOVF hex_char_low, W
022E  118A     BCF PCLATH, 0x3
022F  2566     CALL 0x566
0230  118A     BCF PCLATH, 0x3
222:               byte_to_hex(usb_drive_size1);
0231  0874     MOVF usb_drive_size1, W
0232  118A     BCF PCLATH, 0x3
0233  21EF     CALL 0x1EF
0234  118A     BCF PCLATH, 0x3
223:               uart_send(hex_char_high);
0235  0876     MOVF hex_char_high, W
0236  118A     BCF PCLATH, 0x3
0237  2566     CALL 0x566
0238  118A     BCF PCLATH, 0x3
224:               uart_send(hex_char_low);
0239  0875     MOVF hex_char_low, W
023A  118A     BCF PCLATH, 0x3
023B  2566     CALL 0x566
023C  118A     BCF PCLATH, 0x3
225:               uart_send('0');
023D  3030     MOVLW 0x30
023E  118A     BCF PCLATH, 0x3
023F  2566     CALL 0x566
0240  118A     BCF PCLATH, 0x3
226:               uart_send('0');
0241  3030     MOVLW 0x30
0242  118A     BCF PCLATH, 0x3
0243  2566     CALL 0x566
0244  118A     BCF PCLATH, 0x3
227:               uart_send('\n');
0245  300A     MOVLW 0xA
0246  118A     BCF PCLATH, 0x3
0247  2566     CALL 0x566
0248  118A     BCF PCLATH, 0x3
228:               return; 
229:           }
0249  0008     RETURN
230:           void print_query()
231:           {
232:               usb_disk_query();
02CE  118A     BCF PCLATH, 0x3
02CF  2749     CALL 0x749
02D0  118A     BCF PCLATH, 0x3
233:               print_string_serial("Logical bytes: ");
02D1  304B     MOVLW 0x4B
02D2  118A     BCF PCLATH, 0x3
02D3  21B5     CALL 0x1B5
02D4  118A     BCF PCLATH, 0x3
234:               byte_to_hex(usb_logical_bytes3);
02D5  082A     MOVF usb_logical_bytes3, W
02D6  118A     BCF PCLATH, 0x3
02D7  21EF     CALL 0x1EF
02D8  118A     BCF PCLATH, 0x3
235:               uart_send(hex_char_high);
02D9  0876     MOVF hex_char_high, W
02DA  118A     BCF PCLATH, 0x3
02DB  2566     CALL 0x566
02DC  118A     BCF PCLATH, 0x3
236:               uart_send(hex_char_low);
02DD  0875     MOVF hex_char_low, W
02DE  118A     BCF PCLATH, 0x3
02DF  2566     CALL 0x566
02E0  118A     BCF PCLATH, 0x3
237:               byte_to_hex(usb_logical_bytes2);
02E1  1283     BCF STATUS, 0x5
02E2  1303     BCF STATUS, 0x6
02E3  082B     MOVF usb_logical_bytes2, W
02E4  118A     BCF PCLATH, 0x3
02E5  21EF     CALL 0x1EF
02E6  118A     BCF PCLATH, 0x3
238:               uart_send(hex_char_high);
02E7  0876     MOVF hex_char_high, W
02E8  118A     BCF PCLATH, 0x3
02E9  2566     CALL 0x566
02EA  118A     BCF PCLATH, 0x3
239:               uart_send(hex_char_low);
02EB  0875     MOVF hex_char_low, W
02EC  118A     BCF PCLATH, 0x3
02ED  2566     CALL 0x566
02EE  118A     BCF PCLATH, 0x3
240:               byte_to_hex(usb_logical_bytes1);
02EF  1283     BCF STATUS, 0x5
02F0  1303     BCF STATUS, 0x6
02F1  082C     MOVF usb_logical_bytes1, W
02F2  118A     BCF PCLATH, 0x3
02F3  21EF     CALL 0x1EF
02F4  118A     BCF PCLATH, 0x3
241:               uart_send(hex_char_high);
02F5  0876     MOVF hex_char_high, W
02F6  118A     BCF PCLATH, 0x3
02F7  2566     CALL 0x566
02F8  118A     BCF PCLATH, 0x3
242:               uart_send(hex_char_low);
02F9  0875     MOVF hex_char_low, W
02FA  118A     BCF PCLATH, 0x3
02FB  2566     CALL 0x566
02FC  118A     BCF PCLATH, 0x3
243:               uart_send('0');
02FD  3030     MOVLW 0x30
02FE  118A     BCF PCLATH, 0x3
02FF  2566     CALL 0x566
0300  118A     BCF PCLATH, 0x3
244:               uart_send('0');
0301  3030     MOVLW 0x30
0302  118A     BCF PCLATH, 0x3
0303  2566     CALL 0x566
0304  118A     BCF PCLATH, 0x3
245:               uart_send('\n');
0305  300A     MOVLW 0xA
0306  118A     BCF PCLATH, 0x3
0307  2566     CALL 0x566
0308  118A     BCF PCLATH, 0x3
246:               print_string_serial("Free bytes: ");
0309  305B     MOVLW 0x5B
030A  118A     BCF PCLATH, 0x3
030B  21B5     CALL 0x1B5
030C  118A     BCF PCLATH, 0x3
247:               byte_to_hex(usb_free_space3);
030D  082D     MOVF usb_free_space3, W
030E  118A     BCF PCLATH, 0x3
030F  21EF     CALL 0x1EF
0310  118A     BCF PCLATH, 0x3
248:               uart_send(hex_char_high);
0311  0876     MOVF hex_char_high, W
0312  118A     BCF PCLATH, 0x3
0313  2566     CALL 0x566
0314  118A     BCF PCLATH, 0x3
249:               uart_send(hex_char_low);
0315  0875     MOVF hex_char_low, W
0316  118A     BCF PCLATH, 0x3
0317  2566     CALL 0x566
0318  118A     BCF PCLATH, 0x3
250:               byte_to_hex(usb_free_space2);
0319  1283     BCF STATUS, 0x5
031A  1303     BCF STATUS, 0x6
031B  082E     MOVF usb_free_space2, W
031C  118A     BCF PCLATH, 0x3
031D  21EF     CALL 0x1EF
031E  118A     BCF PCLATH, 0x3
251:               uart_send(hex_char_high);
031F  0876     MOVF hex_char_high, W
0320  118A     BCF PCLATH, 0x3
0321  2566     CALL 0x566
0322  118A     BCF PCLATH, 0x3
252:               uart_send(hex_char_low);
0323  0875     MOVF hex_char_low, W
0324  118A     BCF PCLATH, 0x3
0325  2566     CALL 0x566
0326  118A     BCF PCLATH, 0x3
253:               byte_to_hex(usb_free_space1);
0327  1283     BCF STATUS, 0x5
0328  1303     BCF STATUS, 0x6
0329  082F     MOVF usb_free_space1, W
032A  118A     BCF PCLATH, 0x3
032B  21EF     CALL 0x1EF
032C  118A     BCF PCLATH, 0x3
254:               uart_send(hex_char_high);
032D  0876     MOVF hex_char_high, W
032E  118A     BCF PCLATH, 0x3
032F  2566     CALL 0x566
0330  118A     BCF PCLATH, 0x3
255:               uart_send(hex_char_low);
0331  0875     MOVF hex_char_low, W
0332  118A     BCF PCLATH, 0x3
0333  2566     CALL 0x566
0334  118A     BCF PCLATH, 0x3
256:               uart_send('0');
0335  3030     MOVLW 0x30
0336  118A     BCF PCLATH, 0x3
0337  2566     CALL 0x566
0338  118A     BCF PCLATH, 0x3
257:               uart_send('0');
0339  3030     MOVLW 0x30
033A  118A     BCF PCLATH, 0x3
033B  2566     CALL 0x566
033C  118A     BCF PCLATH, 0x3
258:               uart_send('\n');
033D  300A     MOVLW 0xA
033E  118A     BCF PCLATH, 0x3
033F  2566     CALL 0x566
0340  118A     BCF PCLATH, 0x3
259:               return;
260:           }
0341  0008     RETURN
261:           
262:           void usb_autoconfig()
263:           {
264:               unsigned char temp;
265:               print_string_serial("USB Autoconfig:\n");
0342  3029     MOVLW 0x29
0343  118A     BCF PCLATH, 0x3
0344  21B5     CALL 0x1B5
0345  118A     BCF PCLATH, 0x3
266:               temp = usb_check_exists(0x55);
0346  3055     MOVLW 0x55
0347  118A     BCF PCLATH, 0x3
0348  26D9     CALL 0x6D9
0349  118A     BCF PCLATH, 0x3
034A  1283     BCF STATUS, 0x5
034B  1303     BCF STATUS, 0x6
034C  00C7     MOVWF 0x47
034D  0847     MOVF 0x47, W
034E  00C8     MOVWF temp
267:               byte_to_hex(temp);
034F  0848     MOVF temp, W
0350  118A     BCF PCLATH, 0x3
0351  21EF     CALL 0x1EF
0352  118A     BCF PCLATH, 0x3
268:               uart_send(hex_char_high);
0353  0876     MOVF hex_char_high, W
0354  118A     BCF PCLATH, 0x3
0355  2566     CALL 0x566
0356  118A     BCF PCLATH, 0x3
269:               uart_send(hex_char_low);
0357  0875     MOVF hex_char_low, W
0358  118A     BCF PCLATH, 0x3
0359  2566     CALL 0x566
035A  118A     BCF PCLATH, 0x3
270:               uart_send('\n');
035B  300A     MOVLW 0xA
035C  118A     BCF PCLATH, 0x3
035D  2566     CALL 0x566
035E  118A     BCF PCLATH, 0x3
271:             
272:               temp = usb_get_version();
035F  118A     BCF PCLATH, 0x3
0360  270F     CALL 0x70F
0361  118A     BCF PCLATH, 0x3
0362  1283     BCF STATUS, 0x5
0363  1303     BCF STATUS, 0x6
0364  00C7     MOVWF 0x47
0365  0847     MOVF 0x47, W
0366  00C8     MOVWF temp
273:               byte_to_hex(temp);
0367  0848     MOVF temp, W
0368  118A     BCF PCLATH, 0x3
0369  21EF     CALL 0x1EF
036A  118A     BCF PCLATH, 0x3
274:               print_string_serial("Version: ");
036B  307E     MOVLW 0x7E
036C  118A     BCF PCLATH, 0x3
036D  21B5     CALL 0x1B5
036E  118A     BCF PCLATH, 0x3
275:               uart_send(hex_char_high);
036F  0876     MOVF hex_char_high, W
0370  118A     BCF PCLATH, 0x3
0371  2566     CALL 0x566
0372  118A     BCF PCLATH, 0x3
276:               uart_send(hex_char_low);
0373  0875     MOVF hex_char_low, W
0374  118A     BCF PCLATH, 0x3
0375  2566     CALL 0x566
0376  118A     BCF PCLATH, 0x3
277:               uart_send('\n');
0377  300A     MOVLW 0xA
0378  118A     BCF PCLATH, 0x3
0379  2566     CALL 0x566
037A  118A     BCF PCLATH, 0x3
278:           
279:               usb_set_mode(0x05);
037B  3005     MOVLW 0x5
037C  118A     BCF PCLATH, 0x3
037D  2707     CALL 0x707
037E  118A     BCF PCLATH, 0x3
280:               delay_millis(1);
037F  3001     MOVLW 0x1
0380  118A     BCF PCLATH, 0x3
0381  2660     CALL 0x660
0382  118A     BCF PCLATH, 0x3
281:               usb_set_mode(0x07);
0383  3007     MOVLW 0x7
0384  118A     BCF PCLATH, 0x3
0385  2707     CALL 0x707
0386  118A     BCF PCLATH, 0x3
282:               delay_millis(1);
0387  3001     MOVLW 0x1
0388  118A     BCF PCLATH, 0x3
0389  2660     CALL 0x660
038A  118A     BCF PCLATH, 0x3
283:               usb_set_mode(0x06);
038B  3006     MOVLW 0x6
038C  118A     BCF PCLATH, 0x3
038D  2707     CALL 0x707
038E  118A     BCF PCLATH, 0x3
284:               delay_millis(1);
038F  3001     MOVLW 0x1
0390  118A     BCF PCLATH, 0x3
0391  2660     CALL 0x660
0392  118A     BCF PCLATH, 0x3
285:               usb_disk_connect();
0393  118A     BCF PCLATH, 0x3
0394  2702     CALL 0x702
0395  118A     BCF PCLATH, 0x3
286:               delay_millis(250);
0396  30FA     MOVLW 0xFA
0397  118A     BCF PCLATH, 0x3
0398  2660     CALL 0x660
0399  118A     BCF PCLATH, 0x3
287:               delay_millis(250);
039A  30FA     MOVLW 0xFA
039B  118A     BCF PCLATH, 0x3
039C  2660     CALL 0x660
039D  118A     BCF PCLATH, 0x3
288:               usb_disk_mount();
039E  118A     BCF PCLATH, 0x3
039F  26FD     CALL 0x6FD
03A0  118A     BCF PCLATH, 0x3
289:               delay_millis(250);
03A1  30FA     MOVLW 0xFA
03A2  118A     BCF PCLATH, 0x3
03A3  2660     CALL 0x660
03A4  118A     BCF PCLATH, 0x3
290:               delay_millis(250);
03A5  30FA     MOVLW 0xFA
03A6  118A     BCF PCLATH, 0x3
03A7  2660     CALL 0x660
03A8  118A     BCF PCLATH, 0x3
291:             
292:               temp = usb_get_status();
03A9  118A     BCF PCLATH, 0x3
03AA  26F6     CALL 0x6F6
03AB  118A     BCF PCLATH, 0x3
03AC  1283     BCF STATUS, 0x5
03AD  1303     BCF STATUS, 0x6
03AE  00C7     MOVWF 0x47
03AF  0847     MOVF 0x47, W
03B0  00C8     MOVWF temp
293:               byte_to_hex(temp);
03B1  0848     MOVF temp, W
03B2  118A     BCF PCLATH, 0x3
03B3  21EF     CALL 0x1EF
03B4  118A     BCF PCLATH, 0x3
294:               print_string_serial("Status: ");
03B5  3088     MOVLW 0x88
03B6  118A     BCF PCLATH, 0x3
03B7  21B5     CALL 0x1B5
03B8  118A     BCF PCLATH, 0x3
295:               uart_send(hex_char_high);
03B9  0876     MOVF hex_char_high, W
03BA  118A     BCF PCLATH, 0x3
03BB  2566     CALL 0x566
03BC  118A     BCF PCLATH, 0x3
296:               uart_send(hex_char_low);
03BD  0875     MOVF hex_char_low, W
03BE  118A     BCF PCLATH, 0x3
03BF  2566     CALL 0x566
03C0  118A     BCF PCLATH, 0x3
297:               uart_send('\n');
03C1  300A     MOVLW 0xA
03C2  118A     BCF PCLATH, 0x3
03C3  2566     CALL 0x566
03C4  118A     BCF PCLATH, 0x3
298:             
299:               print_query();
03C5  118A     BCF PCLATH, 0x3
03C6  22CE     CALL 0x2CE
300:               return;
301:           }
03C7  0008     RETURN
302:           
303:           void main(void)
304:           {
305:               unsigned char state = 0;
03C8  01CA     CLRF state
306:               initialize();
03C9  118A     BCF PCLATH, 0x3
03CA  24F9     CALL 0x4F9
03CB  118A     BCF PCLATH, 0x3
307:               //usb_reset_all();
308:               //delay_millis(100);
309:               //usb_autoconfig();
310:               //print_name();
311:           
312:               print_string_lcd("Dragons");
03CC  3091     MOVLW 0x91
03CD  118A     BCF PCLATH, 0x3
03CE  21D2     CALL 0x1D2
03CF  118A     BCF PCLATH, 0x3
313:               lcd_line2();
03D0  118A     BCF PCLATH, 0x3
03D1  25FF     CALL 0x5FF
03D2  118A     BCF PCLATH, 0x3
314:           
315:               print_string_serial("deadbeef\n");
03D3  3074     MOVLW 0x74
03D4  118A     BCF PCLATH, 0x3
03D5  21B5     CALL 0x1B5
03D6  118A     BCF PCLATH, 0x3
316:               
317:               unsigned char temp;
318:               while(1)
319:               {
320:                   temp = uart_read();
04DE  118A     BCF PCLATH, 0x3
04DF  2562     CALL 0x562
04E0  118A     BCF PCLATH, 0x3
04E1  1283     BCF STATUS, 0x5
04E2  1303     BCF STATUS, 0x6
04E3  00C9     MOVWF 0x49
04E4  0849     MOVF 0x49, W
04E5  00CB     MOVWF temp
321:                   
322:                   switch(state)
03D7  2CDE     GOTO 0x4DE
04E6  084A     MOVF state, W
323:                   {
324:                       case 0:
325:                           if(temp == 0xDE)
03D8  30DE     MOVLW 0xDE
03D9  064B     XORWF temp, W
03DA  1D03     BTFSS STATUS, 0x2
03DB  2CDE     GOTO 0x4DE
326:                               state = 1;
03DC  01CA     CLRF state
03DD  0ACA     INCF state, F
03DE  2CDE     GOTO 0x4DE
327:                           break;
328:                       case 1:
329:                           if(temp == 0xAD)
03DF  30AD     MOVLW 0xAD
03E0  064B     XORWF temp, W
03E1  1D03     BTFSS STATUS, 0x2
03E2  2BE5     GOTO 0x3E5
330:                               state = 2;
03E3  3002     MOVLW 0x2
03E4  2BF6     GOTO 0x3F6
331:                           else
332:                               state = 0;
03E5  01CA     CLRF state
03E6  2CDE     GOTO 0x4DE
333:                           break;
334:                       case 2:
335:                           if(temp == 0xBE)
03E7  30BE     MOVLW 0xBE
03E8  064B     XORWF temp, W
03E9  1D03     BTFSS STATUS, 0x2
03EA  2BE5     GOTO 0x3E5
336:                               state = 3;
03EB  3003     MOVLW 0x3
03EC  2BF6     GOTO 0x3F6
337:                           else
338:                               state = 0;
339:                           break;
340:                       case 3:
341:                           if(temp == 0xEF)
03ED  30EF     MOVLW 0xEF
03EE  064B     XORWF temp, W
03EF  1D03     BTFSS STATUS, 0x2
03F0  2BF5     GOTO 0x3F5
342:                               print_string_serial(str_cmd_mode);
03F1  3011     MOVLW 0x11
03F2  118A     BCF PCLATH, 0x3
03F3  21B5     CALL 0x1B5
03F4  118A     BCF PCLATH, 0x3
343:                           state = 4;
03F5  3004     MOVLW 0x4
03F6  00C9     MOVWF 0x49
03F7  0849     MOVF 0x49, W
03F8  00CA     MOVWF state
344:                           break;
03F9  2CDE     GOTO 0x4DE
345:                       case 4:
346:                           switch(temp)
0481  084B     MOVF temp, W
0482  3A00     XORLW 0x0
0483  1903     BTFSC STATUS, 0x2
0484  2BFA     GOTO 0x3FA
0485  3A01     XORLW 0x1
0486  1903     BTFSC STATUS, 0x2
0487  2BFE     GOTO 0x3FE
0488  3A03     XORLW 0x3
0489  1903     BTFSC STATUS, 0x2
048A  2C02     GOTO 0x402
048B  3A01     XORLW 0x1
048C  1903     BTFSC STATUS, 0x2
048D  2C06     GOTO 0x406
048E  3A07     XORLW 0x7
048F  1903     BTFSC STATUS, 0x2
0490  2C0B     GOTO 0x40B
0491  3A01     XORLW 0x1
0492  1903     BTFSC STATUS, 0x2
0493  2C10     GOTO 0x410
0494  3A03     XORLW 0x3
0495  1903     BTFSC STATUS, 0x2
0496  2C15     GOTO 0x415
0497  3A01     XORLW 0x1
0498  1903     BTFSC STATUS, 0x2
0499  2C19     GOTO 0x419
049A  3A0F     XORLW 0xF
049B  1903     BTFSC STATUS, 0x2
049C  2C1D     GOTO 0x41D
049D  3A01     XORLW 0x1
049E  1903     BTFSC STATUS, 0x2
049F  2C21     GOTO 0x421
04A0  3A03     XORLW 0x3
04A1  1903     BTFSC STATUS, 0x2
04A2  2C25     GOTO 0x425
04A3  3A01     XORLW 0x1
04A4  1903     BTFSC STATUS, 0x2
04A5  2C29     GOTO 0x429
04A6  3A07     XORLW 0x7
04A7  1903     BTFSC STATUS, 0x2
04A8  2C30     GOTO 0x430
04A9  3A01     XORLW 0x1
04AA  1903     BTFSC STATUS, 0x2
04AB  2C34     GOTO 0x434
04AC  3A03     XORLW 0x3
04AD  1903     BTFSC STATUS, 0x2
04AE  2C38     GOTO 0x438
04AF  3A01     XORLW 0x1
04B0  1903     BTFSC STATUS, 0x2
04B1  2C5E     GOTO 0x45E
04B2  3A1F     XORLW 0x1F
04B3  1903     BTFSC STATUS, 0x2
04B4  2C67     GOTO 0x467
04B5  3A30     XORLW 0x30
04B6  1903     BTFSC STATUS, 0x2
04B7  2C6B     GOTO 0x46B
04B8  3A01     XORLW 0x1
04B9  1903     BTFSC STATUS, 0x2
04BA  2C6F     GOTO 0x46F
04BB  3A03     XORLW 0x3
04BC  1903     BTFSC STATUS, 0x2
04BD  2C73     GOTO 0x473
04BE  3A01     XORLW 0x1
04BF  1903     BTFSC STATUS, 0x2
04C0  2C77     GOTO 0x477
04C1  3A07     XORLW 0x7
04C2  1903     BTFSC STATUS, 0x2
04C3  2C7B     GOTO 0x47B
04C4  2CC5     GOTO 0x4C5
347:                           {
348:                               case 0x00:
349:                                   usb_reset_all();
03FA  118A     BCF PCLATH, 0x3
03FB  2685     CALL 0x685
03FC  118A     BCF PCLATH, 0x3
350:                                   break;
03FD  2CC5     GOTO 0x4C5
351:                               case 0x01:
352:                                   usb_autoconfig();
03FE  118A     BCF PCLATH, 0x3
03FF  2342     CALL 0x342
0400  118A     BCF PCLATH, 0x3
353:                                   break;
0401  2CC5     GOTO 0x4C5
354:                               case 0x02:
355:                                   temp = usb_get_version();
0402  118A     BCF PCLATH, 0x3
0403  270F     CALL 0x70F
0404  118A     BCF PCLATH, 0x3
0405  2C61     GOTO 0x461
356:                                   break;
357:                               case 0x03:
358:                                   usb_set_mode(0x05);
0406  3005     MOVLW 0x5
0407  118A     BCF PCLATH, 0x3
0408  2707     CALL 0x707
0409  118A     BCF PCLATH, 0x3
359:                                   break;
040A  2CC5     GOTO 0x4C5
360:                               case 0x04:
361:                                   usb_set_mode(0x06);
040B  3006     MOVLW 0x6
040C  118A     BCF PCLATH, 0x3
040D  2707     CALL 0x707
040E  118A     BCF PCLATH, 0x3
362:                                   break;
040F  2CC5     GOTO 0x4C5
363:                               case 0x05:
364:                                   usb_set_mode(0x07);
0410  3007     MOVLW 0x7
0411  118A     BCF PCLATH, 0x3
0412  2707     CALL 0x707
0413  118A     BCF PCLATH, 0x3
365:                                   break;
0414  2CC5     GOTO 0x4C5
366:                               case 0x06:
367:                                   usb_disk_connect();
0415  118A     BCF PCLATH, 0x3
0416  2702     CALL 0x702
0417  118A     BCF PCLATH, 0x3
368:                                   break;
0418  2CC5     GOTO 0x4C5
369:                               case 0x07:
370:                                   usb_disk_mount();
0419  118A     BCF PCLATH, 0x3
041A  26FD     CALL 0x6FD
041B  118A     BCF PCLATH, 0x3
371:                                   break;
041C  2CC5     GOTO 0x4C5
372:                               case 0x08:
373:                                   temp = usb_get_status();
041D  118A     BCF PCLATH, 0x3
041E  26F6     CALL 0x6F6
041F  118A     BCF PCLATH, 0x3
0420  2C61     GOTO 0x461
374:                                   break;
375:                               case 0x09:
376:                                   print_query();
0421  118A     BCF PCLATH, 0x3
0422  22CE     CALL 0x2CE
0423  118A     BCF PCLATH, 0x3
377:                                   break;
0424  2CC5     GOTO 0x4C5
378:                               case 0x0A:
379:                                   print_capacity();
0425  118A     BCF PCLATH, 0x3
0426  2212     CALL 0x212
0427  118A     BCF PCLATH, 0x3
380:                                   break;
0428  2CC5     GOTO 0x4C5
381:                               case 0x0B:
382:                                   usb_set_file_name();
0429  118A     BCF PCLATH, 0x3
042A  268A     CALL 0x68A
042B  118A     BCF PCLATH, 0x3
383:                                   print_name();
042C  118A     BCF PCLATH, 0x3
042D  2630     CALL 0x630
042E  118A     BCF PCLATH, 0x3
384:                                   break;
042F  2CC5     GOTO 0x4C5
385:                               case 0x0C:
386:                                   usb_file_open();
0430  118A     BCF PCLATH, 0x3
0431  269D     CALL 0x69D
0432  118A     BCF PCLATH, 0x3
387:                                   break;
0433  2CC5     GOTO 0x4C5
388:                               case 0x0D:
389:                                   usb_file_close();
0434  118A     BCF PCLATH, 0x3
0435  26A2     CALL 0x6A2
0436  118A     BCF PCLATH, 0x3
390:                                   break;
0437  2CC5     GOTO 0x4C5
391:                               case 0x0E:
392:                                   usb_get_file_size();
0438  118A     BCF PCLATH, 0x3
0439  26C8     CALL 0x6C8
043A  118A     BCF PCLATH, 0x3
393:                                   print_string_serial("File size: ");
043B  3068     MOVLW 0x68
043C  118A     BCF PCLATH, 0x3
043D  21B5     CALL 0x1B5
043E  118A     BCF PCLATH, 0x3
394:                                   byte_to_hex(usb_file_size_high);
043F  0833     MOVF usb_file_size_high, W
0440  118A     BCF PCLATH, 0x3
0441  21EF     CALL 0x1EF
0442  118A     BCF PCLATH, 0x3
395:                                   uart_send(hex_char_high);
0443  0876     MOVF hex_char_high, W
0444  118A     BCF PCLATH, 0x3
0445  2566     CALL 0x566
0446  118A     BCF PCLATH, 0x3
396:                                   uart_send(hex_char_low);
0447  0875     MOVF hex_char_low, W
0448  118A     BCF PCLATH, 0x3
0449  2566     CALL 0x566
044A  118A     BCF PCLATH, 0x3
397:                                   byte_to_hex(usb_file_size_low);
044B  1283     BCF STATUS, 0x5
044C  1303     BCF STATUS, 0x6
044D  0832     MOVF usb_file_size_low, W
044E  118A     BCF PCLATH, 0x3
044F  21EF     CALL 0x1EF
0450  118A     BCF PCLATH, 0x3
398:                                   uart_send(hex_char_high);
0451  0876     MOVF hex_char_high, W
0452  118A     BCF PCLATH, 0x3
0453  2566     CALL 0x566
0454  118A     BCF PCLATH, 0x3
399:                                   uart_send(hex_char_low);
0455  0875     MOVF hex_char_low, W
0456  118A     BCF PCLATH, 0x3
0457  2566     CALL 0x566
0458  118A     BCF PCLATH, 0x3
400:                                   uart_send('\n');
0459  300A     MOVLW 0xA
045A  118A     BCF PCLATH, 0x3
045B  2566     CALL 0x566
045C  118A     BCF PCLATH, 0x3
401:                                   break;
045D  2CC5     GOTO 0x4C5
402:                               case 0x0F:
403:                                   temp = usb_file_read();
045E  118A     BCF PCLATH, 0x3
045F  277A     CALL 0x77A
0460  118A     BCF PCLATH, 0x3
0461  1283     BCF STATUS, 0x5
0462  1303     BCF STATUS, 0x6
0463  00C9     MOVWF 0x49
0464  0849     MOVF 0x49, W
0465  00CB     MOVWF temp
404:                                   break;
0466  2CC5     GOTO 0x4C5
405:                               case 0x10:
406:                                   usb_file_create();
0467  118A     BCF PCLATH, 0x3
0468  26E3     CALL 0x6E3
0469  118A     BCF PCLATH, 0x3
407:                                   break;
046A  2CC5     GOTO 0x4C5
408:                               /*case 0x11:
409:                                   usb_file_write();
410:                                   break;
411:                               case 0x12:
412:                                   usb_write_test_data();
413:                                   break;*/
414:                               case 0x20:
415:                                   mem_clear();
046B  118A     BCF PCLATH, 0x3
046C  2533     CALL 0x533
046D  118A     BCF PCLATH, 0x3
416:                                   break;
046E  2CC5     GOTO 0x4C5
417:                               case 0x21:
418:                                   mem_dump();
046F  118A     BCF PCLATH, 0x3
0470  2541     CALL 0x541
0471  118A     BCF PCLATH, 0x3
419:                                   break;
0472  2CC5     GOTO 0x4C5
420:                               case 0x22:
421:                                   file_dump();
0473  118A     BCF PCLATH, 0x3
0474  254F     CALL 0x54F
0475  118A     BCF PCLATH, 0x3
422:                                   break;
0476  2CC5     GOTO 0x4C5
423:                               case 0x23:
424:                                   print_test_data();
0477  118A     BCF PCLATH, 0x3
0478  266C     CALL 0x66C
0479  118A     BCF PCLATH, 0x3
425:                                   break;
047A  2CC5     GOTO 0x4C5
426:                               case 0x24:
427:                                   usb_file_size_low = 16;
047B  3010     MOVLW 0x10
047C  00C9     MOVWF 0x49
047D  0849     MOVF 0x49, W
047E  00B2     MOVWF usb_file_size_low
428:                                   usb_file_size_high = 0;
047F  01B3     CLRF usb_file_size_high
0480  2C73     GOTO 0x473
429:                                   file_dump();
430:                           }
431:                           byte_to_hex(temp);
04C5  1283     BCF STATUS, 0x5
04C6  1303     BCF STATUS, 0x6
04C7  084B     MOVF temp, W
04C8  118A     BCF PCLATH, 0x3
04C9  21EF     CALL 0x1EF
04CA  118A     BCF PCLATH, 0x3
432:                           uart_send(hex_char_high);
04CB  0876     MOVF hex_char_high, W
04CC  118A     BCF PCLATH, 0x3
04CD  2566     CALL 0x566
04CE  118A     BCF PCLATH, 0x3
433:                           uart_send(hex_char_low);
04CF  0875     MOVF hex_char_low, W
04D0  118A     BCF PCLATH, 0x3
04D1  2566     CALL 0x566
04D2  118A     BCF PCLATH, 0x3
434:                           lcd_clear2();
04D3  118A     BCF PCLATH, 0x3
04D4  2618     CALL 0x618
04D5  118A     BCF PCLATH, 0x3
435:                           lcd_putc(hex_char_high);
04D6  0876     MOVF hex_char_high, W
04D7  118A     BCF PCLATH, 0x3
04D8  25CC     CALL 0x5CC
04D9  118A     BCF PCLATH, 0x3
436:                           lcd_putc(hex_char_low);
04DA  0875     MOVF hex_char_low, W
04DB  118A     BCF PCLATH, 0x3
04DC  25CC     CALL 0x5CC
04DD  118A     BCF PCLATH, 0x3
04DE  118A     BCF PCLATH, 0x3
04DF  2562     CALL 0x562
04E0  118A     BCF PCLATH, 0x3
04E1  1283     BCF STATUS, 0x5
04E2  1303     BCF STATUS, 0x6
04E3  00C9     MOVWF 0x49
04E4  0849     MOVF 0x49, W
04E5  00CB     MOVWF temp
04E6  084A     MOVF state, W
04E7  3A00     XORLW 0x0
04E8  1903     BTFSC STATUS, 0x2
04E9  2BD8     GOTO 0x3D8
04EA  3A01     XORLW 0x1
04EB  1903     BTFSC STATUS, 0x2
04EC  2BDF     GOTO 0x3DF
04ED  3A03     XORLW 0x3
04EE  1903     BTFSC STATUS, 0x2
04EF  2BE7     GOTO 0x3E7
04F0  3A01     XORLW 0x1
04F1  1903     BTFSC STATUS, 0x2
04F2  2BED     GOTO 0x3ED
04F3  3A07     XORLW 0x7
04F4  1903     BTFSC STATUS, 0x2
04F5  2C81     GOTO 0x481
04F6  2CDE     GOTO 0x4DE
04F7  118A     BCF PCLATH, 0x3
04F8  2800     GOTO 0x0
437:                           break;
438:                   }
439:               }
440:               return;
441:           }
---  /home/dragomir/repos/MC-10_Tape_Emulator/MC10_Tape_Drive_C.X/core.asm  -----------------------------
                                                  1:     #include <xc.inc>
                                                  2:     #define IRP 7
                                                  3:         
                                                  4:     #define DISP_E PORTA, 2
                                                  5:     #define DISP_RS PORTA, 3
                                                  6:     #define USB_INT PORTB, 0
                                                  7:     #define TAPE_IN PORTB, 1
                                                  8:     #define TAPE_OUT PORTB, 2
                                                  9:     #define SW0 PORTB, 3
                                                  10:    #define SW1 PORTB, 4
                                                  11:    #define SW2 PORTB, 5
                                                  12:    #define SW3 PORTB, 6
                                                  13:    #define RAM_CS PORTB, 7
                                                  14:    #define USB_CS PORTD, 2
                                                  15:    #define USB_RST PORTD, 3
                                                  16:    #define DISP_CLK PORTD, 6
                                                  17:    #define DISP_DATA PORTD, 7
                                                  18:        
                                                  19:    #define F_SRL_VALID _flag_reg, 0
                                                  20:    #define F_BB_FIRST _flag_reg, 1
                                                  21:    #define F_TIMEOUT _flag_reg, 2
                                                  22:    #define F_SPACE_OK _flag_reg, 3
                                                  23:        
                                                  24:    ;PIN USAGE:
                                                  25:    ; PORTA,0 UNUSED OUTPUT
                                                  26:    ; PORTA,1 UNUSED OUTPUT
                                                  27:    ; PORTA,2 DISPLAY CE OUTPUT
                                                  28:    ; PORTA,3 DISPLAY RS OUTPUT
                                                  29:    ; PORTA,4 UNUSED (OPEN DRAIN) OUTPUT
                                                  30:    ; PORTA,5 UNUSED OUTPUT
                                                  31:    ; PORTA,6 CLOCK INPUT
                                                  32:    ; PORTA,7 CLOCK INPUT
                                                  33:    ; PORTB,0 CH376S INTERRUPT INPUT
                                                  34:    ; PORTB,1 TAPE INPUT
                                                  35:    ; PORTB,2 TAPE OUTPUT
                                                  36:    ; PORTB,3 BUTTON 1 INPUT
                                                  37:    ; PORTB,4 BUTTON 2 INPUT
                                                  38:    ; PORTB,5 BUTTON 3 INPUT
                                                  39:    ; PORTB,6 BUTTON 4 INPUT    ICSP CLOCK
                                                  40:    ; PORTB,7 RAM CE OUTPUT     ICSP DATA
                                                  41:    ; PORTC,0 UNUSED OUTPUT
                                                  42:    ; PORTC,1 UNUSED OUTPUT
                                                  43:    ; PORTC,2 UNUSED OUTPUT
                                                  44:    ; PORTC,3 SCK (HARDWARE SPI) OUTPUT
                                                  45:    ; PORTC,4 SDI (HARDWARE SPI) INPUT
                                                  46:    ; PORTC,5 SDO (HARDWARE SPI) OUTPUT
                                                  47:    ; PORTC,6 TXD (HARDWARE UART) INPUT (MUST BE CONFIGURED AS INPUT FOR UART MODULE TO WORK. THIS IS ACTUALLY AN OUTPUT)
                                                  48:    ; PORTC,7 RXD (HARDWARE UART) INPUT
                                                  49:    ; PORTD,0 UNUSED OUTPUT
                                                  50:    ; PORTD,1 UNUSED OUTPUT
                                                  51:    ; PORTD,2 CH376S CE OUTPUT
                                                  52:    ; PORTD,3 CH376S RESET OUTPUT
                                                  53:    ; PORTD,4 TEST OUTPUT
                                                  54:    ; PORTD,5 UNUSED OUTPUT
                                                  55:    ; PORTD,6 DISPLAY CLOCK OUTPUT
                                                  56:    ; PORTD,7 DISPLAY DATA OUTPUT
                                                  57:    ; PORTE,0 UNUSED OUTPUT
                                                  58:    ; PORTE,1 UNUSED OUTPUT
                                                  59:    ; PORTE,2 UNUSED OUTPUT
                                                  60:        
                                                  61:    ;FLAG REG USAGE:
                                                  62:    ;BIT0 SET IF S_REG_LOW CONTAINS VALID DATA
                                                  63:    ;BIT1 SET IF BUILD_BYTE IS WAITING FOR THE FIRST BYTE OF A TRANSMISSION (PREVENTS RESET IF TRANSMISSION FAILS)
                                                  64:    ;BIT2 SET IF TIMEOUT OCCURED WHILE WAITING FOR USB STATUS
                                                  65:    ;BIT3 SET IF FREE SPACE EXCEEDS TAPE SIZE
                                                  66:    ;BIT4 SET IF FREE SPCAE EXCEEDS 0x20000
                                                  67:    ;BIT5 UNUSED
                                                  68:    ;BIT6 UNUSED
                                                  69:    ;BIT7 UNUSED
                                                  70:    
                                                  71:    ; When assembly code is placed in a psect, it can be manipulated as a
                                                  72:    ; whole by the linker and placed in memory.  
                                                  73:    ;
                                                  74:    ; In this example, barfunc is the program section (psect) name, 'local' means
                                                  75:    ; that the section will not be combined with other sections even if they have
                                                  76:    ; the same name.  class=CODE means the barfunc must go in the CODE container.
                                                  77:    ; PIC18s should have a delta (addressible unit size) of 1 (default) since they
                                                  78:    ; are byte addressible.  PIC10/12/16s have a delta of 2 since they are word
                                                  79:    ; addressible.  PIC18s should have a reloc (alignment) flag of 2 for any
                                                  80:    ; psect which contains executable code.  PIC10/12/16s can use the default
                                                  81:    ; reloc value of 1.  Use one of the psects below for the device you use:
                                                  82:    
                                                  83:    psect   barfunc,local,class=CODE,delta=2 ; PIC10/12/16
                                                  84:    ; psect   barfunc,local,class=CODE,reloc=2 ; PIC18
                                                  85:        
                                                  86:    global _temp3
                                                  87:    global _temp4
                                                  88:    global _temp5
                                                  89:    global _ram_address_h
                                                  90:    global _ram_address_l
                                                  91:    global _sdel_count
                                                  92:    global _ldel_count
                                                  93:    global _gen_count
                                                  94:    global _gen_count2
                                                  95:    global _gen_count3
                                                  96:    global _gen_count4
                                                  97:    global _tape_size_high
                                                  98:    global _tape_size_low
                                                  99:    global _hex_char_high
                                                  100:   global _hex_char_low
                                                  101:   global _usb_file_size_high
                                                  102:   global _usb_file_size_low
                                                  103:   global _usb_bytes_read_high
                                                  104:   global _usb_bytes_read_low
                                                  105:   global _usb_drive_size1
                                                  106:   global _usb_drive_size2
                                                  107:   global _usb_drive_size3
                                                  108:   global _usb_free_space1
                                                  109:   global _usb_free_space2
                                                  110:   global _usb_free_space3
                                                  111:   global _usb_logical_bytes1
                                                  112:   global _usb_logical_bytes2
                                                  113:   global _usb_logical_bytes3
                                                  114:   global _usb_target_status
                                                  115:   global _s_reg_high
                                                  116:   global _s_reg_low
                                                  117:   global _timeout_high
                                                  118:   global _timeout_low
                                                  119:   global _delay_counter
                                                  120:   global _flag_reg
                                                  121:   global _fifo_read_idx
                                                  122:   global _fifo_read_bank
                                                  123:   global _fifo_write_idx
                                                  124:   global _fifo_write_bank
                                                  125:   global _fifo_num_bytes
                                                  126:   
                                                  127:   global _tape_name
                                                  128:   
                                                  129:   
                                                  130:   ;extern entry__byte_to_hex
                                                  131:   global _byte_to_hex
                                                  132:   global _fifo_push
                                                  133:   global _fifo_pop
                                                  134:   
                                                  135:    
                                                  136:   global _initialize
                                                  137:   _initialize
04F9  1303     BCF STATUS, 0x6                    138:       BANKSEL PORTA
04FB  0185     CLRF PORTA                         139:       CLRF PORTA
04FC  0186     CLRF PORTB                         140:       CLRF PORTB
04FD  0187     CLRF PORTC                         141:       CLRF PORTC
04FE  0188     CLRF PORTD                         142:       CLRF PORTD
04FF  0986     COMF PORTB, F                      143:       COMF PORTB, F
0500  0987     COMF PORTC, F                      144:       COMF PORTC, F
0501  0988     COMF PORTD, F                      145:       COMF PORTD, F
0502  1303     BCF STATUS, 0x6                    146:       BANKSEL TRISA  ;SWITCH TO BANK 1
0504  30C0     MOVLW 0xC0                         147:       MOVLW 0b11000000
0505  0085     MOVWF PORTA                        148:       MOVWF TRISA	;CONFIGURE PORTA
0506  307B     MOVLW 0x7B                         149:       MOVLW 0b01111011
0507  0086     MOVWF PORTB                        150:       MOVWF TRISB ;CONFIGURE PORTB
0508  30D0     MOVLW 0xD0                         151:       MOVLW 0b11010000
0509  0087     MOVWF PORTC                        152:       MOVWF TRISC ;CONFIGURE PORTC
050A  3000     MOVLW 0x0                          153:       MOVLW 0b00000000
050B  0088     MOVWF PORTD                        154:       MOVWF TRISD	;CONFIGURE PORTD
050C  30F8     MOVLW 0xF8                         155:       MOVLW 0b11111000
050D  0089     MOVWF PORTE                        156:       MOVWF TRISE	;CONFIGURE PORTE
050E  3000     MOVLW 0x0                          157:       MOVLW 0b00000000	    ;SMP=0, CKE=0, DA=0, P=0, S=0, RW=0, UA=0, BF=0
050F  0094     MOVWF SSPCON                       158:       MOVWF SSPSTAT ;CONFIGURE SPI
0510  300F     MOVLW 0xF                          159:       MOVLW 0b00001111	    ;PCFG=1111
0511  009F     MOVWF ADCON0                       160:       MOVWF ADCON1 ;DISABLE ANALOG INPUTS
0512  3026     MOVLW 0x26                         161:       MOVLW 0b00100110	;CSRC=0, TX9=0, TXEN=1, SYNC=0, UNIMPLEMENTED=0, BRGH=1, TRMT=1, TX9D=0
0513  0098     MOVWF RCSTA                        162:       MOVWF TXSTA ;CONFIGURE UART
0514  3019     MOVLW 0x19                         163:       MOVLW 25
0515  0099     MOVWF TXREG                        164:       MOVWF SPBRG ;CONFIGURE BAUD RATE
0516  30D8     MOVLW 0xD8                         165:       MOVLW 0b11011000	;RBPU = 1, INTEDG = 1, T0CS = 0, T0SE = 1, PSA = 1, PS2 = 0, PS1 = 0, PS0 = 0
0517  0081     MOVWF TMR0                         166:       MOVWF OPTION_REG	;CONFIGURE TIMER
0518  1303     BCF STATUS, 0x6                    167:       BANKSEL SSPCON
051A  3030     MOVLW 0x30                         168:       MOVLW 0b00110000	;WCOL=0, SSPOV=0, SSPEN=1, CKP=1, SSPM=0000
051B  0094     MOVWF SSPCON                       169:       MOVWF SSPCON ;CONFIGURE SPI
051C  3090     MOVLW 0x90                         170:       MOVLW 0b10010000	;SPEN=1, RX9=0,SREN=0, CREN=1, ADDEN=0, FERR=0, OERR=0, RX9D=0
051D  0098     MOVWF RCSTA                        171:       MOVWF RCSTA ;CONFIGURE UART
051E  3020     MOVLW 0x20                         172:       MOVLW 0b00100000
051F  008B     MOVWF INTCON                       173:       MOVWF INTCON    ;ENABLE TIMER 0 INTERRUPT
0520  01A3     CLRF 0x23                          174:       CLRF _flag_reg
0521  01A8     CLRF 0x28                          175:       CLRF _s_reg_high
0522  01A7     CLRF 0x27                          176:       CLRF _s_reg_low
0523  1188     BCF PORTD, 0x3                     177:       BCF USB_RST
0524  3032     MOVLW 0x32                         178:       MOVLW 50
0525  2660     CALL 0x660                         179:       CALL _delay_millis   ;100 MS DELAY AT STARTUP
0526  27AC     CALL 0x7AC                         180:       CALL _fifo_init
0527  25B8     CALL 0x5B8                         181:       CALL RAM_CONFIG
0528  01BD     CLRF 0x3D                          182:       CLRF _ram_address_h
0529  01BC     CLRF 0x3C                          183:       CLRF _ram_address_l
052A  3055     MOVLW 0x55                         184:       MOVLW 0x55
052B  2593     CALL 0x593                         185:       CALL RAM_WRITE
052C  30AA     MOVLW 0xAA                         186:       MOVLW 0xAA
052D  2590     CALL 0x590                         187:       CALL RAM_WRITE_AUTO
                                                  188:       ;CALL _mem_clear
052E  25E1     CALL 0x5E1                         189:       CALL FUNCTIONSET_LCD    ;INITIALIZE DISPLAY
052F  25EA     CALL 0x5EA                         190:       CALL DISPLAYON  ;POWER ON THE DISPLAY
0530  25F1     CALL 0x5F1                         191:       CALL CLEARDISPLAY	;CLEAR THE DISPLAY
0531  25F8     CALL 0x5F8                         192:       CALL SETHOME_LCD	;SET CURSOR TO THE START OF LINE 1
0532  0008     RETURN                             193:       RETURN
                                                  194:   
                                                  195:   global _mem_clear
                                                  196:   _mem_clear
0533  30FF     MOVLW 0xFF                         197:       MOVLW 0xFF
0534  00BC     MOVWF 0x3C                         198:       MOVWF _ram_address_l
0535  00BD     MOVWF 0x3D                         199:       MOVWF _ram_address_h
                                                  200:   MEM_CLEAR_LOOP
                                                  201:       ;BSF PORTD, 4
0536  30FF     MOVLW 0xFF                         202:       MOVLW 0xFF
0537  2590     CALL 0x590                         203:       CALL RAM_WRITE_AUTO
                                                  204:       ;BCF PORTD, 4    ;PORTD 4 IS A DEBUG OUTPUT TO MEASURE THE DURATION OF RAM_WRITE
0538  083C     MOVF 0x3C, W                       205:       MOVF _ram_address_l, W
0539  3AFF     XORLW 0xFF                         206:       XORLW 0xFF
053A  1D03     BTFSS STATUS, 0x2                  207:       BTFSS ZERO
053B  2D36     GOTO 0x536                         208:       GOTO MEM_CLEAR_LOOP
053C  083D     MOVF 0x3D, W                       209:       MOVF _ram_address_h, W
053D  3AFF     XORLW 0xFF                         210:       XORLW 0xFF
053E  1D03     BTFSS STATUS, 0x2                  211:       BTFSS ZERO
053F  2D36     GOTO 0x536                         212:       GOTO MEM_CLEAR_LOOP
0540  0008     RETURN                             213:       RETURN
                                                  214:   
                                                  215:   global _mem_dump
                                                  216:   _mem_dump
0541  30FF     MOVLW 0xFF                         217:       MOVLW 0xFF
0542  00BC     MOVWF 0x3C                         218:       MOVWF _ram_address_l
0543  00BD     MOVWF 0x3D                         219:       MOVWF _ram_address_h
                                                  220:   MEM_DUMP_LOOP
0544  256A     CALL 0x56A                         221:       CALL RAM_READ_AUTO
0545  2566     CALL 0x566                         222:       CALL _uart_send
0546  083C     MOVF 0x3C, W                       223:       MOVF _ram_address_l, W
0547  3AFF     XORLW 0xFF                         224:       XORLW 0xFF
0548  1D03     BTFSS STATUS, 0x2                  225:       BTFSS ZERO
0549  2D44     GOTO 0x544                         226:       GOTO MEM_DUMP_LOOP
054A  083D     MOVF 0x3D, W                       227:       MOVF _ram_address_h, W
054B  3AFF     XORLW 0xFF                         228:       XORLW 0xFF
054C  1D03     BTFSS STATUS, 0x2                  229:       BTFSS ZERO
054D  2D44     GOTO 0x544                         230:       GOTO MEM_DUMP_LOOP
054E  0008     RETURN                             231:       RETURN
                                                  232:   
                                                  233:   global _file_dump
                                                  234:   _file_dump
054F  0833     MOVF 0x33, W                       235:       MOVF _usb_file_size_high, W
0550  0432     IORWF 0x32, W                      236:       IORWF _usb_file_size_low, W
0551  1903     BTFSC STATUS, 0x2                  237:       BTFSC ZERO
0552  0008     RETURN                             238:       RETURN
0553  0833     MOVF 0x33, W                       239:       MOVF _usb_file_size_high, W
0554  00B9     MOVWF 0x39                         240:       MOVWF _gen_count
0555  0832     MOVF 0x32, W                       241:       MOVF _usb_file_size_low, W
0556  00B8     MOVWF 0x38                         242:       MOVWF _gen_count2
0557  30FF     MOVLW 0xFF                         243:       MOVLW 0xFF
0558  00BC     MOVWF 0x3C                         244:       MOVWF _ram_address_l
0559  00BD     MOVWF 0x3D                         245:       MOVWF _ram_address_h
055A  0AB9     INCF 0x39, F                       246:       INCF _gen_count, F
                                                  247:   FD_INNER
055B  256A     CALL 0x56A                         248:       CALL RAM_READ_AUTO
055C  2566     CALL 0x566                         249:       CALL _uart_send
055D  0BB8     DECFSZ 0x38, F                     250:       DECFSZ _gen_count2, F
055E  2D5B     GOTO 0x55B                         251:       GOTO FD_INNER
055F  0BB9     DECFSZ 0x39, F                     252:       DECFSZ _gen_count, F
0560  2D5B     GOTO 0x55B                         253:       GOTO FD_INNER
0561  0008     RETURN                             254:       RETURN
                                                  255:   
                                                  256:   global _uart_read
                                                  257:   _uart_read
0562  1E8C     BTFSS PIR1, 0x5                    258:       BTFSS RCIF    ;CHECK IF UART RECEIVE BUFFER IS FULL
0563  2D62     GOTO 0x562                         259:       GOTO _uart_read  ;IF NOT WAIT UNTIL ITS FULL
0564  081A     MOVF RCREG, W                      260:       MOVF RCREG, W   ;COPY DATA TO W
0565  0008     RETURN                             261:       RETURN
                                                  262:   
                                                  263:   global _uart_send
                                                  264:   _uart_send
0566  1E0C     BTFSS PIR1, 0x4                    265:       BTFSS TXIF    ;CHECK IF UART TRANSMIT BUFFER IS EMPTY
0567  2D66     GOTO 0x566                         266:       GOTO _uart_send  ;IF NOT WAIT UNTIL IT IS
0568  0099     MOVWF TXREG                        267:       MOVWF TXREG	    ;COPY DATA TO TXREG
0569  0008     RETURN                             268:       RETURN
                                                  269:   
                                                  270:   RAM_READ_AUTO
056A  0FBC     INCFSZ 0x3C, F                     271:       INCFSZ _ram_address_l, F    ;INCREMENT LOW ADDRESS
056B  03BD     DECF 0x3D, F                       272:       DECF _ram_address_h, F
056C  0ABD     INCF 0x3D, F                       273:       INCF _ram_address_h, F	;IF LOW ADDRESS IS ZERO INCREMENT THE HIGH ADDRESS TOO
                                                  274:   RAM_READ
056D  1386     BCF PORTB, 0x7                     275:       BCF RAM_CS    ;CHIP ENABLE
056E  3003     MOVLW 0x3                          276:       MOVLW 0x03	;PUT WRITE COMMAND IN W
056F  0093     MOVWF SSPBUF                       277:       MOVWF SSPBUF    ;SEND COMMAND
0570  083D     MOVF 0x3D, W                       278:       MOVF _ram_address_h, W   ;COPY ADDRESS TO W
0571  1303     BCF STATUS, 0x6                    279:       BANKSEL SSPSTAT
                                                  280:   RAM_WAIT_AH
0573  1C14     BTFSS SSPCON, 0x0                  281:       BTFSS BF	;IS THE TRANSMISSION READY
0574  2D73     GOTO 0x573                         282:       GOTO RAM_WAIT_AH	;IF NOT WAIT UNTIL IT IS
0575  1303     BCF STATUS, 0x6                    283:       BANKSEL SSPBUF
0577  0093     MOVWF SSPBUF                       284:       MOVWF SSPBUF    ;SEND ADDRESS HIGH BYTE
0578  083C     MOVF 0x3C, W                       285:       MOVF _ram_address_l, W   ;COPY ADDRESS TO W
0579  1303     BCF STATUS, 0x6                    286:       BANKSEL SSPSTAT
                                                  287:   RAM_WAIT_AL
057B  1C14     BTFSS SSPCON, 0x0                  288:       BTFSS BF
057C  2D7B     GOTO 0x57B                         289:       GOTO RAM_WAIT_AL
057D  1303     BCF STATUS, 0x6                    290:       BANKSEL SSPBUF
057F  0093     MOVWF SSPBUF                       291:       MOVWF SSPBUF    ;SEND ADDRESS LOW BYTE
0580  1303     BCF STATUS, 0x6                    292:       BANKSEL SSPSTAT
                                                  293:   RAM_WAIT_D
0582  1C14     BTFSS SSPCON, 0x0                  294:       BTFSS BF
0583  2D82     GOTO 0x582                         295:       GOTO RAM_WAIT_D
0584  1303     BCF STATUS, 0x6                    296:       BANKSEL SSPBUF
0586  0193     CLRF SSPBUF                        297:       CLRF SSPBUF
0587  1303     BCF STATUS, 0x6                    298:       BANKSEL SSPSTAT
                                                  299:   RAM_WAIT_R
0589  1C14     BTFSS SSPCON, 0x0                  300:       BTFSS BF
058A  2D89     GOTO 0x589                         301:       GOTO RAM_WAIT_R
058B  1303     BCF STATUS, 0x6                    302:       BANKSEL SSPBUF
058D  0813     MOVF SSPBUF, W                     303:       MOVF SSPBUF, W  ;COPY DATA TO W
058E  1786     BSF PORTB, 0x7                     304:       BSF RAM_CS
058F  0008     RETURN                             305:       RETURN
                                                  306:   
                                                  307:   RAM_WRITE_AUTO
0590  0FBC     INCFSZ 0x3C, F                     308:       INCFSZ _ram_address_l, F    ;INCREMENT LOW ADDRESS
0591  03BD     DECF 0x3D, F                       309:       DECF _ram_address_h, F
0592  0ABD     INCF 0x3D, F                       310:       INCF _ram_address_h, F	;IF LOW ADDRESS IS ZERO INCREMENT THE HIGH ADDRESS TOO
                                                  311:   RAM_WRITE
0593  00BE     MOVWF 0x3E                         312:       MOVWF _temp5
0594  1386     BCF PORTB, 0x7                     313:       BCF RAM_CS    ;CHIP ENABLE
0595  3002     MOVLW 0x2                          314:       MOVLW 0x02	;PUT WRITE COMMAND IN W
0596  0093     MOVWF SSPBUF                       315:       MOVWF SSPBUF    ;SEND COMMAND
0597  083D     MOVF 0x3D, W                       316:       MOVF _ram_address_h, W   ;COPY ADDRESS TO W
0598  1303     BCF STATUS, 0x6                    317:       BANKSEL SSPSTAT
                                                  318:   RAM_WRITE_AH
059A  1C14     BTFSS SSPCON, 0x0                  319:       BTFSS BF	;IS THE TRANSMISSION READY
059B  2D9A     GOTO 0x59A                         320:       GOTO RAM_WRITE_AH	;IF NOT WAIT UNTIL IT IS
059C  1303     BCF STATUS, 0x6                    321:       BANKSEL SSPBUF
059E  0093     MOVWF SSPBUF                       322:       MOVWF SSPBUF    ;SEND ADDRESS HIGH BYTE
059F  083C     MOVF 0x3C, W                       323:       MOVF _ram_address_l, W   ;COPY ADDRESS TO W
05A0  1303     BCF STATUS, 0x6                    324:       BANKSEL SSPSTAT
                                                  325:   RAM_WRITE_AL
05A2  1C14     BTFSS SSPCON, 0x0                  326:       BTFSS BF
05A3  2DA2     GOTO 0x5A2                         327:       GOTO RAM_WRITE_AL
05A4  1303     BCF STATUS, 0x6                    328:       BANKSEL SSPBUF
05A6  0093     MOVWF SSPBUF                       329:       MOVWF SSPBUF    ;SEND ADDRESS LOW BYTE
05A7  083E     MOVF 0x3E, W                       330:       MOVF _temp5, W    ;COPY DATA TO W
05A8  1303     BCF STATUS, 0x6                    331:       BANKSEL SSPSTAT
                                                  332:   RAM_WRITE_D
05AA  1C14     BTFSS SSPCON, 0x0                  333:       BTFSS BF
05AB  2DAA     GOTO 0x5AA                         334:       GOTO RAM_WRITE_D
05AC  1303     BCF STATUS, 0x6                    335:       BANKSEL SSPBUF
05AE  0093     MOVWF SSPBUF                       336:       MOVWF SSPBUF    ;SEND DATA
05AF  1303     BCF STATUS, 0x6                    337:       BANKSEL SSPSTAT
                                                  338:   RAM_WRITE_R
05B1  1C14     BTFSS SSPCON, 0x0                  339:       BTFSS BF
05B2  2DB1     GOTO 0x5B1                         340:       GOTO RAM_WRITE_R
05B3  1303     BCF STATUS, 0x6                    341:       BANKSEL SSPBUF
05B5  0813     MOVF SSPBUF, W                     342:       MOVF SSPBUF, W  ;COPY DUMMY DATA TO W
05B6  1786     BSF PORTB, 0x7                     343:       BSF RAM_CS
05B7  0008     RETURN                             344:       RETURN
                                                  345:       
                                                  346:   RAM_CONFIG
05B8  1386     BCF PORTB, 0x7                     347:       BCF RAM_CS    ;CHIP ENABLE
05B9  3001     MOVLW 0x1                          348:       MOVLW 0x01	;PUT WRITE COMMAND IN W
05BA  0093     MOVWF SSPBUF                       349:       MOVWF SSPBUF    ;SEND COMMAND
05BB  3000     MOVLW 0x0                          350:       MOVLW 0x00	;CONFIGURE FOR BYTE MODE
05BC  1303     BCF STATUS, 0x6                    351:       BANKSEL SSPSTAT
                                                  352:   RAM_CONFIG_C
05BE  1C14     BTFSS SSPCON, 0x0                  353:       BTFSS BF	;IS THE TRANSMISSION READY
05BF  2DBE     GOTO 0x5BE                         354:       GOTO RAM_CONFIG_C	;IF NOT WAIT UNTIL IT IS
05C0  1303     BCF STATUS, 0x6                    355:       BANKSEL SSPBUF
05C2  0093     MOVWF SSPBUF                       356:       MOVWF SSPBUF    ;SEND CONFIG DATA
05C3  1303     BCF STATUS, 0x6                    357:       BANKSEL SSPSTAT
                                                  358:   RAM_CONFIG_D
05C5  1C14     BTFSS SSPCON, 0x0                  359:       BTFSS BF
05C6  2DC5     GOTO 0x5C5                         360:       GOTO RAM_CONFIG_D
05C7  1303     BCF STATUS, 0x6                    361:       BANKSEL SSPBUF
05C9  0813     MOVF SSPBUF, W                     362:       MOVF SSPBUF, W  ;COPY DUMMY DATA TO W
05CA  1786     BSF PORTB, 0x7                     363:       BSF RAM_CS
05CB  0008     RETURN                             364:       RETURN
                                                  365:   
                                                  366:   global _lcd_putc
                                                  367:   _lcd_putc
05CC  1585     BSF PORTA, 0x3                     368:       BSF DISP_RS	;RS LINE TO 1 (PORT A BIT 3)
05CD  25D2     CALL 0x5D2                         369:       CALL _lcd_send
05CE  2625     CALL 0x625                         370:       CALL _pulse_e
05CF  3002     MOVLW 0x2                          371:       MOVLW 0x02
05D0  2660     CALL 0x660                         372:       CALL _delay_millis
05D1  0008     RETURN                             373:       RETURN
                                                  374:       
                                                  375:   global _lcd_send
                                                  376:   _lcd_send    ;SENDS DATA OR COMMAND TO LCD SHIFT REGISTER
05D2  00C0     MOVWF 0x40                         377:       MOVWF _temp3	;COPY DATA TO TEMP VARIABLE
05D3  3008     MOVLW 0x8                          378:       MOVLW 0x08
05D4  00B7     MOVWF 0x37                         379:       MOVWF _gen_count3	;COUNT 8 BITS
                                                  380:   LCD_SEND_LOOP
05D5  1BC0     BTFSC 0x40, 0x7                    381:       BTFSC _temp3,7
05D6  1788     BSF PORTD, 0x7                     382:       BSF DISP_DATA
05D7  1FC0     BTFSS 0x40, 0x7                    383:       BTFSS _temp3,7
05D8  1388     BCF PORTD, 0x7                     384:       BCF DISP_DATA
05D9  0DC0     RLF 0x40, F                        385:       RLF _temp3,F
05DA  1708     BSF PORTD, 0x6                     386:       BSF DISP_CLK
05DB  0000     NOP                                387:       NOP
05DC  0000     NOP                                388:       NOP
05DD  1308     BCF PORTD, 0x6                     389:       BCF DISP_CLK
05DE  0BB7     DECFSZ 0x37, F                     390:       DECFSZ _gen_count3,F
05DF  2DD5     GOTO 0x5D5                         391:       GOTO LCD_SEND_LOOP
05E0  0008     RETURN                             392:       RETURN
                                                  393:   
                                                  394:   FUNCTIONSET_LCD
05E1  1105     BCF PORTA, 0x2                     395:       BCF DISP_E	;MAKE SURE THAT E STARTS LOW
05E2  1308     BCF PORTD, 0x6                     396:       BCF DISP_CLK     ;MAKE SURE DISPLAY CLOCK STARTS LOW
05E3  1185     BCF PORTA, 0x3                     397:       BCF DISP_RS	;RS LINE TO 0 (PORT A BIT 3)
05E4  3038     MOVLW 0x38                         398:       MOVLW 0b00111000	;FUNCTION SET COMMAND
05E5  25D2     CALL 0x5D2                         399:       CALL _lcd_send
05E6  2625     CALL 0x625                         400:       CALL _pulse_e    ;PULSE E LINE HIGH (PORT A BIT 2)
05E7  300A     MOVLW 0xA                          401:       MOVLW 10
05E8  2660     CALL 0x660                         402:       CALL _delay_millis
05E9  0008     RETURN                             403:       RETURN
                                                  404:   
                                                  405:   DISPLAYON
05EA  1185     BCF PORTA, 0x3                     406:       BCF DISP_RS   ;RS LINE TO 0 (PORT A BIT 3)
05EB  300F     MOVLW 0xF                          407:       MOVLW 0x0F  ;DISPLAY ON/OFF AND CURSOR COMMAND
05EC  25D2     CALL 0x5D2                         408:       CALL _lcd_send
05ED  2625     CALL 0x625                         409:       CALL _pulse_e
05EE  300A     MOVLW 0xA                          410:       MOVLW 10
05EF  2660     CALL 0x660                         411:       CALL _delay_millis
05F0  0008     RETURN                             412:       RETURN
                                                  413:   
                                                  414:   CLEARDISPLAY
05F1  1185     BCF PORTA, 0x3                     415:       BCF DISP_RS	;RS LINE LOW
05F2  3001     MOVLW 0x1                          416:       MOVLW 0x01	;CLEAR DISPLAY COMMAND
05F3  25D2     CALL 0x5D2                         417:       CALL _lcd_send	;WRITE TO DATA LINES
05F4  2625     CALL 0x625                         418:       CALL _pulse_e
05F5  300A     MOVLW 0xA                          419:       MOVLW 10
05F6  2660     CALL 0x660                         420:       CALL _delay_millis
05F7  0008     RETURN                             421:       RETURN
                                                  422:   
                                                  423:   SETHOME_LCD
05F8  1185     BCF PORTA, 0x3                     424:       BCF DISP_RS ;RS LINE LOW
05F9  3003     MOVLW 0x3                          425:       MOVLW 0x03   ;DISPLAY AND CURSOR HOME COMMAND
05FA  25D2     CALL 0x5D2                         426:       CALL _lcd_send ;WRITE TO DATA LINES
05FB  2625     CALL 0x625                         427:       CALL _pulse_e
05FC  3005     MOVLW 0x5                          428:       MOVLW 5
05FD  2660     CALL 0x660                         429:       CALL _delay_millis
05FE  0008     RETURN                             430:       RETURN
                                                  431:   
                                                  432:   global _lcd_line2
                                                  433:   _lcd_line2
05FF  25F8     CALL 0x5F8                         434:       CALL SETHOME_LCD
0600  3028     MOVLW 0x28                         435:       MOVLW 28H   ;SET COUNTER TO 40
0601  00B8     MOVWF 0x38                         436:       MOVWF _gen_count2
0602  3010     MOVLW 0x10                         437:       MOVLW 0b00010000   ;CURSOR LEFT COMMAND
0603  25D2     CALL 0x5D2                         438:       CALL _lcd_send ;WRITE COMMAND TO DATA LINES
                                                  439:   CLLOOP40
0604  1185     BCF PORTA, 0x3                     440:       BCF DISP_RS	;RS LINE LOW (COMMAND MODE)
0605  2625     CALL 0x625                         441:       CALL _pulse_e
0606  3002     MOVLW 0x2                          442:       MOVLW 2
0607  2660     CALL 0x660                         443:       CALL _delay_millis
0608  0BB8     DECFSZ 0x38, F                     444:       DECFSZ _gen_count2, F
0609  2E04     GOTO 0x604                         445:       GOTO CLLOOP40
060A  0008     RETURN                             446:       RETURN
                                                  447:   
                                                  448:   LCD_CLEAR1
060B  25F8     CALL 0x5F8                         449:       CALL SETHOME_LCD
060C  3020     MOVLW 0x20                         450:       MOVLW 0x20 ;SPACE CHAR
060D  1585     BSF PORTA, 0x3                     451:       BSF DISP_RS ;RS LINE HIGH FOR DATA
060E  25D2     CALL 0x5D2                         452:       CALL _lcd_send	;PUT CHAR ON THE DATA LINES
060F  3014     MOVLW 0x14                         453:       MOVLW 20 ;COUNT 20 SPACE CHARS
0610  00B8     MOVWF 0x38                         454:       MOVWF _gen_count2
                                                  455:   LCD_CLEAR12
0611  2625     CALL 0x625                         456:       CALL _pulse_e
0612  3002     MOVLW 0x2                          457:       MOVLW 2
0613  2660     CALL 0x660                         458:       CALL _delay_millis
0614  0BB8     DECFSZ 0x38, F                     459:       DECFSZ _gen_count2, F
0615  2E11     GOTO 0x611                         460:       GOTO LCD_CLEAR12
0616  25F8     CALL 0x5F8                         461:       CALL SETHOME_LCD
0617  0008     RETURN                             462:       RETURN
                                                  463:   
                                                  464:   global _lcd_clear2
                                                  465:   _lcd_clear2
0618  25FF     CALL 0x5FF                         466:       CALL _lcd_line2
0619  3020     MOVLW 0x20                         467:       MOVLW 0x20 ;SPACE CHAR
061A  1585     BSF PORTA, 0x3                     468:       BSF DISP_RS ;RS LINE HIGH FOR DATA
061B  25D2     CALL 0x5D2                         469:       CALL _lcd_send	;PUT CHAR ON THE DATA LINES
061C  3014     MOVLW 0x14                         470:       MOVLW 20 ;COUNT 20 SPACE CHARS
061D  00B8     MOVWF 0x38                         471:       MOVWF _gen_count2
                                                  472:   LCD_CLEAR22
061E  2625     CALL 0x625                         473:       CALL _pulse_e
061F  3002     MOVLW 0x2                          474:       MOVLW 2
0620  2660     CALL 0x660                         475:       CALL _delay_millis
0621  0BB8     DECFSZ 0x38, F                     476:       DECFSZ _gen_count2, F
0622  2E1E     GOTO 0x61E                         477:       GOTO LCD_CLEAR22
0623  25FF     CALL 0x5FF                         478:       CALL _lcd_line2
0624  0008     RETURN                             479:       RETURN
                                                  480:   
                                                  481:   global _pulse_e
                                                  482:   _pulse_e
0625  1505     BSF PORTA, 0x2                     483:       BSF DISP_E   ;SET E LINE HIGH
0626  0000     NOP                                484:       NOP
0627  0000     NOP                                485:       NOP
0628  0000     NOP                                486:       NOP
0629  0000     NOP                                487:       NOP
062A  0000     NOP                                488:       NOP ;MODIFIED FOR 4MHZ CLOCK
062B  0000     NOP                                489:       NOP
062C  0000     NOP                                490:       NOP
062D  0000     NOP                                491:       NOP
062E  1105     BCF PORTA, 0x2                     492:       BCF DISP_E   ;SET E LINE LOW
062F  0008     RETURN                             493:       RETURN
                                                  494:   
                                                  495:   global _print_name
                                                  496:   _print_name
0630  1383     BCF STATUS, 0x7                    497:       BCF STATUS, IRP ;SET BANK 0 AND 1
0631  304C     MOVLW 0x4C                         498:       MOVLW _tape_name
0632  0084     MOVWF FSR                          499:       MOVWF FSR
0633  3008     MOVLW 0x8                          500:       MOVLW 8  ;COUNT 8 CHARS
0634  00B8     MOVWF 0x38                         501:       MOVWF _gen_count2
0635  1585     BSF PORTA, 0x3                     502:       BSF DISP_RS ;RS LINE HIGH FOR DATA
                                                  503:   PN_LOOP
0636  0800     MOVF INDF, W                       504:       MOVF INDF, W
0637  25D2     CALL 0x5D2                         505:       CALL _lcd_send
0638  2625     CALL 0x625                         506:       CALL _pulse_e
0639  3002     MOVLW 0x2                          507:       MOVLW 2
063A  2660     CALL 0x660                         508:       CALL _delay_millis
063B  0A84     INCF FSR, F                        509:       INCF FSR, F
063C  0BB8     DECFSZ 0x38, F                     510:       DECFSZ _gen_count2, F
063D  2E36     GOTO 0x636                         511:       GOTO PN_LOOP
063E  0008     RETURN                             512:       RETURN
                                                  513:   
                                                  514:   ;TAPE_IN
                                                  515:   ;    MOVLW H'FF'
                                                  516:   ;    MOVWF RAM_ADDRESS_H
                                                  517:   ;    MOVWF RAM_ADDRESS_L
                                                  518:   ;    BSF FLAG_REG,1 ;DISSABLE RESET IF TRANSMISSION FAILS
                                                  519:   ;    CALL GET_LEADER
                                                  520:   ;    BCF FLAG_REG,1 ;ENABLE RESET IF TRANSMISSION FAILS
                                                  521:   ;    CALL SAVE_FIRST_BLOCK
                                                  522:   ;    INCFSZ RAM_ADDRESS_L, F    ;INCREMENT LOW ADDRESS
                                                  523:   ;    DECF RAM_ADDRESS_H, F
                                                  524:   ;    INCF RAM_ADDRESS_H, F	;IF LOW ADDRESS IS ZERO INCREMENT THE HIGH ADDRESS TOO
                                                  525:   ;    MOVF RAM_ADDRESS_H, W
                                                  526:   ;    MOVWF TAPE_SIZE_HIGH
                                                  527:   ;    MOVF RAM_ADDRESS_L, W
                                                  528:   ;    MOVWF TAPE_SIZE_LOW
                                                  529:   ;    CLRF RAM_ADDRESS_H
                                                  530:   ;    MOVLW H'03'
                                                  531:   ;    MOVWF RAM_ADDRESS_L
                                                  532:   ;    BCF STATUS, IRP ;SET BANKS 0 AND 1
                                                  533:   ;    MOVLW TAPE_NAME
                                                  534:   ;    MOVWF FSR
                                                  535:   ;    MOVLW D'08'
                                                  536:   ;    MOVWF GEN_COUNT
                                                  537:   ;NAME_COPY
                                                  538:   ;    CALL RAM_READ_AUTO
                                                  539:   ;    MOVF DREG, W
                                                  540:   ;    MOVWF INDF
                                                  541:   ;    INCF FSR, F
                                                  542:   ;    DECFSZ GEN_COUNT, F
                                                  543:   ;    GOTO NAME_COPY
                                                  544:   ;    RETURN
                                                  545:   
                                                  546:   ;GET_LEADER
                                                  547:   ;    MOVLW D'128'    ;LENGTH OF LEADER
                                                  548:   ;    MOVWF GEN_COUNT2
                                                  549:   ;LEADER_LOOP
                                                  550:   ;    CALL BUILD_BYTE
                                                  551:   ;    MOVF DREG,W
                                                  552:   ;    XORLW H'55'
                                                  553:   ;    BTFSS STATUS, Z
                                                  554:   ;    GOTO GL_FIX
                                                  555:   ;    DECFSZ GEN_COUNT2, F
                                                  556:   ;    GOTO LEADER_LOOP
                                                  557:   ;    RETURN
                                                  558:   ;GL_FIX
                                                  559:   ;    DECFSZ GEN_COUNT2, F
                                                  560:   ;    GOTO GL_FIX2
                                                  561:   ;    GOTO BUILD_PANIC
                                                  562:   ;GL_FIX2
                                                  563:   ;    CALL BUILD_ALIGN
                                                  564:   ;    MOVF DREG,W
                                                  565:   ;    XORLW H'55'
                                                  566:   ;    BTFSS STATUS,Z
                                                  567:   ;    GOTO BUILD_PANIC
                                                  568:   ;    DECFSZ GEN_COUNT2, F
                                                  569:   ;    GOTO LEADER_LOOP
                                                  570:   ;    GOTO BUILD_PANIC
                                                  571:   
                                                  572:   ;SAVE_FIRST_BLOCK
                                                  573:   ;    CALL BUILD_BYTE
                                                  574:   ;    BTFSS DREG,0    ;CHECK IF BIT 0 IS SET (IF IT IS CLEARED THERE HAS BEEN AN ALIGNMENT ERROR)
                                                  575:   ;    GOTO BUILD_PANIC
                                                  576:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  577:   ;    CALL BUILD_BYTE
                                                  578:   ;    CALL RAM_WRITE_AUTO	;SAVE SYNC BYTE
                                                  579:   ;    CALL BUILD_BYTE
                                                  580:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK TYPE BYTE
                                                  581:   ;    CALL BUILD_BYTE
                                                  582:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK LENGTH
                                                  583:   ;    MOVF DREG, W
                                                  584:   ;    MOVWF GEN_COUNT2
                                                  585:   ;FIRST_BLOCK_LOOP
                                                  586:   ;    CALL BUILD_BYTE
                                                  587:   ;    CALL RAM_WRITE_AUTO
                                                  588:   ;    DECFSZ GEN_COUNT2, F
                                                  589:   ;    GOTO FIRST_BLOCK_LOOP
                                                  590:   ;    CALL BUILD_BYTE
                                                  591:   ;    CALL RAM_WRITE_AUTO	;SAVE CHECKSUM
                                                  592:   ;    CALL BUILD_BYTE
                                                  593:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  594:   ;    CALL GET_LEADER ;GETS THE SECOND LEADER
                                                  595:   ;SAVE_BLOCKS
                                                  596:   ;    CALL BUILD_BYTE
                                                  597:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  598:   ;    CALL BUILD_BYTE
                                                  599:   ;    CALL RAM_WRITE_AUTO	;SAVE SYNC BYTE
                                                  600:   ;    CALL BUILD_BYTE
                                                  601:   ;    INCFSZ DREG, W  ;CHECK IF BLOCK IS END OF FILE
                                                  602:   ;    GOTO NOT_EOF_BLOCK
                                                  603:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK TYPE
                                                  604:   ;    CALL BUILD_BYTE
                                                  605:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK LENGTH
                                                  606:   ;    CALL BUILD_BYTE
                                                  607:   ;    CALL RAM_WRITE_AUTO	;SAVE CHECKSUM
                                                  608:   ;    CALL BUILD_BYTE
                                                  609:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  610:   ;    RETURN
                                                  611:   ;NOT_EOF_BLOCK
                                                  612:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK TYPE
                                                  613:   ;    CALL BUILD_BYTE
                                                  614:   ;    CALL RAM_WRITE_AUTO	;SAVE LENGTH BYTE
                                                  615:   ;    MOVF DREG, W
                                                  616:   ;    MOVWF GEN_COUNT2 ;COPY LENGTH TO GEN_COUNT2
                                                  617:   ;BLOCK_DATA_LOOP
                                                  618:   ;    CALL BUILD_BYTE
                                                  619:   ;    CALL RAM_WRITE_AUTO
                                                  620:   ;    DECFSZ GEN_COUNT2, F
                                                  621:   ;    GOTO BLOCK_DATA_LOOP
                                                  622:   ;    CALL BUILD_BYTE
                                                  623:   ;    CALL RAM_WRITE_AUTO	;SAVE CHECKSUM
                                                  624:   ;    CALL BUILD_BYTE
                                                  625:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  626:   ;    GOTO SAVE_BLOCKS
                                                  627:   
                                                  628:   ;BUILD_ALIGN ;SKIPS INITIAL WAIT IN AN ATTEMPT TO FIX ALIGNMENT. BUILD_BYTE IS THE NORMAL ENTRY POINT
                                                  629:   ;    MOVLW H'08'
                                                  630:   ;    MOVWF GEN_COUNT ;INITIALIZE COUNTER TO 8
                                                  631:   ;    MOVF PORTB, W
                                                  632:   ;    XORLW H'02' ;INVERT TAPE BIT
                                                  633:   ;    MOVWF TEMP1	    ;COPY PORTB TO TEMP1
                                                  634:   ;    GOTO WAIT_STOP
                                                  635:   ;BUILD_BYTE
                                                  636:   ;    MOVLW H'08'
                                                  637:   ;    MOVWF GEN_COUNT ;INITIALIZE COUNTER TO 8
                                                  638:   ;BUILD_LOOP
                                                  639:   ;    MOVF PORTB, W
                                                  640:   ;    MOVWF TEMP1	    ;COPY PORTB TO TEMP1
                                                  641:   ;    CLRF PULSE_LENGTH
                                                  642:   ;    RRF DREG, F
                                                  643:   ;    BCF DREG, 7
                                                  644:   ;WAIT_START
                                                  645:   ;    MOVF PORTB, W
                                                  646:   ;    XORWF TEMP1, W  ;COMPARE PORTB WITH PREVIOUS STATE
                                                  647:   ;    MOVWF TEMP2	    ;STORE RESULT IN TEMP2
                                                  648:   ;    BTFSS TEMP2, 1
                                                  649:   ;    GOTO WAIT_START ;IF STATE HAS NOT CHANGED KEEP WAITING
                                                  650:   ;WAIT_STOP
                                                  651:   ;    CALL TAPE_DELAY
                                                  652:   ;    INCF PULSE_LENGTH, F	;#1
                                                  653:   ;    MOVF PULSE_LENGTH, W    ;#2
                                                  654:   ;    SUBLW D'22'	    ;#3
                                                  655:   ;    BTFSC STATUS, C ;CHECK IF LENGTH IS GREATER THAN 22 #4
                                                  656:   ;    GOTO BUILD_NO_ERROR	;IF NOT CONTINUE NORMALLY #6
                                                  657:   ;BUILD_ERROR
                                                  658:   ;    BTFSS FLAG_REG, 1 ;IF ERROR IS IN FIRST BYTE TRY TO RECOVER
                                                  659:   ;    GOTO BUILD_PANIC   ;IF NOT RESET TO AVOID INFINITE LOOP
                                                  660:   ;    ;MOVF GEN_COUNT, W
                                                  661:   ;    ;SUBLW H'08'
                                                  662:   ;    ;BTFSS STATUS, Z ;CHECK IF ERROR IS IN FIRST BIT
                                                  663:   ;    ;GOTO BUILD_PANIC   ; IF NOT RESET TO AVOID INFINITE LOOP
                                                  664:   ;    GOTO BUILD_BYTE ;IF IT IS IN FIRST BIT OF FIRST BYTE RESTART SUBROUTINE
                                                  665:   ;BUILD_NO_ERROR
                                                  666:   ;    MOVF PORTB, W   ;#7
                                                  667:   ;    XORWF TEMP1, W  ;#8
                                                  668:   ;    MOVWF TEMP2	    ;#9
                                                  669:   ;    BTFSC TEMP2, 1  ;#10
                                                  670:   ;    GOTO WAIT_STOP  ;WAIT UNTIL TAPE INPUT RETURNS TO ORIGINAL STATE #12
                                                  671:   ;    MOVF PULSE_LENGTH, W
                                                  672:   ;    SUBLW D'08'
                                                  673:   ;    BTFSC STATUS, C ;CHECK IF LENGTH IS LESS THAN 8
                                                  674:   ;    GOTO BUILD_ERROR	;IF IT IS GO TO LOCAL ERROR HANDLER
                                                  675:   ;    MOVLW D'15'
                                                  676:   ;    SUBWF PULSE_LENGTH, F   ;SUBTRACT THRESHOLD FROM PULSE LENGTH
                                                  677:   ;    BTFSC PULSE_LENGTH, 7   ;CHECK IF PULSE LENGHT IS NEGATIVE
                                                  678:   ;    BSF DREG, 7		    ;IF IT IS SET BIT IN DREG
                                                  679:   ;    DECFSZ GEN_COUNT, F
                                                  680:   ;    GOTO BUILD_LOOP
                                                  681:   ;    RETLW H'00'	;RETURN ZERO TO INDICATE SUCCESS
                                                  682:   
                                                  683:   ;BUILD_PANIC ;ENABLES THE WATCHDOG TO CAUSE A RESET
                                                  684:   ;    BANKSEL WDTCON
                                                  685:   ;    BSF WDTCON, SWDTEN  ;ENABLE WATCHDOG
                                                  686:   ;BP_HALT
                                                  687:   ;    GOTO BP_HALT    ;WAIT FOR THE WATCHDOG TO DO THE THING
                                                  688:   
                                                  689:   ;TAPE_DELAY
                                                  690:   ;    NOP
                                                  691:   ;    NOP
                                                  692:   ;    NOP
                                                  693:   ;    NOP
                                                  694:   ;    NOP	;5 CYCLE DELAY
                                                  695:   ;    RETURN
                                                  696:   
                                                  697:   ;TAPE_OUT
                                                  698:   ;    CLRF TEMP1
                                                  699:   ;    CLRF BIT_COUNT
                                                  700:   ;    MOVLW H'FF'
                                                  701:   ;    MOVWF RAM_ADDRESS_H
                                                  702:   ;    MOVWF RAM_ADDRESS_L	;RAM READ FUNCTION WILL AUTO INCREMENT ADDRESS, SO IT SHOULD OVERFLOW WHEN IT IS FIRST CALLED
                                                  703:   ;    MOVLW H'55'
                                                  704:   ;    MOVWF DREG	;TAPE LEADER VALUE
                                                  705:   ;    MOVLW D'127'
                                                  706:   ;    MOVWF GEN_COUNT ;128 LEADER BYTES
                                                  707:   ;    CLRF TMR0
                                                  708:   ;    NOP
                                                  709:   ;    BCF INTCON, T0IF
                                                  710:   ;    BSF INTCON, GIE	;ENABLE INTERRUPT
                                                  711:   ;LEADER_OUT
                                                  712:   ;    BTFSS BIT_COUNT, 2
                                                  713:   ;    GOTO LEADER_OUT	;WAIT UNTIL BIT COUNT IS NOT ZERO
                                                  714:   ;LEADER_WAIT
                                                  715:   ;    BTFSC BIT_COUNT, 2
                                                  716:   ;    GOTO LEADER_WAIT	;WAIT UNTIL BIT_COUNT IS ZERO
                                                  717:   ;    DECFSZ GEN_COUNT, F
                                                  718:   ;    GOTO LEADER_OUT	;LOOP UNTIL 128 LEADER BYTES HAVE BEEN SENT
                                                  719:   ;    MOVLW D'22'
                                                  720:   ;    MOVWF GEN_COUNT	;ONE PAST THE END OF THE NAME FILE
                                                  721:   ;TAPE_NAMEBLOCK
                                                  722:   ;    CALL RAM_READ_AUTO	;GET FIRST BYTE
                                                  723:   ;TAPE_W1
                                                  724:   ;    BTFSS BIT_COUNT, 2
                                                  725:   ;    GOTO TAPE_W1    ;WAIT UNTIL BIT COUNT IS NOT ZERO
                                                  726:   ;TAPE_W2
                                                  727:   ;    BTFSC BIT_COUNT, 2
                                                  728:   ;    GOTO TAPE_W2
                                                  729:   ;    DECFSZ GEN_COUNT, F
                                                  730:   ;    GOTO TAPE_NAMEBLOCK
                                                  731:   ;    BCF INTCON, GIE ;STOP INTERRUPT
                                                  732:   ;    CALL TAPE_PAUSE ;1/2 SECOND SILENCE
                                                  733:   ;    MOVLW D'127'
                                                  734:   ;    MOVWF GEN_COUNT ;128 LEADER BYTES
                                                  735:   ;    CLRF TMR0
                                                  736:   ;    CLRF TEMP1
                                                  737:   ;    NOP
                                                  738:   ;    BCF INTCON, T0IF
                                                  739:   ;    BSF INTCON, GIE	;ENABLE INTERRUPT
                                                  740:   ;LEADER_OUT2
                                                  741:   ;    BTFSS BIT_COUNT, 2
                                                  742:   ;    GOTO LEADER_OUT2	;WAIT UNTIL BIT COUNT IS NOT ZERO
                                                  743:   ;LEADER_WAIT2
                                                  744:   ;    BTFSC BIT_COUNT, 2
                                                  745:   ;    GOTO LEADER_WAIT2	;WAIT UNTIL BIT_COUNT IS ZERO
                                                  746:   ;    DECFSZ GEN_COUNT, F
                                                  747:   ;    GOTO LEADER_OUT2	;LOOP UNTIL 128 LEADER BYTES HAVE BEEN SENT
                                                  748:   ;TAPE_NE
                                                  749:   ;    CALL RAM_READ_AUTO
                                                  750:   ;TAPE_W3
                                                  751:   ;    BTFSS BIT_COUNT, 2
                                                  752:   ;    GOTO TAPE_W3    ;WAIT UNTIL BIT_COUNT IS NOT ZERO
                                                  753:   ;TAPE_W4
                                                  754:   ;    BTFSC BIT_COUNT, 2
                                                  755:   ;    GOTO TAPE_W4
                                                  756:   ;    MOVF TAPE_SIZE_HIGH, W
                                                  757:   ;    XORWF RAM_ADDRESS_H, W
                                                  758:   ;    MOVWF TEMP3	;STORE RESULT IN TEMP3
                                                  759:   ;    INCF TEMP3, F   ;INCREMENT RESULT
                                                  760:   ;    DECFSZ TEMP3, F
                                                  761:   ;    GOTO TAPE_NE
                                                  762:   ;    MOVF TAPE_SIZE_LOW, W
                                                  763:   ;    XORWF RAM_ADDRESS_L, W
                                                  764:   ;    MOVWF TEMP3	;STORE RESULT IN TEMP3
                                                  765:   ;    INCF TEMP3, F
                                                  766:   ;    DECFSZ TEMP3, F
                                                  767:   ;    GOTO TAPE_NE
                                                  768:   ;    BCF INTCON, GIE
                                                  769:   ;    RETURN
                                                  770:   
                                                  771:   ;TAPE_INT
                                                  772:   ;    MOVWF TEMP4	;SAVE W REG
                                                  773:   ;    BCF INTCON, T0IF
                                                  774:   ;    MOVLW D'59'	;USED TO BE 58, CHANGED IT BECAUSE I ADDED THE SAVE W INSTRUCTION
                                                  775:   ;    MOVWF TMR0	;PRELOAD TIMER
                                                  776:   ;    BTFSC TEMP1, 0  ;IDENTIFY PHASE
                                                  777:   ;    GOTO PHASE1
                                                  778:   ;    BTFSC TEMP1, 1
                                                  779:   ;    GOTO PHASE2
                                                  780:   ;    BTFSC TEMP1, 2
                                                  781:   ;    GOTO PHASE3
                                                  782:   ;    BTFSC TEMP1, 3
                                                  783:   ;    GOTO PHASE4
                                                  784:   ;    MOVLW B'00000100'	;DEFAULT PHASE - LOAD NEW DATA AND INITIALIZE VARIABLES
                                                  785:   ;    XORWF PORTB, F  ;TOGGLE TAPE OUT
                                                  786:   ;    MOVF DREG, W
                                                  787:   ;    MOVWF TEMP2	    ;COPY NEW DATA TO BUFFER
                                                  788:   ;    CLRF BIT_COUNT
                                                  789:   ;    MOVLW H'01'
                                                  790:   ;    MOVWF TEMP1	;SET PHASE TO 1
                                                  791:   ;    MOVF TEMP4, W   ;RESTORE W
                                                  792:   ;    RETFIE
                                                  793:   ;PHASE1	;TOGGLE IF BIT IS 1
                                                  794:   ;	MOVLW B'00000100'	;WILL USE THIS TO TOGGLE OUTPUT
                                                  795:   ;	BTFSC TEMP2, 0	;CHECK IF BIT IS 1 OR 0
                                                  796:   ;	XORWF PORTB, F	;IF BIT IS 1 TOGGLE OUTPUT
                                                  797:   ;	MOVLW H'02'
                                                  798:   ;	MOVWF TEMP1	;SET PHASE TO 2
                                                  799:   ;	MOVF TEMP4, W   ;RESTORE W
                                                  800:   ;	RETFIE
                                                  801:   ;PHASE2	;ALWAYS TOGGLE
                                                  802:   ;	MOVLW B'00000100'
                                                  803:   ;	XORWF PORTB, F	;TOGGLE OUTPUT
                                                  804:   ;	BTFSC TEMP2, 0	;CHECK IF BIT IS 1 OR 0
                                                  805:   ;	GOTO PHASE2_NEXT	;IF BIT IS SET THEN LOAD NEXT BIT AND RESET PHASE
                                                  806:   ;	MOVLW H'04'
                                                  807:   ;	MOVWF TEMP1	;SET PHASE TO 3
                                                  808:   ;	MOVF TEMP4, W	;RESTORE W
                                                  809:   ;	RETFIE
                                                  810:   ;PHASE3	;NEVER TOGGLE
                                                  811:   ;	MOVLW H'08'
                                                  812:   ;	MOVWF TEMP1	;SET PHASE TO 4
                                                  813:   ;	MOVF TEMP4, W
                                                  814:   ;	RETFIE
                                                  815:   ;PHASE4	;ALWAYS TOGGLE
                                                  816:   ;	MOVLW B'00000100'
                                                  817:   ;	XORWF PORTB, F	;TOGGLE OUTPUT
                                                  818:   ;PHASE2_NEXT
                                                  819:   ;    MOVLW H'01'
                                                  820:   ;    MOVWF TEMP1	;SET PHASE TO 1
                                                  821:   ;    RRF TEMP2, F	;SHIFT TO NEXT BIT
                                                  822:   ;    INCF BIT_COUNT, F	;NEXT BIT COUNT
                                                  823:   ;    BTFSS BIT_COUNT, 3	;CHECK IF BIT COUNT HAS REACHED 8
                                                  824:   ;    GOTO PHASE_DONE	;IF NOT, RETURN
                                                  825:   ;    CLRF BIT_COUNT	;CLEAR BIT COUNT
                                                  826:   ;    MOVF DREG, W
                                                  827:   ;    MOVWF TEMP2	;COPY NEW DATA TO BUFFER
                                                  828:   ;PHASE_DONE
                                                  829:   ;    MOVF TEMP4, W
                                                  830:   ;    RETFIE
                                                  831:   
                                                  832:   ;TAPE_PAUSE
                                                  833:   ;    MOVLW D'32'
                                                  834:   ;    MOVWF GEN_COUNT
                                                  835:   ;TP1
                                                  836:   ;    MOVLW D'54'
                                                  837:   ;    MOVWF GEN_COUNT2
                                                  838:   ;TP2
                                                  839:   ;    MOVLW D'95'
                                                  840:   ;    MOVWF LDEL_COUNT
                                                  841:   ;TP3
                                                  842:   ;    DECFSZ LDEL_COUNT, F
                                                  843:   ;    GOTO TP3
                                                  844:   ;    DECFSZ GEN_COUNT2, F
                                                  845:   ;    GOTO TP2
                                                  846:   ;    DECFSZ GEN_COUNT, F
                                                  847:   ;    GOTO TP1
                                                  848:   ;    RETURN
                                                  849:       
                                                  850:   SPI_TRANSFER
063F  0093     MOVWF SSPBUF                       851:       MOVWF SSPBUF    ;SEND DATA
0640  1303     BCF STATUS, 0x6                    852:       BANKSEL SSPSTAT
                                                  853:   SPI_WAIT
0642  1C14     BTFSS SSPCON, 0x0                  854:       BTFSS BF	;IS THE TRANSMISSION READY
0643  2E42     GOTO 0x642                         855:       GOTO SPI_WAIT	;IF NOT WAIT UNTIL IT IS
0644  1303     BCF STATUS, 0x6                    856:       BANKSEL SSPBUF
0646  0813     MOVF SSPBUF, W                     857:       MOVF SSPBUF, W  ;COPY DATA TO W
0647  0008     RETURN                             858:       RETURN
                                                  859:   
                                                  860:   BUILD_WORD  ;GENERATES PSEUDO-RANDOM TEST DATA
0648  3010     MOVLW 0x10                         861:       MOVLW 16
0649  00B6     MOVWF 0x36                         862:       MOVWF _gen_count4
                                                  863:   BUILD_WORD_LOOP
                                                  864:       ;GET WORD HERE
064A  01C0     CLRF 0x40                          865:       CLRF _temp3  ;THIS WILL CONTAIN BIT 7 OF S_REG_LOW
064B  1BA7     BTFSC 0x27, 0x7                    866:       BTFSC _s_reg_low, 7
064C  1440     BSF 0x40, 0x0                      867:       BSF _temp3, 0
064D  0827     MOVF 0x27, W                       868:       MOVF _s_reg_low, W
064E  3901     ANDLW 0x1                          869:       ANDLW 0x01	    ;GET BIT 0
064F  3A01     XORLW 0x1                          870:       XORLW 0x01	    ;FLIP BIT 0
0650  06C0     XORWF 0x40, F                      871:       XORWF _temp3, F   ;TEMP3 NOW CONTAINS BIT0 ^ BIT7 ^ 1
0651  0CC0     RRF 0x40, F                        872:       RRF _temp3, F
0652  0CA8     RRF 0x28, F                        873:       RRF _s_reg_high, F
0653  0CA7     RRF 0x27, F                        874:       RRF _s_reg_low, F
0654  0BB6     DECFSZ 0x36, F                     875:       DECFSZ _gen_count4, F
0655  2E4A     GOTO 0x64A                         876:       GOTO BUILD_WORD_LOOP
0656  0008     RETURN                             877:       RETURN
                                                  878:   
                                                  879:   GET_TEST_BYTE   ;SPLITS PSEUDO-RANDOM TEST DATA INTO SINGLE BYTES
0657  1C23     BTFSS 0x23, 0x0                    880:       BTFSS F_SRL_VALID
0658  2E5C     GOTO 0x65C                         881:       GOTO GTB_UPDATE
0659  0827     MOVF 0x27, W                       882:       MOVF _s_reg_low, W
065A  1023     BCF 0x23, 0x0                      883:       BCF F_SRL_VALID
065B  0008     RETURN                             884:       RETURN
                                                  885:   GTB_UPDATE
065C  2648     CALL 0x648                         886:       CALL BUILD_WORD
065D  1423     BSF 0x23, 0x0                      887:       BSF F_SRL_VALID
065E  0828     MOVF 0x28, W                       888:       MOVF _s_reg_high, W
065F  0008     RETURN                             889:       RETURN
                                                  890:   
                                                  891:   global _delay_millis
                                                  892:   _delay_millis    ;DESIGNED FOR 4MHZ CLOCK
0660  00A4     MOVWF 0x24                         893:       MOVWF _delay_counter
                                                  894:   DM_MILLIS
0661  3014     MOVLW 0x14                         895:       MOVLW 20
0662  00BA     MOVWF 0x3A                         896:       MOVWF _ldel_count
                                                  897:   DM_OUTER
0663  3010     MOVLW 0x10                         898:       MOVLW 16
0664  00BB     MOVWF 0x3B                         899:       MOVWF _sdel_count
                                                  900:   DM_INNER
0665  0BBB     DECFSZ 0x3B, F                     901:       DECFSZ _sdel_count,F
0666  2E65     GOTO 0x665                         902:       GOTO DM_INNER
0667  0BBA     DECFSZ 0x3A, F                     903:       DECFSZ _ldel_count,F
0668  2E63     GOTO 0x663                         904:       GOTO DM_OUTER
0669  0BA4     DECFSZ 0x24, F                     905:       DECFSZ _delay_counter,F
066A  2E61     GOTO 0x661                         906:       GOTO DM_MILLIS
066B  0008     RETURN                             907:       RETURN
                                                  908:   
                                                  909:   global _print_test_data
                                                  910:   _print_test_data
066C  01B9     CLRF 0x39                          911:       CLRF _gen_count
                                                  912:   PTD_OUTER
066D  01B8     CLRF 0x38                          913:       CLRF _gen_count2
                                                  914:   PTD_INNER
066E  0838     MOVF 0x38, W                       915:       MOVF _gen_count2, W
066F  390F     ANDLW 0xF                          916:       ANDLW 0x0F
0670  1D03     BTFSS STATUS, 0x2                  917:       BTFSS ZERO  ;EVERY 16 WORDS PRINT A NEWLINE
0671  2E74     GOTO 0x674                         918:       GOTO PTD_NO_NEWLINE
0672  300A     MOVLW 0xA                          919:       MOVLW 0x0A ;NEWLINE CHAR
0673  2566     CALL 0x566                         920:       CALL _uart_send
                                                  921:   PTD_NO_NEWLINE
0674  2657     CALL 0x657                         922:       CALL GET_TEST_BYTE  ;GET MSB
0675  21EF     CALL 0x1EF                         923:       CALL _byte_to_hex
0676  0876     MOVF 0x76, W                       924:       MOVF _hex_char_high, W
0677  2566     CALL 0x566                         925:       CALL _uart_send  ;HIGH NIBBLE HIGH BYTE
0678  0875     MOVF 0x75, W                       926:       MOVF _hex_char_low ,W
0679  2566     CALL 0x566                         927:       CALL _uart_send  ;LOW NIBBLE HIGH BYTE
067A  2657     CALL 0x657                         928:       CALL GET_TEST_BYTE  ;GET LSB
067B  21EF     CALL 0x1EF                         929:       CALL _byte_to_hex
067C  0876     MOVF 0x76, W                       930:       MOVF _hex_char_high, W
067D  2566     CALL 0x566                         931:       CALL _uart_send  ;HIGH NIBBLE LOW BYTE
067E  0875     MOVF 0x75, W                       932:       MOVF _hex_char_low, W
067F  2566     CALL 0x566                         933:       CALL _uart_send  ;LOW NIBBLE LOW BYTE
0680  0BB8     DECFSZ 0x38, F                     934:       DECFSZ _gen_count2, F
0681  2E6E     GOTO 0x66E                         935:       GOTO PTD_INNER
0682  0BB9     DECFSZ 0x39, F                     936:       DECFSZ _gen_count, F
0683  2E6D     GOTO 0x66D                         937:       GOTO PTD_OUTER
0684  0008     RETURN                             938:       RETURN
                                                  939:   
                                                  940:   ;CHECK_FREE_SPACE
                                                  941:   ;    BCF FLAG_REG, 3
                                                  942:   ;    BCF FLAG_REG, 4
                                                  943:   ;    MOVF USB_FREE_SPACE3, F
                                                  944:   ;    BTFSS STATUS, Z
                                                  945:   ;    GOTO CFS2
                                                  946:   ;    BSF FLAG_REG, 3
                                                  947:   ;    BSF FLAG_REG, 4
                                                  948:   ;    RETURN
                                                  949:   ;CFS2
                                                  950:   ;    MOVF USB_FREE_SPACE2, W
                                                  951:   ;    SUBLW H'02'
                                                  952:   ;    BTFSS STATUS, C
                                                  953:   ;    GOTO CFS3
                                                  954:   ;    BSF FLAG_REG, 3
                                                  955:   ;    BSF FLAG_REG, 4
                                                  956:   ;    RETURN
                                                  957:   ;CFS3
                                                  958:   ;    MOVF USB_FREE_SPACE1, W
                                                  959:   ;    XORWF TAPE_SIZE_HIGH, W
                                                  960:   ;    BTFSC STATUS, Z
                                                  961:   ;    GOTO CFS4
                                                  962:   ;    MOVF TAPE_SIZE_HIGH, W
                                                  963:   ;    SUBWF USB_FREE_SPACE1, W
                                                  964:   ;    BTFSC STATUS, C
                                                  965:   ;    BSF FLAG_REG, 3
                                                  966:   ;    RETURN
                                                  967:   ;CFS4
                                                  968:   ;    MOVF TAPE_SIZE_LOW, F
                                                  969:   ;    BTFSC STATUS, Z
                                                  970:   ;    BSF FLAG_REG, 3
                                                  971:   ;    RETURN
                                                  972:   
                                                  973:   global _usb_reset_all
                                                  974:   _usb_reset_all
0685  1108     BCF PORTD, 0x2                     975:       BCF USB_CS ;CH376 CE LINE LOW
0686  3005     MOVLW 0x5                          976:       MOVLW 0x05 ;RESET ALL COMMAND
0687  263F     CALL 0x63F                         977:       CALL SPI_TRANSFER
0688  1508     BSF PORTD, 0x2                     978:       BSF USB_CS ;CH376S CE LINE HIGH
0689  0008     RETURN                             979:       RETURN
                                                  980:   
                                                  981:   global _usb_set_file_name
                                                  982:   _usb_set_file_name
068A  1383     BCF STATUS, 0x7                    983:       BCF STATUS, IRP
068B  304C     MOVLW 0x4C                         984:       MOVLW _tape_name ;NAME ADDRESS
068C  0084     MOVWF FSR                          985:       MOVWF FSR
068D  3008     MOVLW 0x8                          986:       MOVLW 0x08 ;NAME LENGTH
068E  00B6     MOVWF 0x36                         987:       MOVWF _gen_count4
068F  1108     BCF PORTD, 0x2                     988:       BCF USB_CS
0690  302F     MOVLW 0x2F                         989:       MOVLW 0x2F ;SET FILE NAME COMMAND
0691  263F     CALL 0x63F                         990:       CALL SPI_TRANSFER
0692  302F     MOVLW 0x2F                         991:       MOVLW 0x2F ;'\' CHAR NEEDED AT START OF NAME
0693  263F     CALL 0x63F                         992:       CALL SPI_TRANSFER
                                                  993:   USFN_LOOP
0694  0800     MOVF INDF, W                       994:       MOVF INDF, W
0695  263F     CALL 0x63F                         995:       CALL SPI_TRANSFER
0696  0A84     INCF FSR, F                        996:       INCF FSR, F
0697  0BB6     DECFSZ 0x36, F                     997:       DECFSZ _gen_count4, F
0698  2E94     GOTO 0x694                         998:       GOTO USFN_LOOP
0699  0100     CLRW                               999:       CLRW   ;NULL CHAR AT END OF NAME
069A  263F     CALL 0x63F                         1000:      CALL SPI_TRANSFER
069B  1508     BSF PORTD, 0x2                     1001:      BSF USB_CS ;CE LINE HIGH
069C  0008     RETURN                             1002:      RETURN
                                                  1003:  
                                                  1004:  global _usb_file_open
                                                  1005:  _usb_file_open
069D  1108     BCF PORTD, 0x2                     1006:      BCF USB_CS
069E  3032     MOVLW 0x32                         1007:      MOVLW 0x32 ;FILE OPEN COMMAND
069F  263F     CALL 0x63F                         1008:      CALL SPI_TRANSFER
06A0  1508     BSF PORTD, 0x2                     1009:      BSF USB_CS
06A1  0008     RETURN                             1010:      RETURN
                                                  1011:  
                                                  1012:  global _usb_file_close
                                                  1013:  _usb_file_close
06A2  1108     BCF PORTD, 0x2                     1014:      BCF USB_CS
06A3  3036     MOVLW 0x36                         1015:      MOVLW 0x36 ;FILE CLOSE COMMAND
06A4  263F     CALL 0x63F                         1016:      CALL SPI_TRANSFER
06A5  3001     MOVLW 0x1                          1017:      MOVLW 0x01 ;UPDATE FILE LENGTH
06A6  263F     CALL 0x63F                         1018:      CALL SPI_TRANSFER
06A7  1508     BSF PORTD, 0x2                     1019:      BSF USB_CS
06A8  0008     RETURN                             1020:      RETURN
                                                  1021:  
                                                  1022:  USB_BYTE_READ
06A9  1108     BCF PORTD, 0x2                     1023:      BCF USB_CS
06AA  303A     MOVLW 0x3A                         1024:      MOVLW 0x3A ;BYTE READ COMMAND
06AB  263F     CALL 0x63F                         1025:      CALL SPI_TRANSFER
06AC  0832     MOVF 0x32, W                       1026:      MOVF _usb_file_size_low, W
06AD  263F     CALL 0x63F                         1027:      CALL SPI_TRANSFER
06AE  0833     MOVF 0x33, W                       1028:      MOVF _usb_file_size_high, W
06AF  263F     CALL 0x63F                         1029:      CALL SPI_TRANSFER
06B0  1508     BSF PORTD, 0x2                     1030:      BSF USB_CS
06B1  0008     RETURN                             1031:      RETURN
                                                  1032:  
                                                  1033:  USB_BYTE_READ_GO
06B2  1108     BCF PORTD, 0x2                     1034:      BCF USB_CS
06B3  303B     MOVLW 0x3B                         1035:      MOVLW 0x3B ;BYTE READ GO COMMAND
06B4  263F     CALL 0x63F                         1036:      CALL SPI_TRANSFER
06B5  1508     BSF PORTD, 0x2                     1037:      BSF USB_CS
06B6  0008     RETURN                             1038:      RETURN
                                                  1039:  
                                                  1040:  USB_READ_DATA0
06B7  1108     BCF PORTD, 0x2                     1041:      BCF USB_CS
06B8  3027     MOVLW 0x27                         1042:      MOVLW 0x27 ;READ DATA0 COMMAND
06B9  263F     CALL 0x63F                         1043:      CALL SPI_TRANSFER
06BA  0100     CLRW                               1044:      CLRW
06BB  263F     CALL 0x63F                         1045:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO READ
06BC  07B0     ADDWF 0x30, F                      1046:      ADDWF _usb_bytes_read_low, F
06BD  1803     BTFSC STATUS, 0x0                  1047:      BTFSC CARRY
06BE  0AB1     INCF 0x31, F                       1048:      INCF _usb_bytes_read_high, F
06BF  00B6     MOVWF 0x36                         1049:      MOVWF _gen_count4
                                                  1050:  URD_LOOP
06C0  0100     CLRW                               1051:      CLRW
06C1  263F     CALL 0x63F                         1052:      CALL SPI_TRANSFER
                                                  1053:      ;CALL RAM_WRITE_AUTO	;this is a problem, two active spi devices
06C2  2288     CALL 0x288                         1054:      CALL _fifo_push
06C3  0BB6     DECFSZ 0x36, F                     1055:      DECFSZ _gen_count4, F
06C4  2EC0     GOTO 0x6C0                         1056:      GOTO URD_LOOP
06C5  1508     BSF PORTD, 0x2                     1057:      BSF USB_CS
06C6  27B2     CALL 0x7B2                         1058:      CALL _fifo_tf_to_mem
06C7  0008     RETURN                             1059:      RETURN
                                                  1060:  
                                                  1061:  global _usb_get_file_size
                                                  1062:  _usb_get_file_size
06C8  1108     BCF PORTD, 0x2                     1063:      BCF USB_CS
06C9  300C     MOVLW 0xC                          1064:      MOVLW 0x0C ;GET FILE SIZE COMMAND
06CA  263F     CALL 0x63F                         1065:      CALL SPI_TRANSFER
06CB  3068     MOVLW 0x68                         1066:      MOVLW 0x68 ;COMMAND DATA
06CC  263F     CALL 0x63F                         1067:      CALL SPI_TRANSFER
06CD  0100     CLRW                               1068:      CLRW
06CE  263F     CALL 0x63F                         1069:      CALL SPI_TRANSFER
06CF  00B2     MOVWF 0x32                         1070:      MOVWF _usb_file_size_low
06D0  0100     CLRW                               1071:      CLRW
06D1  263F     CALL 0x63F                         1072:      CALL SPI_TRANSFER
06D2  00B3     MOVWF 0x33                         1073:      MOVWF _usb_file_size_high
06D3  0100     CLRW                               1074:      CLRW
06D4  263F     CALL 0x63F                         1075:      CALL SPI_TRANSFER
06D5  0100     CLRW                               1076:      CLRW
06D6  263F     CALL 0x63F                         1077:      CALL SPI_TRANSFER   ;DISCARD UPPER BYTES OF FILE SIZE
06D7  1508     BSF PORTD, 0x2                     1078:      BSF USB_CS
06D8  0008     RETURN                             1079:      RETURN
                                                  1080:  
                                                  1081:  global _usb_check_exists
                                                  1082:  _usb_check_exists
06D9  1108     BCF PORTD, 0x2                     1083:      BCF USB_CS
06DA  00BF     MOVWF 0x3F                         1084:      MOVWF _temp4
06DB  3006     MOVLW 0x6                          1085:      MOVLW 0x06
06DC  263F     CALL 0x63F                         1086:      CALL SPI_TRANSFER   ;SEND CHECK_EXISTS COMMAND
06DD  083F     MOVF 0x3F, W                       1087:      MOVF _temp4, W
06DE  263F     CALL 0x63F                         1088:      CALL SPI_TRANSFER   ;SEND TEST DATA
06DF  0100     CLRW                               1089:      CLRW
06E0  263F     CALL 0x63F                         1090:      CALL SPI_TRANSFER   ;GET RESULT
06E1  1508     BSF PORTD, 0x2                     1091:      BSF USB_CS
06E2  0008     RETURN                             1092:      RETURN
                                                  1093:  
                                                  1094:  global _usb_file_create
                                                  1095:  _usb_file_create
06E3  1108     BCF PORTD, 0x2                     1096:      BCF USB_CS
06E4  3034     MOVLW 0x34                         1097:      MOVLW 0x34
06E5  263F     CALL 0x63F                         1098:      CALL SPI_TRANSFER
06E6  1508     BSF PORTD, 0x2                     1099:      BSF USB_CS
06E7  0008     RETURN                             1100:      RETURN
                                                  1101:  
                                                  1102:  USB_BYTE_WRITE
06E8  1108     BCF PORTD, 0x2                     1103:      BCF USB_CS
06E9  303C     MOVLW 0x3C                         1104:      MOVLW 0x3C
06EA  263F     CALL 0x63F                         1105:      CALL SPI_TRANSFER
06EB  0832     MOVF 0x32, W                       1106:      MOVF _usb_file_size_low, W
06EC  263F     CALL 0x63F                         1107:      CALL SPI_TRANSFER
06ED  0833     MOVF 0x33, W                       1108:      MOVF _usb_file_size_high, W
06EE  263F     CALL 0x63F                         1109:      CALL SPI_TRANSFER
06EF  1508     BSF PORTD, 0x2                     1110:      BSF USB_CS
06F0  0008     RETURN                             1111:      RETURN
                                                  1112:  
                                                  1113:  USB_BYTE_WR_GO
06F1  1108     BCF PORTD, 0x2                     1114:      BCF USB_CS
06F2  303D     MOVLW 0x3D                         1115:      MOVLW 0x3D
06F3  263F     CALL 0x63F                         1116:      CALL SPI_TRANSFER
06F4  1508     BSF PORTD, 0x2                     1117:      BSF USB_CS
06F5  0008     RETURN                             1118:      RETURN
                                                  1119:  
                                                  1120:  global _usb_get_status
                                                  1121:  _usb_get_status
06F6  1108     BCF PORTD, 0x2                     1122:      BCF USB_CS
06F7  3022     MOVLW 0x22                         1123:      MOVLW 0x22
06F8  263F     CALL 0x63F                         1124:      CALL SPI_TRANSFER
06F9  0100     CLRW                               1125:      CLRW
06FA  263F     CALL 0x63F                         1126:      CALL SPI_TRANSFER
06FB  1508     BSF PORTD, 0x2                     1127:      BSF USB_CS
06FC  0008     RETURN                             1128:      RETURN
                                                  1129:  
                                                  1130:  global _usb_disk_mount
                                                  1131:  _usb_disk_mount
06FD  1108     BCF PORTD, 0x2                     1132:      BCF USB_CS
06FE  3031     MOVLW 0x31                         1133:      MOVLW 0x31
06FF  263F     CALL 0x63F                         1134:      CALL SPI_TRANSFER
0700  1508     BSF PORTD, 0x2                     1135:      BSF USB_CS
0701  0008     RETURN                             1136:      RETURN
                                                  1137:  
                                                  1138:  global _usb_disk_connect
                                                  1139:  _usb_disk_connect
0702  1108     BCF PORTD, 0x2                     1140:      BCF USB_CS
0703  3030     MOVLW 0x30                         1141:      MOVLW 0x30
0704  263F     CALL 0x63F                         1142:      CALL SPI_TRANSFER
0705  1508     BSF PORTD, 0x2                     1143:      BSF USB_CS
0706  0008     RETURN                             1144:      RETURN
                                                  1145:      
                                                  1146:  global _usb_set_mode
                                                  1147:  _usb_set_mode
0707  00BE     MOVWF 0x3E                         1148:      MOVWF _temp5
0708  1108     BCF PORTD, 0x2                     1149:      BCF USB_CS
0709  3015     MOVLW 0x15                         1150:      MOVLW 0X15
070A  263F     CALL 0x63F                         1151:      CALL SPI_TRANSFER
070B  083E     MOVF 0x3E, W                       1152:      MOVF _temp5, W
070C  263F     CALL 0x63F                         1153:      CALL SPI_TRANSFER
070D  1508     BSF PORTD, 0x2                     1154:      BSF USB_CS
070E  0008     RETURN                             1155:      RETURN
                                                  1156:  
                                                  1157:  global _usb_get_version
                                                  1158:  _usb_get_version
070F  1108     BCF PORTD, 0x2                     1159:      BCF USB_CS
0710  3001     MOVLW 0x1                          1160:      MOVLW 0x01
0711  263F     CALL 0x63F                         1161:      CALL SPI_TRANSFER
0712  0100     CLRW                               1162:      CLRW
0713  263F     CALL 0x63F                         1163:      CALL SPI_TRANSFER
0714  1508     BSF PORTD, 0x2                     1164:      BSF USB_CS
0715  0008     RETURN                             1165:      RETURN
                                                  1166:  
                                                  1167:  USB_WAIT_STATUS
0716  1123     BCF 0x23, 0x2                      1168:      BCF F_TIMEOUT
0717  0AA6     INCF 0x26, F                       1169:      INCF _timeout_high, F
0718  0AA5     INCF 0x25, F                       1170:      INCF _timeout_low, F
                                                  1171:  UWS_LOOP
0719  3001     MOVLW 0x1                          1172:      MOVLW 0x01
071A  2660     CALL 0x660                         1173:      CALL _delay_millis   ;DELAY 1 MILLISECOND
071B  26F6     CALL 0x6F6                         1174:      CALL _usb_get_status
071C  00BE     MOVWF 0x3E                         1175:      MOVWF _temp5
071D  0629     XORWF 0x29, W                      1176:      XORWF _usb_target_status, W
071E  1903     BTFSC STATUS, 0x2                  1177:      BTFSC ZERO
071F  3400     RETLW 0x0                          1178:      RETLW 0x00
0720  0BA5     DECFSZ 0x25, F                     1179:      DECFSZ _timeout_low, F
0721  2F19     GOTO 0x719                         1180:      GOTO UWS_LOOP
0722  0BA6     DECFSZ 0x26, F                     1181:      DECFSZ _timeout_high, F
0723  2F19     GOTO 0x719                         1182:      GOTO UWS_LOOP
0724  1523     BSF 0x23, 0x2                      1183:      BSF F_TIMEOUT    ;SET FLAG TO INDICATE A TIMEOUT
0725  083E     MOVF 0x3E, W                       1184:      MOVF _temp5, W
0726  0008     RETURN                             1185:      RETURN
                                                  1186:  
                                                  1187:  global _usb_disk_capacity
                                                  1188:  _usb_disk_capacity
0727  1108     BCF PORTD, 0x2                     1189:      BCF USB_CS
0728  303E     MOVLW 0x3E                         1190:      MOVLW 0x3E
0729  263F     CALL 0x63F                         1191:      CALL SPI_TRANSFER   ;SEND DISK CAPACITY COMMAND
072A  1508     BSF PORTD, 0x2                     1192:      BSF USB_CS
072B  3014     MOVLW 0x14                         1193:      MOVLW 0x14
072C  00A9     MOVWF 0x29                         1194:      MOVWF _usb_target_status ;SET TARGET STATUS TO 14 (DEVICE READY)
072D  01A6     CLRF 0x26                          1195:      CLRF _timeout_high
072E  3064     MOVLW 0x64                         1196:      MOVLW 100
072F  00A5     MOVWF 0x25                         1197:      MOVWF _timeout_low   ;SET TIMEOUT TO 16 MILLISECONDS
0730  2716     CALL 0x716                         1198:      CALL USB_WAIT_STATUS
0731  1923     BTFSC 0x23, 0x2                    1199:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0732  0008     RETURN                             1200:      RETURN
0733  1108     BCF PORTD, 0x2                     1201:      BCF USB_CS
0734  3027     MOVLW 0x27                         1202:      MOVLW 0x27
0735  263F     CALL 0x63F                         1203:      CALL SPI_TRANSFER   ;SEND READ DATA0 COMMAND
0736  0100     CLRW                               1204:      CLRW
0737  263F     CALL 0x63F                         1205:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO READ (ALWAYS 4)
0738  0100     CLRW                               1206:      CLRW
0739  263F     CALL 0x63F                         1207:      CALL SPI_TRANSFER   ;GET LSB OF DISK SIZE
                                                  1208:  ;THE DISK SIZE IS GIVEN IN SECTORS, SO TO GET THE NUMBER OF BYTES WE MULTIPLY BY 512 WHICH IS THE SAME AS SHIFTING BY 9
                                                  1209:  ;THIS MEANS THE LSB IS ALWAYS ZERO AND THERE IS NO NEED TO HAVE A REGISTER FOR IT.
                                                  1210:  ;INSTEAD WE PUT THE LSB IN USB_DRIVE_SIZE1 WHICH CORRESPONDS TO SHIFTING BY 8.
073A  00F4     MOVWF 0x74                         1211:      MOVWF _usb_drive_size1
073B  0100     CLRW                               1212:      CLRW
073C  263F     CALL 0x63F                         1213:      CALL SPI_TRANSFER
073D  00F3     MOVWF 0x73                         1214:      MOVWF _usb_drive_size2
073E  0100     CLRW                               1215:      CLRW
073F  263F     CALL 0x63F                         1216:      CALL SPI_TRANSFER
0740  00F2     MOVWF 0x72                         1217:      MOVWF _usb_drive_size3
0741  0100     CLRW                               1218:      CLRW
0742  263F     CALL 0x63F                         1219:      CALL SPI_TRANSFER
0743  1508     BSF PORTD, 0x2                     1220:      BSF USB_CS
0744  1003     BCF STATUS, 0x0                    1221:      BCF CARRY   ;CLEAR CARRY FLAG
0745  0DF4     RLF 0x74, F                        1222:      RLF _usb_drive_size1, F
0746  0DF3     RLF 0x73, F                        1223:      RLF _usb_drive_size2, F
0747  0DF2     RLF 0x72, F                        1224:      RLF _usb_drive_size3, F
0748  0008     RETURN                             1225:      RETURN
                                                  1226:  
                                                  1227:  global _usb_disk_query
                                                  1228:  _usb_disk_query
0749  1108     BCF PORTD, 0x2                     1229:      BCF USB_CS
074A  303F     MOVLW 0x3F                         1230:      MOVLW 0x3F
074B  263F     CALL 0x63F                         1231:      CALL SPI_TRANSFER   ;SEND DISK QUERY COMMAND
074C  1508     BSF PORTD, 0x2                     1232:      BSF USB_CS
074D  3014     MOVLW 0x14                         1233:      MOVLW 0x14
074E  00A9     MOVWF 0x29                         1234:      MOVWF _usb_target_status ;SET TARGET STATUS TO 14 (DEVICE READY)
074F  01A6     CLRF 0x26                          1235:      CLRF _timeout_high
0750  3064     MOVLW 0x64                         1236:      MOVLW 100
0751  00A5     MOVWF 0x25                         1237:      MOVWF _timeout_low   ;SET TIMEOUT TO 16 MILLISECONDS
0752  2716     CALL 0x716                         1238:      CALL USB_WAIT_STATUS
0753  1923     BTFSC 0x23, 0x2                    1239:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0754  0008     RETURN                             1240:      RETURN
0755  1108     BCF PORTD, 0x2                     1241:      BCF USB_CS
0756  3027     MOVLW 0x27                         1242:      MOVLW 0x27
0757  263F     CALL 0x63F                         1243:      CALL SPI_TRANSFER   ;SEND READ DATA0 COMMAND
0758  0100     CLRW                               1244:      CLRW
0759  263F     CALL 0x63F                         1245:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO READ (ALWAYS 8)
075A  0100     CLRW                               1246:      CLRW
075B  263F     CALL 0x63F                         1247:      CALL SPI_TRANSFER   ;GET LSB OF LOGICAL BYTES
075C  00AC     MOVWF 0x2C                         1248:      MOVWF _usb_logical_bytes1
075D  0100     CLRW                               1249:      CLRW
075E  263F     CALL 0x63F                         1250:      CALL SPI_TRANSFER
075F  00AB     MOVWF 0x2B                         1251:      MOVWF _usb_logical_bytes2
0760  0100     CLRW                               1252:      CLRW
0761  263F     CALL 0x63F                         1253:      CALL SPI_TRANSFER
0762  00AA     MOVWF 0x2A                         1254:      MOVWF _usb_logical_bytes3
0763  0100     CLRW                               1255:      CLRW
0764  263F     CALL 0x63F                         1256:      CALL SPI_TRANSFER   ;DISCARD MSB OF LOGICAL BYTES
0765  0100     CLRW                               1257:      CLRW
0766  263F     CALL 0x63F                         1258:      CALL SPI_TRANSFER   ;GET LSB OF FREE SPACE
0767  00AF     MOVWF 0x2F                         1259:      MOVWF _usb_free_space1
0768  0100     CLRW                               1260:      CLRW
0769  263F     CALL 0x63F                         1261:      CALL SPI_TRANSFER
076A  00AE     MOVWF 0x2E                         1262:      MOVWF _usb_free_space2
076B  0100     CLRW                               1263:      CLRW
076C  263F     CALL 0x63F                         1264:      CALL SPI_TRANSFER
076D  00AD     MOVWF 0x2D                         1265:      MOVWF _usb_free_space3
076E  0100     CLRW                               1266:      CLRW
076F  263F     CALL 0x63F                         1267:      CALL SPI_TRANSFER   ;DISCARD MSB OF FREE SPACE
0770  1508     BSF PORTD, 0x2                     1268:      BSF USB_CS
0771  1003     BCF STATUS, 0x0                    1269:      BCF CARRY
0772  0DAC     RLF 0x2C, F                        1270:      RLF _usb_logical_bytes1, F
0773  0DAB     RLF 0x2B, F                        1271:      RLF _usb_logical_bytes2, F
0774  0DAA     RLF 0x2A, F                        1272:      RLF _usb_logical_bytes3, F
0775  1003     BCF STATUS, 0x0                    1273:      BCF CARRY
0776  0DAF     RLF 0x2F, F                        1274:      RLF _usb_free_space1, F
0777  0DAE     RLF 0x2E, F                        1275:      RLF _usb_free_space2, F
0778  0DAD     RLF 0x2D, F                        1276:      RLF _usb_free_space3, F
0779  0008     RETURN                             1277:      RETURN
                                                  1278:  
                                                  1279:  ;USB_WRITE_TEST_DATA
                                                  1280:  ;    CLRF S_REG_LOW
                                                  1281:  ;    CLRF S_REG_HIGH
                                                  1282:  ;    BCF FLAG_REG, 0 ;INITIALIZE PSUEDO-RANDOM DATA GENERATOR
                                                  1283:  ;    CALL USB_FILE_CREATE
                                                  1284:  ;    MOVLW H'B8'
                                                  1285:  ;    MOVWF TIMEOUT_LOW
                                                  1286:  ;    MOVLW H'0B'
                                                  1287:  ;    MOVWF TIMEOUT_HIGH  ;SET TIMEOUT TO 3 SECONDS
                                                  1288:  ;    MOVLW H'14'
                                                  1289:  ;    MOVWF USB_TARGET_STATUS ;SET TARGET STATUS TO 0x14
                                                  1290:  ;    CALL USB_WAIT_STATUS
                                                  1291:  ;    MOVLW H'04'
                                                  1292:  ;    MOVWF GEN_COUNT6
                                                  1293:  ;UWTD_L4
                                                  1294:  ;    CLRF USB_BYTES_SENT_HIGH
                                                  1295:  ;    CLRF USB_BYTES_SENT_LOW
                                                  1296:  ;    MOVLW H'80'
                                                  1297:  ;    MOVWF USB_FILE_SIZE_HIGH
                                                  1298:  ;    CLRF USB_FILE_SIZE_LOW
                                                  1299:  ;    CALL USB_BYTE_WRITE
                                                  1300:  ;    MOVLW H'0B'
                                                  1301:  ;    MOVWF TIMEOUT_HIGH
                                                  1302:  ;    MOVLW H'B8'
                                                  1303:  ;    MOVWF TIMEOUT_LOW
                                                  1304:  ;    MOVLW H'1E'
                                                  1305:  ;    MOVWF USB_TARGET_STATUS
                                                  1306:  ;    CALL USB_WAIT_STATUS
                                                  1307:  ;UWTD_ND_LOOP
                                                  1308:  ;    BCF USB_CS
                                                  1309:  ;    MOVLW H'2D'
                                                  1310:  ;    MOVWF DREG
                                                  1311:  ;    CALL SPI_TRANSFER   ;SEND WR_REQ_DATA
                                                  1312:  ;    CLRF DREG
                                                  1313:  ;    CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO SEND
                                                  1314:  ;    MOVF DREG, W
                                                  1315:  ;    MOVWF GEN_COUNT5
                                                  1316:  ;UWTD_WR_LOOP
                                                  1317:  ;    CALL GET_TEST_BYTE
                                                  1318:  ;    CALL SPI_TRANSFER
                                                  1319:  ;    INCFSZ USB_BYTES_SENT_LOW, F
                                                  1320:  ;    DECF USB_BYTES_SENT_HIGH, F
                                                  1321:  ;    INCF USB_BYTES_SENT_HIGH, F
                                                  1322:  ;    MOVF USB_BYTES_SENT_HIGH, W
                                                  1323:  ;    XORWF USB_FILE_SIZE_HIGH, W
                                                  1324:  ;    BTFSS STATUS, Z
                                                  1325:  ;    GOTO UWTD_NB
                                                  1326:  ;    MOVF USB_BYTES_SENT_LOW, W
                                                  1327:  ;    XORWF USB_FILE_SIZE_LOW, W
                                                  1328:  ;    BTFSC STATUS, Z
                                                  1329:  ;    GOTO UWTD_BREAK
                                                  1330:  ;UWTD_NB
                                                  1331:  ;    DECFSZ GEN_COUNT5, F
                                                  1332:  ;    GOTO UWTD_WR_LOOP
                                                  1333:  ;UWTD_BREAK
                                                  1334:  ;    BSF USB_CS
                                                  1335:  ;    MOVLW H'0B'
                                                  1336:  ;    MOVWF TIMEOUT_HIGH
                                                  1337:  ;    MOVLW H'B8'
                                                  1338:  ;    MOVWF TIMEOUT_LOW
                                                  1339:  ;    MOVLW H'1E'
                                                  1340:  ;    MOVWF USB_TARGET_STATUS
                                                  1341:  ;    CALL USB_WAIT_STATUS
                                                  1342:  ;    MOVF USB_BYTES_SENT_HIGH, W
                                                  1343:  ;    XORWF USB_FILE_SIZE_HIGH, W
                                                  1344:  ;    BTFSS STATUS, Z
                                                  1345:  ;    GOTO UWTD_NE
                                                  1346:  ;    MOVF USB_BYTES_SENT_LOW, W
                                                  1347:  ;    XORWF USB_FILE_SIZE_LOW, W
                                                  1348:  ;    BTFSC STATUS, Z
                                                  1349:  ;    GOTO UWTD_EQUAL
                                                  1350:  ;UWTD_NE
                                                  1351:  ;    CALL USB_BYTE_WR_GO
                                                  1352:  ;    MOVLW H'0B'
                                                  1353:  ;    MOVWF TIMEOUT_HIGH
                                                  1354:  ;    MOVLW H'B8'
                                                  1355:  ;    MOVWF TIMEOUT_LOW
                                                  1356:  ;    MOVLW H'1E'
                                                  1357:  ;    MOVWF USB_TARGET_STATUS
                                                  1358:  ;    CALL USB_WAIT_STATUS
                                                  1359:  ;    GOTO UWTD_ND_LOOP
                                                  1360:  ;UWTD_EQUAL
                                                  1361:  ;    CALL USB_BYTE_WR_GO
                                                  1362:  ;    MOVLW H'0B'
                                                  1363:  ;    MOVWF TIMEOUT_HIGH
                                                  1364:  ;    MOVLW H'B8'
                                                  1365:  ;    MOVWF TIMEOUT_LOW
                                                  1366:  ;    MOVLW H'14'
                                                  1367:  ;    MOVWF USB_TARGET_STATUS
                                                  1368:  ;    CALL USB_WAIT_STATUS
                                                  1369:  ;    DECFSZ GEN_COUNT6, F
                                                  1370:  ;    GOTO UWTD_L4
                                                  1371:  ;    CALL USB_FILE_CLOSE
                                                  1372:  ;    MOVLW H'0B'
                                                  1373:  ;    MOVWF TIMEOUT_HIGH
                                                  1374:  ;    MOVLW H'B8'
                                                  1375:  ;    MOVWF TIMEOUT_LOW
                                                  1376:  ;    MOVLW H'14'
                                                  1377:  ;    MOVWF USB_TARGET_STATUS
                                                  1378:  ;    CALL USB_WAIT_STATUS
                                                  1379:  ;    RETURN
                                                  1380:  
                                                  1381:  ;USB_FILE_WRITE
                                                  1382:  ;    CALL USB_SET_FILE_NAME
                                                  1383:  ;    MOVLW H'10'
                                                  1384:  ;    MOVWF TIMEOUT_LOW
                                                  1385:  ;    CLRF TIMEOUT_HIGH
                                                  1386:  ;    MOVLW H'14'
                                                  1387:  ;    MOVWF USB_TARGET_STATUS
                                                  1388:  ;    CALL USB_WAIT_STATUS
                                                  1389:  ;    CALL USB_FILE_CREATE
                                                  1390:  ;    MOVLW H'B8'
                                                  1391:  ;    MOVWF TIMEOUT_LOW
                                                  1392:  ;    MOVLW H'0B'
                                                  1393:  ;    MOVWF TIMEOUT_HIGH  ;SET TIMEOUT TO 3 SECONDS
                                                  1394:  ;    MOVLW H'14'
                                                  1395:  ;    MOVWF USB_TARGET_STATUS ;SET TARGET STATUS TO 0x14
                                                  1396:  ;    CALL USB_WAIT_STATUS
                                                  1397:  ;    CLRF USB_BYTES_SENT_HIGH
                                                  1398:  ;    CLRF USB_BYTES_SENT_LOW
                                                  1399:  ;    MOVF TAPE_SIZE_HIGH, W
                                                  1400:  ;    MOVWF USB_FILE_SIZE_HIGH
                                                  1401:  ;    MOVF TAPE_SIZE_LOW, W
                                                  1402:  ;    MOVWF USB_FILE_SIZE_LOW
                                                  1403:  ;    CALL USB_BYTE_WRITE
                                                  1404:  ;    MOVLW H'0B'
                                                  1405:  ;    MOVWF TIMEOUT_HIGH
                                                  1406:  ;    MOVLW H'B8'
                                                  1407:  ;    MOVWF TIMEOUT_LOW
                                                  1408:  ;    MOVLW H'1E'
                                                  1409:  ;    MOVWF USB_TARGET_STATUS
                                                  1410:  ;    CALL USB_WAIT_STATUS
                                                  1411:  ;UFW_ND_LOOP
                                                  1412:  ;    CALL BUFF_INIT
                                                  1413:  ;    MOVF USB_BYTES_SENT_LOW, W
                                                  1414:  ;    MOVWF RAM_ADDRESS_L
                                                  1415:  ;    MOVF USB_BYTES_SENT_HIGH, W
                                                  1416:  ;    MOVWF RAM_ADDRESS_H
                                                  1417:  ;    DECF RAM_ADDRESS_L, F
                                                  1418:  ;    BTFSS STATUS, C
                                                  1419:  ;    DECF RAM_ADDRESS_H, F
                                                  1420:  ;    CALL BUFF_FILL
                                                  1421:  ;    BCF USB_CS
                                                  1422:  ;    MOVLW H'2D'
                                                  1423:  ;    MOVWF DREG
                                                  1424:  ;    CALL SPI_TRANSFER   ;SEND WR_REQ_DATA
                                                  1425:  ;    CLRF DREG
                                                  1426:  ;    CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO SEND
                                                  1427:  ;    MOVF DREG, W
                                                  1428:  ;    MOVWF GEN_COUNT5
                                                  1429:  ;UFW_WR_LOOP
                                                  1430:  ;    CALL BUFF_READ_AUTO
                                                  1431:  ;    CALL SPI_TRANSFER
                                                  1432:  ;    INCFSZ USB_BYTES_SENT_LOW, F
                                                  1433:  ;    DECF USB_BYTES_SENT_HIGH, F
                                                  1434:  ;    INCF USB_BYTES_SENT_HIGH, F
                                                  1435:  ;    MOVF USB_BYTES_SENT_HIGH, W
                                                  1436:  ;    XORWF USB_FILE_SIZE_HIGH, W
                                                  1437:  ;    BTFSS STATUS, Z
                                                  1438:  ;    GOTO UFW_NB
                                                  1439:  ;    MOVF USB_BYTES_SENT_LOW, W
                                                  1440:  ;    XORWF USB_FILE_SIZE_LOW, W
                                                  1441:  ;    BTFSC STATUS, Z
                                                  1442:  ;    GOTO UFW_BREAK
                                                  1443:  ;UFW_NB
                                                  1444:  ;    DECFSZ GEN_COUNT5, F
                                                  1445:  ;    GOTO UFW_WR_LOOP
                                                  1446:  ;UFW_BREAK
                                                  1447:  ;    BSF USB_CS
                                                  1448:  ;    MOVLW H'0B'
                                                  1449:  ;    MOVWF TIMEOUT_HIGH
                                                  1450:  ;    MOVLW H'B8'
                                                  1451:  ;    MOVWF TIMEOUT_LOW
                                                  1452:  ;    MOVLW H'1E'
                                                  1453:  ;    MOVWF USB_TARGET_STATUS
                                                  1454:  ;    CALL USB_WAIT_STATUS
                                                  1455:  ;    MOVF USB_BYTES_SENT_HIGH, W
                                                  1456:  ;    XORWF USB_FILE_SIZE_HIGH, W
                                                  1457:  ;    BTFSS STATUS, Z
                                                  1458:  ;    GOTO UFW_NE
                                                  1459:  ;    MOVF USB_BYTES_SENT_LOW, W
                                                  1460:  ;    XORWF USB_FILE_SIZE_LOW, W
                                                  1461:  ;    BTFSC STATUS, Z
                                                  1462:  ;    GOTO UFW_EQUAL
                                                  1463:  ;UFW_NE
                                                  1464:  ;    CALL USB_BYTE_WR_GO
                                                  1465:  ;    MOVLW H'0B'
                                                  1466:  ;    MOVWF TIMEOUT_HIGH
                                                  1467:  ;    MOVLW H'B8'
                                                  1468:  ;    MOVWF TIMEOUT_LOW
                                                  1469:  ;    MOVLW H'1E'
                                                  1470:  ;    MOVWF USB_TARGET_STATUS
                                                  1471:  ;    CALL USB_WAIT_STATUS
                                                  1472:  ;    GOTO UFW_ND_LOOP
                                                  1473:  ;UFW_EQUAL
                                                  1474:  ;    CALL USB_BYTE_WR_GO
                                                  1475:  ;    MOVLW H'0B'
                                                  1476:  ;    MOVWF TIMEOUT_HIGH
                                                  1477:  ;    MOVLW H'B8'
                                                  1478:  ;    MOVWF TIMEOUT_LOW
                                                  1479:  ;    MOVLW H'14'
                                                  1480:  ;    MOVWF USB_TARGET_STATUS
                                                  1481:  ;    CALL USB_WAIT_STATUS
                                                  1482:  ;    CALL USB_FILE_CLOSE
                                                  1483:  ;    MOVLW H'0B'
                                                  1484:  ;    MOVWF TIMEOUT_HIGH
                                                  1485:  ;    MOVLW H'B8'
                                                  1486:  ;    MOVWF TIMEOUT_LOW
                                                  1487:  ;    MOVLW H'14'
                                                  1488:  ;    MOVWF USB_TARGET_STATUS
                                                  1489:  ;    CALL USB_WAIT_STATUS
                                                  1490:  ;    RETURN
                                                  1491:  
                                                  1492:  global _usb_file_read
                                                  1493:  _usb_file_read
077A  30FF     MOVLW 0xFF                         1494:      MOVLW 0xFF
077B  00BD     MOVWF 0x3D                         1495:      MOVWF _ram_address_h
077C  00BC     MOVWF 0x3C                         1496:      MOVWF _ram_address_l ;RAM ADDRESS WILL OVERFLOW BEFORE FIRST WRITE
077D  26A9     CALL 0x6A9                         1497:      CALL USB_BYTE_READ
077E  01A6     CLRF 0x26                          1498:      CLRF _timeout_high
077F  3080     MOVLW 0x80                         1499:      MOVLW 0x80
0780  00A5     MOVWF 0x25                         1500:      MOVWF _timeout_low
0781  301D     MOVLW 0x1D                         1501:      MOVLW 0x1D
0782  00A9     MOVWF 0x29                         1502:      MOVWF _usb_target_status
0783  2716     CALL 0x716                         1503:      CALL USB_WAIT_STATUS
0784  1923     BTFSC 0x23, 0x2                    1504:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0785  0008     RETURN                             1505:      RETURN
                                                  1506:  UFR_LOOP
0786  26B7     CALL 0x6B7                         1507:      CALL USB_READ_DATA0
0787  3001     MOVLW 0x1                          1508:      MOVLW 0x01
0788  2660     CALL 0x660                         1509:      CALL _delay_millis
0789  0832     MOVF 0x32, W                       1510:      MOVF _usb_file_size_low, W
078A  0630     XORWF 0x30, W                      1511:      XORWF _usb_bytes_read_low, W
078B  1D03     BTFSS STATUS, 0x2                  1512:      BTFSS ZERO
078C  2F91     GOTO 0x791                         1513:      GOTO UFR_GO
078D  0833     MOVF 0x33, W                       1514:      MOVF _usb_file_size_high, W
078E  0631     XORWF 0x31, W                      1515:      XORWF _usb_bytes_read_high, W
078F  1903     BTFSC STATUS, 0x2                  1516:      BTFSC ZERO
0790  2F9B     GOTO 0x79B                         1517:      GOTO UFR_DONE
                                                  1518:  UFR_GO
0791  26B2     CALL 0x6B2                         1519:      CALL USB_BYTE_READ_GO
0792  01A6     CLRF 0x26                          1520:      CLRF _timeout_high
0793  30FF     MOVLW 0xFF                         1521:      MOVLW 0xFF
0794  00A5     MOVWF 0x25                         1522:      MOVWF _timeout_low
0795  301D     MOVLW 0x1D                         1523:      MOVLW 0x1D
0796  00A9     MOVWF 0x29                         1524:      MOVWF _usb_target_status
0797  2716     CALL 0x716                         1525:      CALL USB_WAIT_STATUS
0798  1923     BTFSC 0x23, 0x2                    1526:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0799  0008     RETURN                             1527:      RETURN
079A  2F86     GOTO 0x786                         1528:      GOTO UFR_LOOP
                                                  1529:  UFR_DONE
079B  0832     MOVF 0x32, W                       1530:      MOVF _usb_file_size_low, W
079C  00B4     MOVWF 0x34                         1531:      MOVWF _tape_size_low
079D  0833     MOVF 0x33, W                       1532:      MOVF _usb_file_size_high, W
079E  00B5     MOVWF 0x35                         1533:      MOVWF _tape_size_high
079F  1108     BCF PORTD, 0x2                     1534:      BCF USB_CS
07A0  3036     MOVLW 0x36                         1535:      MOVLW 0x36
07A1  263F     CALL 0x63F                         1536:      CALL SPI_TRANSFER   ;SEND FILE CLOSE COMMAND
07A2  0100     CLRW                               1537:      CLRW
07A3  263F     CALL 0x63F                         1538:      CALL SPI_TRANSFER   ;FILE CLOSE PARAMETER IS 0 (DO NOT UPDATE FILE SIZE)
07A4  1508     BSF PORTD, 0x2                     1539:      BSF USB_CS
07A5  01A6     CLRF 0x26                          1540:      CLRF _timeout_high
07A6  3080     MOVLW 0x80                         1541:      MOVLW 0x80
07A7  00A5     MOVWF 0x25                         1542:      MOVWF _timeout_low
07A8  3014     MOVLW 0x14                         1543:      MOVLW 0x14
07A9  00A9     MOVWF 0x29                         1544:      MOVWF _usb_target_status
07AA  2716     CALL 0x716                         1545:      CALL USB_WAIT_STATUS
07AB  0008     RETURN                             1546:      RETURN
                                                  1547:      
                                                  1548:  _fifo_init
07AC  01F0     CLRF 0x70                          1549:      CLRF _fifo_write_idx
07AD  01A1     CLRF 0x21                          1550:      CLRF _fifo_write_bank
07AE  01F1     CLRF 0x71                          1551:      CLRF _fifo_read_idx
07AF  01A2     CLRF 0x22                          1552:      CLRF _fifo_read_bank
07B0  01A0     CLRF 0x20                          1553:      CLRF _fifo_num_bytes
07B1  0008     RETURN                             1554:      RETURN
                                                  1555:      
                                                  1556:  _fifo_tf_to_mem
07B2  08A0     MOVF 0x20, F                       1557:      MOVF _fifo_num_bytes, F
07B3  1903     BTFSC STATUS, 0x2                  1558:      BTFSC ZERO
07B4  0008     RETURN                             1559:      RETURN
07B5  224A     CALL 0x24A                         1560:      CALL _fifo_pop
07B6  2590     CALL 0x590                         1561:      CALL RAM_WRITE_AUTO
07B7  2FB2     GOTO 0x7B2                         1562:      GOTO _fifo_tf_to_mem
                                                  1563:  
                                                  1564:  _fifo_tf_from_mem
07B8  0920     COMF 0x20, W                       1565:      COMF _fifo_num_bytes, W
07B9  1903     BTFSC STATUS, 0x2                  1566:      BTFSC ZERO
07BA  0008     RETURN                             1567:      RETURN
07BB  256A     CALL 0x56A                         1568:      CALL RAM_READ_AUTO
07BC  2288     CALL 0x288                         1569:      CALL _fifo_push
07BD  2FB8     GOTO 0x7B8                         1570:      GOTO _fifo_tf_from_mem

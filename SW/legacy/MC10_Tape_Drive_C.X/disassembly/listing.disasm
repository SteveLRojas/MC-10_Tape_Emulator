Disassembly Listing for MC10_Tape_Drive_C
Generated From:
/home/dragomir/repos/MC-10_Tape_Emulator/MC10_Tape_Drive_C.X/dist/default/production/MC10_Tape_Drive_C.X.production.elf
Jun 10, 2023 6:15:36 PM

---  /home/dragomir/repos/MC-10_Tape_Emulator/MC10_Tape_Drive_C.X/main.c  -------------------------------
1:             /*
2:              * File:   main.c
3:              * Author: Steve
4:              *
5:              * Created on August 25, 2022, 1:44 PM
6:              */
7:             // CONFIG1
8:             #pragma config FOSC = XT        // Oscillator Selection bits (XT oscillator)
9:             #pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
10:            #pragma config PWRTE = ON       // Power-up Timer Enable bit (PWRT enabled)
11:            #pragma config MCLRE = ON       // MCLR/VPP/RE3 Pin Function Select bit (MCLR/VPP/RE3 pin function is MCLR)
12:            #pragma config BOREN = ON       // Brown-out Reset Enable bit (Enabled)
13:            #pragma config BORV = 42        // Brown-out Reset Voltage bits (VBOR set to 4.2V)
14:            #pragma config CCP2MX = RC1     // CCP2 Multiplex bit (CCP2 is on RC1)
15:            #pragma config CP = OFF         // Flash Program Memory Code Protection bits (Code protection off)
16:            
17:            // CONFIG2
18:            #pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
19:            #pragma config IESO = OFF       // Internal External Switchover bit (Internal External Switchover mode disabled)
20:            #pragma config BORSEN = OFF     // Brown-out Reset Software Enable bit (Disabled)
21:            
22:            #define MHz *1000000UL
23:            #define _XTAL_FREQ (4 MHz)
24:            
25:            #include <xc.h>
26:            #include <pic16f747.h>
27:            
28:            //ASM globals
29:            //unsigned char dreg;
30:            unsigned char temp1;
31:            unsigned char temp2;
32:            unsigned char temp3;
33:            unsigned char temp4;
34:            unsigned char temp5;
35:            unsigned char ram_address_h;
36:            unsigned char ram_address_l;
37:            unsigned char sdel_count;
38:            unsigned char ldel_count;
39:            unsigned char gen_count;
40:            unsigned char gen_count2;
41:            unsigned char gen_count3;
42:            unsigned char gen_count4;
43:            unsigned char gen_count5;
44:            unsigned char gen_count6;
45:            unsigned char tape_size_high;
46:            unsigned char tape_size_low;
47:            unsigned char bit_count;
48:            unsigned char hex_char_high;
49:            unsigned char hex_char_low;
50:            unsigned char usb_bytes_sent_high;
51:            unsigned char usb_bytes_sent_low;
52:            unsigned char usb_file_size_high;
53:            unsigned char usb_file_size_low;
54:            unsigned char usb_bytes_read_high;
55:            unsigned char usb_bytes_read_low;
56:            unsigned char usb_drive_size1;
57:            unsigned char usb_drive_size2;
58:            unsigned char usb_drive_size3;
59:            unsigned char usb_free_space1;
60:            unsigned char usb_free_space2;
61:            unsigned char usb_free_space3;
62:            unsigned char usb_logical_bytes1;
63:            unsigned char usb_logical_bytes2;
64:            unsigned char usb_logical_bytes3;
65:            unsigned char usb_target_status;
66:            unsigned char s_reg_high;
67:            unsigned char s_reg_low;
68:            unsigned char timeout_high;
69:            unsigned char timeout_low;
70:            unsigned char delay_counter;
71:            unsigned char flag_reg;
72:            unsigned char fifo_read_idx;
73:            unsigned char fifo_read_bank;
74:            unsigned char fifo_write_idx;
75:            unsigned char fifo_write_bank;
76:            unsigned char fifo_num_bytes;
77:            
78:            unsigned char tape_name[8] = {'D', 'E', 'R', 'G', 'A', 'N', 'Q', 'Q'};
79:            
80:            //ASM function declarations
81:            //void interrupt tape_int(void);
82:            void initialize();
83:            void mem_clear();
84:            void mem_dump();
85:            void file_dump();
86:            unsigned char uart_read();
87:            void uart_send(unsigned char);
88:            void lcd_putc(unsigned char);
89:            void lcd_line2();
90:            void lcd_clear2();
91:            void print_name();
92:            void delay_millis(unsigned char);
93:            void print_test_data();
94:            void usb_reset_all();
95:            void usb_set_file_name();
96:            void usb_file_open();
97:            void usb_file_close();
98:            void usb_get_file_size();
99:            unsigned char usb_check_exists(unsigned char);
100:           void usb_file_create();
101:           unsigned char usb_get_status();
102:           void usb_disk_mount();
103:           void usb_disk_connect();
104:           void usb_set_mode(unsigned char);
105:           unsigned char usb_get_version();
106:           void usb_disk_capacity();
107:           void usb_disk_query();
108:           void usb_write_test_data();
109:           void usb_file_write();
110:           unsigned char usb_file_read();
111:           
112:           //C globals
113:           unsigned char fifo_bank_A[64];
114:           unsigned char fifo_bank_B[96];
115:           unsigned char fifo_bank_C[96];
116:           
117:           const char str_timeout[] = "Timeout: ";
118:           const char str_cmd_mode[] = "Command mode\n";
119:           
120:           const unsigned char hex_table[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
121:           
122:           
123:           unsigned char fifo_push(unsigned char data)
0798  00F8     MOVWF data
124:           {
125:               switch(fifo_write_bank)
0799  2FB0     GOTO 0x7B0
07B0  1283     BCF STATUS, 0x5
07B1  1303     BCF STATUS, 0x6
07B2  0821     MOVF fifo_write_bank, W
07B3  3A00     XORLW 0x0
07B4  1903     BTFSC STATUS, 0x2
07B5  2F9A     GOTO 0x79A
07B6  3A01     XORLW 0x1
07B7  1903     BTFSC STATUS, 0x2
07B8  2F9A     GOTO 0x79A
07B9  3A03     XORLW 0x3
07BA  1903     BTFSC STATUS, 0x2
07BB  2FA2     GOTO 0x7A2
07BC  3A01     XORLW 0x1
07BD  1903     BTFSC STATUS, 0x2
07BE  2FA2     GOTO 0x7A2
07BF  3A07     XORLW 0x7
07C0  1903     BTFSC STATUS, 0x2
07C1  2FA2     GOTO 0x7A2
07C2  3A01     XORLW 0x1
07C3  1903     BTFSC STATUS, 0x2
07C4  2FA7     GOTO 0x7A7
07C5  3A03     XORLW 0x3
07C6  1903     BTFSC STATUS, 0x2
07C7  2FA7     GOTO 0x7A7
07C8  3A01     XORLW 0x1
07C9  1903     BTFSC STATUS, 0x2
07CA  2FA7     GOTO 0x7A7
07CB  2FCC     GOTO 0x7CC
126:               {
127:                   case 0:
128:                   case 1:
129:                       fifo_bank_A[fifo_write_idx] = data;
079A  0878     MOVF data, W
079B  00F7     MOVWF __pcstackCOMMON
079C  0870     MOVF fifo_write_idx, W
079D  3EA0     ADDLW 0xA0
079E  0084     MOVWF FSR
079F  0877     MOVF __pcstackCOMMON, W
07A0  1383     BCF STATUS, 0x7
07A1  2FAE     GOTO 0x7AE
130:                       break;
131:                   case 2:
132:                   case 3:
133:                   case 4:
134:                       fifo_bank_B[fifo_write_idx - 64] = data;
07A2  0878     MOVF data, W
07A3  00F7     MOVWF __pcstackCOMMON
07A4  0870     MOVF fifo_write_idx, W
07A5  3E50     ADDLW 0x50
07A6  2FAB     GOTO 0x7AB
135:                       break;
136:                   case 5:
137:                   case 6:
138:                   case 7:
139:                       fifo_bank_C[fifo_write_idx - (64 + 96)] = data;
07A7  0878     MOVF data, W
07A8  00F7     MOVWF __pcstackCOMMON
07A9  0870     MOVF fifo_write_idx, W
07AA  3E70     ADDLW 0x70
07AB  0084     MOVWF FSR
07AC  0877     MOVF __pcstackCOMMON, W
07AD  1783     BSF STATUS, 0x7
07AE  0080     MOVWF INDF
140:                       break;
07AF  2FCC     GOTO 0x7CC
141:               }
142:               ++fifo_write_idx;
07CC  3001     MOVLW 0x1
07CD  00F7     MOVWF __pcstackCOMMON
07CE  0877     MOVF __pcstackCOMMON, W
07CF  07F0     ADDWF fifo_write_idx, F
143:               if(!(fifo_write_idx & 0x1F))
07D0  0870     MOVF fifo_write_idx, W
07D1  391F     ANDLW 0x1F
07D2  1D03     BTFSS STATUS, 0x2
07D3  2FD8     GOTO 0x7D8
144:               {
145:                   ++fifo_write_bank;
07D4  3001     MOVLW 0x1
07D5  00F7     MOVWF __pcstackCOMMON
07D6  0877     MOVF __pcstackCOMMON, W
07D7  07A1     ADDWF fifo_write_bank, F
146:               }
147:               ++fifo_num_bytes;
07D8  3001     MOVLW 0x1
07D9  00F7     MOVWF __pcstackCOMMON
07DA  0877     MOVF __pcstackCOMMON, W
07DB  07A0     ADDWF fifo_num_bytes, F
148:               return fifo_num_bytes;
07DC  0820     MOVF fifo_num_bytes, W
149:           }
07DD  0008     RETURN
150:           
151:           unsigned char fifo_pop(void)
152:           {
153:               unsigned char temp;
154:               switch(fifo_read_bank)
05A9  2DBB     GOTO 0x5BB
05BB  1283     BCF STATUS, 0x5
05BC  1303     BCF STATUS, 0x6
05BD  0822     MOVF fifo_read_bank, W
05BE  3A00     XORLW 0x0
05BF  1903     BTFSC STATUS, 0x2
05C0  2DAA     GOTO 0x5AA
05C1  3A01     XORLW 0x1
05C2  1903     BTFSC STATUS, 0x2
05C3  2DAA     GOTO 0x5AA
05C4  3A03     XORLW 0x3
05C5  1903     BTFSC STATUS, 0x2
05C6  2DAF     GOTO 0x5AF
05C7  3A01     XORLW 0x1
05C8  1903     BTFSC STATUS, 0x2
05C9  2DAF     GOTO 0x5AF
05CA  3A07     XORLW 0x7
05CB  1903     BTFSC STATUS, 0x2
05CC  2DAF     GOTO 0x5AF
05CD  3A01     XORLW 0x1
05CE  1903     BTFSC STATUS, 0x2
05CF  2DB2     GOTO 0x5B2
05D0  3A03     XORLW 0x3
05D1  1903     BTFSC STATUS, 0x2
05D2  2DB2     GOTO 0x5B2
05D3  3A01     XORLW 0x1
05D4  1903     BTFSC STATUS, 0x2
05D5  2DB2     GOTO 0x5B2
05D6  2DD7     GOTO 0x5D7
155:               {
156:                   case 0:
157:                   case 1:
158:                       temp = fifo_bank_A[fifo_read_idx];
05AA  0871     MOVF fifo_read_idx, W
05AB  3EA0     ADDLW 0xA0
05AC  0084     MOVWF FSR
05AD  1383     BCF STATUS, 0x7
05AE  2DB6     GOTO 0x5B6
159:                       break;
160:                   case 2:
161:                   case 3:
162:                   case 4:
163:                       temp = fifo_bank_B[fifo_read_idx - 64];
05AF  0871     MOVF fifo_read_idx, W
05B0  3E50     ADDLW 0x50
05B1  2DB4     GOTO 0x5B4
164:                       break;
165:                   case 5:
166:                   case 6:
167:                   case 7:
168:                       temp = fifo_bank_C[fifo_read_idx - (64 + 96)];
05B2  0871     MOVF fifo_read_idx, W
05B3  3E70     ADDLW 0x70
05B4  0084     MOVWF FSR
05B5  1783     BSF STATUS, 0x7
05B6  0800     MOVF INDF, W
05B7  00F9     MOVWF 0x79
05B8  0879     MOVF 0x79, W
05B9  00FA     MOVWF temp
169:                       break;
05BA  2DD7     GOTO 0x5D7
170:               }
171:               ++fifo_read_idx;
05D7  3001     MOVLW 0x1
05D8  00F9     MOVWF 0x79
05D9  0879     MOVF 0x79, W
05DA  07F1     ADDWF fifo_read_idx, F
172:               if(!(fifo_read_idx & 0x1F))
05DB  0871     MOVF fifo_read_idx, W
05DC  391F     ANDLW 0x1F
05DD  1D03     BTFSS STATUS, 0x2
05DE  2DE3     GOTO 0x5E3
173:               {
174:                   ++fifo_read_bank;
05DF  3001     MOVLW 0x1
05E0  00F9     MOVWF 0x79
05E1  0879     MOVF 0x79, W
05E2  07A2     ADDWF fifo_read_bank, F
175:               }
176:               --fifo_num_bytes;
05E3  3001     MOVLW 0x1
05E4  02A0     SUBWF fifo_num_bytes, F
177:               return temp;
05E5  087A     MOVF temp, W
178:           }
05E6  0008     RETURN
179:           
180:           void byte_to_hex(unsigned char data)
0FA5  1283     BCF STATUS, 0x5
0FA6  1303     BCF STATUS, 0x6
0FA7  00CA     MOVWF data
181:           {
182:               hex_char_low = hex_table[data & (unsigned char)0x0F];
0FA8  084A     MOVF data, W
0FA9  390F     ANDLW 0xF
0FAA  3E01     ADDLW 0x1
0FAB  0084     MOVWF FSR
0FAC  118A     BCF PCLATH, 0x3
0FAD  2600     CALL 0x600
0FAE  158A     BSF PCLATH, 0x3
0FAF  00C8     MOVWF __pcstackBANK0
0FB0  0848     MOVF __pcstackBANK0, W
0FB1  00F5     MOVWF hex_char_low
183:               data = data >> 4;
0FB2  084A     MOVF data, W
0FB3  00C8     MOVWF __pcstackBANK0
0FB4  3004     MOVLW 0x4
0FB5  1003     BCF STATUS, 0x0
0FB6  0CC8     RRF __pcstackBANK0, F
0FB7  3EFF     ADDLW 0xFF
0FB8  1D03     BTFSS STATUS, 0x2
0FB9  2FB5     GOTO 0x7B5
0FBA  0848     MOVF __pcstackBANK0, W
0FBB  00C9     MOVWF 0x49
0FBC  0849     MOVF 0x49, W
0FBD  00CA     MOVWF data
184:               hex_char_high = hex_table[data & (unsigned char)0x0F];
0FBE  084A     MOVF data, W
0FBF  390F     ANDLW 0xF
0FC0  3E01     ADDLW 0x1
0FC1  0084     MOVWF FSR
0FC2  118A     BCF PCLATH, 0x3
0FC3  2600     CALL 0x600
0FC4  00C8     MOVWF __pcstackBANK0
0FC5  0848     MOVF __pcstackBANK0, W
0FC6  00F6     MOVWF hex_char_high
185:               return;
186:           }
0FC7  0008     RETURN
187:           
188:           void print_string_lcd(const char* string)
07DE  1283     BCF STATUS, 0x5
07DF  1303     BCF STATUS, 0x6
07E0  00CC     MOVWF string
189:           {
190:               unsigned char i = 0;
07E1  01CD     CLRF i
191:               while(string[i])
07E2  084D     MOVF i, W
07E3  074C     ADDWF string, W
07E4  0084     MOVWF FSR
07E5  118A     BCF PCLATH, 0x3
07E6  2600     CALL 0x600
07E7  118A     BCF PCLATH, 0x3
07E8  3A00     XORLW 0x0
07E9  1903     BTFSC STATUS, 0x2
07EA  0008     RETURN
07FA  2FE2     GOTO 0x7E2
192:               {
193:                   lcd_putc(string[i]);
07EB  084D     MOVF i, W
07EC  074C     ADDWF string, W
07ED  0084     MOVWF FSR
07EE  118A     BCF PCLATH, 0x3
07EF  2600     CALL 0x600
07F0  118A     BCF PCLATH, 0x3
07F1  118A     BCF PCLATH, 0x3
07F2  211C     CALL 0x11C
07F3  118A     BCF PCLATH, 0x3
194:                   ++i;
07F4  3001     MOVLW 0x1
07F5  1283     BCF STATUS, 0x5
07F6  1303     BCF STATUS, 0x6
07F7  00CB     MOVWF 0x4B
07F8  084B     MOVF 0x4B, W
07F9  07CD     ADDWF i, F
07FA  2FE2     GOTO 0x7E2
195:               }
196:               return;
197:           }
198:           
199:           void print_string_serial(const char* string)
0F88  1283     BCF STATUS, 0x5
0F89  1303     BCF STATUS, 0x6
0F8A  00CD     MOVWF i
200:           {
201:               unsigned char i = 0;
0F8B  01CC     CLRF string
202:               while(string[i])
0F8C  084C     MOVF string, W
0F8D  074D     ADDWF i, W
0F8E  0084     MOVWF FSR
0F8F  118A     BCF PCLATH, 0x3
0F90  2600     CALL 0x600
0F91  158A     BSF PCLATH, 0x3
0F92  3A00     XORLW 0x0
0F93  1903     BTFSC STATUS, 0x2
0F94  0008     RETURN
0FA4  2F8C     GOTO 0x78C
203:               {
204:                   uart_send(string[i]);
0F95  084C     MOVF string, W
0F96  074D     ADDWF i, W
0F97  0084     MOVWF FSR
0F98  118A     BCF PCLATH, 0x3
0F99  2600     CALL 0x600
0F9A  158A     BSF PCLATH, 0x3
0F9B  118A     BCF PCLATH, 0x3
0F9C  20B6     CALL 0xB6
0F9D  158A     BSF PCLATH, 0x3
205:                   ++i;
0F9E  3001     MOVLW 0x1
0F9F  1283     BCF STATUS, 0x5
0FA0  1303     BCF STATUS, 0x6
0FA1  00CB     MOVWF 0x4B
0FA2  084B     MOVF 0x4B, W
0FA3  07CC     ADDWF string, F
0FA4  2F8C     GOTO 0x78C
206:               }
207:               return;
208:           }
209:           
210:           void timeout_error()
211:           {
212:               print_string_serial(str_timeout);
213:               byte_to_hex(usb_target_status);
214:               uart_send(hex_char_high);
215:               uart_send(hex_char_low);
216:               uart_send('\n');
217:               return;
218:           }
219:           
220:           void print_capacity()
221:           {
222:               usb_disk_capacity();
0FC8  118A     BCF PCLATH, 0x3
0FC9  22FD     CALL 0x2FD
0FCA  158A     BSF PCLATH, 0x3
223:               print_string_serial("Physical bytes: ");
0FCB  303A     MOVLW 0x3A
0FCC  158A     BSF PCLATH, 0x3
0FCD  2788     CALL 0x788
0FCE  158A     BSF PCLATH, 0x3
224:               byte_to_hex(usb_drive_size3);
0FCF  0872     MOVF usb_drive_size3, W
0FD0  158A     BSF PCLATH, 0x3
0FD1  27A5     CALL 0x7A5
0FD2  158A     BSF PCLATH, 0x3
225:               uart_send(hex_char_high);
0FD3  0876     MOVF hex_char_high, W
0FD4  118A     BCF PCLATH, 0x3
0FD5  20B6     CALL 0xB6
0FD6  158A     BSF PCLATH, 0x3
226:               uart_send(hex_char_low);
0FD7  0875     MOVF hex_char_low, W
0FD8  118A     BCF PCLATH, 0x3
0FD9  20B6     CALL 0xB6
0FDA  158A     BSF PCLATH, 0x3
227:               byte_to_hex(usb_drive_size2);
0FDB  0873     MOVF usb_drive_size2, W
0FDC  158A     BSF PCLATH, 0x3
0FDD  27A5     CALL 0x7A5
0FDE  158A     BSF PCLATH, 0x3
228:               uart_send(hex_char_high);
0FDF  0876     MOVF hex_char_high, W
0FE0  118A     BCF PCLATH, 0x3
0FE1  20B6     CALL 0xB6
0FE2  158A     BSF PCLATH, 0x3
229:               uart_send(hex_char_low);
0FE3  0875     MOVF hex_char_low, W
0FE4  118A     BCF PCLATH, 0x3
0FE5  20B6     CALL 0xB6
0FE6  158A     BSF PCLATH, 0x3
230:               byte_to_hex(usb_drive_size1);
0FE7  0874     MOVF usb_drive_size1, W
0FE8  158A     BSF PCLATH, 0x3
0FE9  27A5     CALL 0x7A5
0FEA  158A     BSF PCLATH, 0x3
231:               uart_send(hex_char_high);
0FEB  0876     MOVF hex_char_high, W
0FEC  118A     BCF PCLATH, 0x3
0FED  20B6     CALL 0xB6
0FEE  158A     BSF PCLATH, 0x3
232:               uart_send(hex_char_low);
0FEF  0875     MOVF hex_char_low, W
0FF0  118A     BCF PCLATH, 0x3
0FF1  20B6     CALL 0xB6
0FF2  158A     BSF PCLATH, 0x3
233:               uart_send('0');
0FF3  3030     MOVLW 0x30
0FF4  118A     BCF PCLATH, 0x3
0FF5  20B6     CALL 0xB6
0FF6  158A     BSF PCLATH, 0x3
234:               uart_send('0');
0FF7  3030     MOVLW 0x30
0FF8  118A     BCF PCLATH, 0x3
0FF9  20B6     CALL 0xB6
0FFA  158A     BSF PCLATH, 0x3
235:               uart_send('\n');
0FFB  300A     MOVLW 0xA
0FFC  118A     BCF PCLATH, 0x3
0FFD  20B6     CALL 0xB6
0FFE  158A     BSF PCLATH, 0x3
236:               return; 
237:           }
238:           void print_query()
239:           {
240:               usb_disk_query();
0724  118A     BCF PCLATH, 0x3
0725  231F     CALL 0x31F
0726  118A     BCF PCLATH, 0x3
241:               print_string_serial("Logical bytes: ");
0727  304B     MOVLW 0x4B
0728  158A     BSF PCLATH, 0x3
0729  2788     CALL 0x788
072A  118A     BCF PCLATH, 0x3
242:               byte_to_hex(usb_logical_bytes3);
072B  082A     MOVF usb_logical_bytes3, W
072C  158A     BSF PCLATH, 0x3
072D  27A5     CALL 0x7A5
072E  118A     BCF PCLATH, 0x3
243:               uart_send(hex_char_high);
072F  0876     MOVF hex_char_high, W
0730  118A     BCF PCLATH, 0x3
0731  20B6     CALL 0xB6
0732  118A     BCF PCLATH, 0x3
244:               uart_send(hex_char_low);
0733  0875     MOVF hex_char_low, W
0734  118A     BCF PCLATH, 0x3
0735  20B6     CALL 0xB6
0736  118A     BCF PCLATH, 0x3
245:               byte_to_hex(usb_logical_bytes2);
0737  1283     BCF STATUS, 0x5
0738  1303     BCF STATUS, 0x6
0739  082B     MOVF usb_logical_bytes2, W
073A  158A     BSF PCLATH, 0x3
073B  27A5     CALL 0x7A5
073C  118A     BCF PCLATH, 0x3
246:               uart_send(hex_char_high);
073D  0876     MOVF hex_char_high, W
073E  118A     BCF PCLATH, 0x3
073F  20B6     CALL 0xB6
0740  118A     BCF PCLATH, 0x3
247:               uart_send(hex_char_low);
0741  0875     MOVF hex_char_low, W
0742  118A     BCF PCLATH, 0x3
0743  20B6     CALL 0xB6
0744  118A     BCF PCLATH, 0x3
248:               byte_to_hex(usb_logical_bytes1);
0745  1283     BCF STATUS, 0x5
0746  1303     BCF STATUS, 0x6
0747  082C     MOVF usb_logical_bytes1, W
0748  158A     BSF PCLATH, 0x3
0749  27A5     CALL 0x7A5
074A  118A     BCF PCLATH, 0x3
249:               uart_send(hex_char_high);
074B  0876     MOVF hex_char_high, W
074C  118A     BCF PCLATH, 0x3
074D  20B6     CALL 0xB6
074E  118A     BCF PCLATH, 0x3
250:               uart_send(hex_char_low);
074F  0875     MOVF hex_char_low, W
0750  118A     BCF PCLATH, 0x3
0751  20B6     CALL 0xB6
0752  118A     BCF PCLATH, 0x3
251:               uart_send('0');
0753  3030     MOVLW 0x30
0754  118A     BCF PCLATH, 0x3
0755  20B6     CALL 0xB6
0756  118A     BCF PCLATH, 0x3
252:               uart_send('0');
0757  3030     MOVLW 0x30
0758  118A     BCF PCLATH, 0x3
0759  20B6     CALL 0xB6
075A  118A     BCF PCLATH, 0x3
253:               uart_send('\n');
075B  300A     MOVLW 0xA
075C  118A     BCF PCLATH, 0x3
075D  20B6     CALL 0xB6
075E  118A     BCF PCLATH, 0x3
254:               print_string_serial("Free bytes: ");
075F  305B     MOVLW 0x5B
0760  158A     BSF PCLATH, 0x3
0761  2788     CALL 0x788
0762  118A     BCF PCLATH, 0x3
255:               byte_to_hex(usb_free_space3);
0763  082D     MOVF usb_free_space3, W
0764  158A     BSF PCLATH, 0x3
0765  27A5     CALL 0x7A5
0766  118A     BCF PCLATH, 0x3
256:               uart_send(hex_char_high);
0767  0876     MOVF hex_char_high, W
0768  118A     BCF PCLATH, 0x3
0769  20B6     CALL 0xB6
076A  118A     BCF PCLATH, 0x3
257:               uart_send(hex_char_low);
076B  0875     MOVF hex_char_low, W
076C  118A     BCF PCLATH, 0x3
076D  20B6     CALL 0xB6
076E  118A     BCF PCLATH, 0x3
258:               byte_to_hex(usb_free_space2);
076F  1283     BCF STATUS, 0x5
0770  1303     BCF STATUS, 0x6
0771  082E     MOVF usb_free_space2, W
0772  158A     BSF PCLATH, 0x3
0773  27A5     CALL 0x7A5
0774  118A     BCF PCLATH, 0x3
259:               uart_send(hex_char_high);
0775  0876     MOVF hex_char_high, W
0776  118A     BCF PCLATH, 0x3
0777  20B6     CALL 0xB6
0778  118A     BCF PCLATH, 0x3
260:               uart_send(hex_char_low);
0779  0875     MOVF hex_char_low, W
077A  118A     BCF PCLATH, 0x3
077B  20B6     CALL 0xB6
077C  118A     BCF PCLATH, 0x3
261:               byte_to_hex(usb_free_space1);
077D  1283     BCF STATUS, 0x5
077E  1303     BCF STATUS, 0x6
077F  082F     MOVF usb_free_space1, W
0780  158A     BSF PCLATH, 0x3
0781  27A5     CALL 0x7A5
0782  118A     BCF PCLATH, 0x3
262:               uart_send(hex_char_high);
0783  0876     MOVF hex_char_high, W
0784  118A     BCF PCLATH, 0x3
0785  20B6     CALL 0xB6
0786  118A     BCF PCLATH, 0x3
263:               uart_send(hex_char_low);
0787  0875     MOVF hex_char_low, W
0788  118A     BCF PCLATH, 0x3
0789  20B6     CALL 0xB6
078A  118A     BCF PCLATH, 0x3
264:               uart_send('0');
078B  3030     MOVLW 0x30
078C  118A     BCF PCLATH, 0x3
078D  20B6     CALL 0xB6
078E  118A     BCF PCLATH, 0x3
265:               uart_send('0');
078F  3030     MOVLW 0x30
0790  118A     BCF PCLATH, 0x3
0791  20B6     CALL 0xB6
0792  118A     BCF PCLATH, 0x3
266:               uart_send('\n');
0793  300A     MOVLW 0xA
0794  118A     BCF PCLATH, 0x3
0795  20B6     CALL 0xB6
0796  118A     BCF PCLATH, 0x3
267:               return;
268:           }
0797  0008     RETURN
269:           
270:           void usb_autoconfig()
271:           {
272:               unsigned char temp;
273:               print_string_serial("USB Autoconfig:\n");
069E  3029     MOVLW 0x29
069F  158A     BSF PCLATH, 0x3
06A0  2788     CALL 0x788
06A1  118A     BCF PCLATH, 0x3
274:               temp = usb_check_exists(0x55);
06A2  3055     MOVLW 0x55
06A3  118A     BCF PCLATH, 0x3
06A4  22AF     CALL 0x2AF
06A5  118A     BCF PCLATH, 0x3
06A6  1283     BCF STATUS, 0x5
06A7  1303     BCF STATUS, 0x6
06A8  00CE     MOVWF 0x4E
06A9  084E     MOVF 0x4E, W
06AA  00CF     MOVWF temp
275:               byte_to_hex(temp);
06AB  084F     MOVF temp, W
06AC  158A     BSF PCLATH, 0x3
06AD  27A5     CALL 0x7A5
06AE  118A     BCF PCLATH, 0x3
276:               uart_send(hex_char_high);
06AF  0876     MOVF hex_char_high, W
06B0  118A     BCF PCLATH, 0x3
06B1  20B6     CALL 0xB6
06B2  118A     BCF PCLATH, 0x3
277:               uart_send(hex_char_low);
06B3  0875     MOVF hex_char_low, W
06B4  118A     BCF PCLATH, 0x3
06B5  20B6     CALL 0xB6
06B6  118A     BCF PCLATH, 0x3
278:               uart_send('\n');
06B7  300A     MOVLW 0xA
06B8  118A     BCF PCLATH, 0x3
06B9  20B6     CALL 0xB6
06BA  118A     BCF PCLATH, 0x3
279:             
280:               temp = usb_get_version();
06BB  118A     BCF PCLATH, 0x3
06BC  22E5     CALL 0x2E5
06BD  118A     BCF PCLATH, 0x3
06BE  1283     BCF STATUS, 0x5
06BF  1303     BCF STATUS, 0x6
06C0  00CE     MOVWF 0x4E
06C1  084E     MOVF 0x4E, W
06C2  00CF     MOVWF temp
281:               byte_to_hex(temp);
06C3  084F     MOVF temp, W
06C4  158A     BSF PCLATH, 0x3
06C5  27A5     CALL 0x7A5
06C6  118A     BCF PCLATH, 0x3
282:               print_string_serial("Version: ");
06C7  307E     MOVLW 0x7E
06C8  158A     BSF PCLATH, 0x3
06C9  2788     CALL 0x788
06CA  118A     BCF PCLATH, 0x3
283:               uart_send(hex_char_high);
06CB  0876     MOVF hex_char_high, W
06CC  118A     BCF PCLATH, 0x3
06CD  20B6     CALL 0xB6
06CE  118A     BCF PCLATH, 0x3
284:               uart_send(hex_char_low);
06CF  0875     MOVF hex_char_low, W
06D0  118A     BCF PCLATH, 0x3
06D1  20B6     CALL 0xB6
06D2  118A     BCF PCLATH, 0x3
285:               uart_send('\n');
06D3  300A     MOVLW 0xA
06D4  118A     BCF PCLATH, 0x3
06D5  20B6     CALL 0xB6
06D6  118A     BCF PCLATH, 0x3
286:           
287:               usb_set_mode(0x05);
06D7  3005     MOVLW 0x5
06D8  118A     BCF PCLATH, 0x3
06D9  22DD     CALL 0x2DD
06DA  118A     BCF PCLATH, 0x3
288:               delay_millis(1);
06DB  3001     MOVLW 0x1
06DC  118A     BCF PCLATH, 0x3
06DD  2232     CALL 0x232
06DE  118A     BCF PCLATH, 0x3
289:               usb_set_mode(0x07);
06DF  3007     MOVLW 0x7
06E0  118A     BCF PCLATH, 0x3
06E1  22DD     CALL 0x2DD
06E2  118A     BCF PCLATH, 0x3
290:               delay_millis(1);
06E3  3001     MOVLW 0x1
06E4  118A     BCF PCLATH, 0x3
06E5  2232     CALL 0x232
06E6  118A     BCF PCLATH, 0x3
291:               usb_set_mode(0x06);
06E7  3006     MOVLW 0x6
06E8  118A     BCF PCLATH, 0x3
06E9  22DD     CALL 0x2DD
06EA  118A     BCF PCLATH, 0x3
292:               delay_millis(1);
06EB  3001     MOVLW 0x1
06EC  118A     BCF PCLATH, 0x3
06ED  2232     CALL 0x232
06EE  118A     BCF PCLATH, 0x3
293:               usb_disk_connect();
06EF  118A     BCF PCLATH, 0x3
06F0  22D8     CALL 0x2D8
06F1  118A     BCF PCLATH, 0x3
294:               delay_millis(250);
06F2  30FA     MOVLW 0xFA
06F3  118A     BCF PCLATH, 0x3
06F4  2232     CALL 0x232
06F5  118A     BCF PCLATH, 0x3
295:               delay_millis(250);
06F6  30FA     MOVLW 0xFA
06F7  118A     BCF PCLATH, 0x3
06F8  2232     CALL 0x232
06F9  118A     BCF PCLATH, 0x3
296:               usb_disk_mount();
06FA  118A     BCF PCLATH, 0x3
06FB  22D3     CALL 0x2D3
06FC  118A     BCF PCLATH, 0x3
297:               delay_millis(250);
06FD  30FA     MOVLW 0xFA
06FE  118A     BCF PCLATH, 0x3
06FF  2232     CALL 0x232
0700  118A     BCF PCLATH, 0x3
298:               delay_millis(250);
0701  30FA     MOVLW 0xFA
0702  118A     BCF PCLATH, 0x3
0703  2232     CALL 0x232
0704  118A     BCF PCLATH, 0x3
299:             
300:               temp = usb_get_status();
0705  118A     BCF PCLATH, 0x3
0706  22CC     CALL 0x2CC
0707  118A     BCF PCLATH, 0x3
0708  1283     BCF STATUS, 0x5
0709  1303     BCF STATUS, 0x6
070A  00CE     MOVWF 0x4E
070B  084E     MOVF 0x4E, W
070C  00CF     MOVWF temp
301:               byte_to_hex(temp);
070D  084F     MOVF temp, W
070E  158A     BSF PCLATH, 0x3
070F  27A5     CALL 0x7A5
0710  118A     BCF PCLATH, 0x3
302:               print_string_serial("Status: ");
0711  3088     MOVLW 0x88
0712  158A     BSF PCLATH, 0x3
0713  2788     CALL 0x788
0714  118A     BCF PCLATH, 0x3
303:               uart_send(hex_char_high);
0715  0876     MOVF hex_char_high, W
0716  118A     BCF PCLATH, 0x3
0717  20B6     CALL 0xB6
0718  118A     BCF PCLATH, 0x3
304:               uart_send(hex_char_low);
0719  0875     MOVF hex_char_low, W
071A  118A     BCF PCLATH, 0x3
071B  20B6     CALL 0xB6
071C  118A     BCF PCLATH, 0x3
305:               uart_send('\n');
071D  300A     MOVLW 0xA
071E  118A     BCF PCLATH, 0x3
071F  20B6     CALL 0xB6
0720  118A     BCF PCLATH, 0x3
306:             
307:               print_query();
0721  118A     BCF PCLATH, 0x3
0722  2724     CALL 0x724
308:               return;
309:           }
0723  0008     RETURN
310:           
311:           void main(void)
312:           {
313:               unsigned char state = 0;
046A  01D1     CLRF state
314:               initialize();
046B  118A     BCF PCLATH, 0x3
046C  2049     CALL 0x49
046D  118A     BCF PCLATH, 0x3
315:               //usb_reset_all();
316:               //delay_millis(100);
317:               //usb_autoconfig();
318:               //print_name();
319:           
320:               print_string_lcd("Dragons");
046E  3091     MOVLW 0x91
046F  118A     BCF PCLATH, 0x3
0470  27DE     CALL 0x7DE
0471  118A     BCF PCLATH, 0x3
321:               lcd_line2();
0472  118A     BCF PCLATH, 0x3
0473  214F     CALL 0x14F
0474  118A     BCF PCLATH, 0x3
322:           
323:               print_string_serial("deadbeef\n");
0475  3074     MOVLW 0x74
0476  158A     BSF PCLATH, 0x3
0477  2788     CALL 0x788
0478  118A     BCF PCLATH, 0x3
324:               
325:               unsigned char temp;
326:               while(1)
327:               {
328:                   temp = uart_read();
058E  118A     BCF PCLATH, 0x3
058F  20B2     CALL 0xB2
0590  118A     BCF PCLATH, 0x3
0591  1283     BCF STATUS, 0x5
0592  1303     BCF STATUS, 0x6
0593  00D0     MOVWF 0x50
0594  0850     MOVF 0x50, W
0595  00D2     MOVWF temp
329:                   
330:                   switch(state)
0479  2D8E     GOTO 0x58E
0596  0851     MOVF state, W
0597  3A00     XORLW 0x0
0598  1903     BTFSC STATUS, 0x2
0599  2C7A     GOTO 0x47A
059A  3A01     XORLW 0x1
059B  1903     BTFSC STATUS, 0x2
059C  2C81     GOTO 0x481
059D  3A03     XORLW 0x3
059E  1903     BTFSC STATUS, 0x2
059F  2C89     GOTO 0x489
05A0  3A01     XORLW 0x1
05A1  1903     BTFSC STATUS, 0x2
05A2  2C8F     GOTO 0x48F
05A3  3A07     XORLW 0x7
05A4  1903     BTFSC STATUS, 0x2
05A5  2D2B     GOTO 0x52B
05A6  2D8E     GOTO 0x58E
05A7  118A     BCF PCLATH, 0x3
05A8  2805     GOTO 0x5
331:                   {
332:                       case 0:
333:                           if(temp == 0xDE)
047A  30DE     MOVLW 0xDE
047B  0652     XORWF temp, W
047C  1D03     BTFSS STATUS, 0x2
047D  2D8E     GOTO 0x58E
334:                               state = 1;
047E  01D1     CLRF state
047F  0AD1     INCF state, F
0480  2D8E     GOTO 0x58E
335:                           break;
336:                       case 1:
337:                           if(temp == 0xAD)
0481  30AD     MOVLW 0xAD
0482  0652     XORWF temp, W
0483  1D03     BTFSS STATUS, 0x2
0484  2C87     GOTO 0x487
338:                               state = 2;
0485  3002     MOVLW 0x2
0486  2C98     GOTO 0x498
339:                           else
340:                               state = 0;
0487  01D1     CLRF state
0488  2D8E     GOTO 0x58E
341:                           break;
342:                       case 2:
343:                           if(temp == 0xBE)
0489  30BE     MOVLW 0xBE
048A  0652     XORWF temp, W
048B  1D03     BTFSS STATUS, 0x2
048C  2C87     GOTO 0x487
344:                               state = 3;
048D  3003     MOVLW 0x3
048E  2C98     GOTO 0x498
345:                           else
346:                               state = 0;
347:                           break;
348:                       case 3:
349:                           if(temp == 0xEF)
048F  30EF     MOVLW 0xEF
0490  0652     XORWF temp, W
0491  1D03     BTFSS STATUS, 0x2
0492  2C97     GOTO 0x497
350:                               print_string_serial(str_cmd_mode);
0493  3011     MOVLW 0x11
0494  158A     BSF PCLATH, 0x3
0495  2788     CALL 0x788
0496  118A     BCF PCLATH, 0x3
351:                           state = 4;
0497  3004     MOVLW 0x4
0498  00D0     MOVWF 0x50
0499  0850     MOVF 0x50, W
049A  00D1     MOVWF state
352:                           break;
049B  2D8E     GOTO 0x58E
353:                       case 4:
354:                           switch(temp)
052B  0852     MOVF temp, W
052C  3A00     XORLW 0x0
052D  1903     BTFSC STATUS, 0x2
052E  2C9C     GOTO 0x49C
052F  3A01     XORLW 0x1
0530  1903     BTFSC STATUS, 0x2
0531  2CA0     GOTO 0x4A0
0532  3A03     XORLW 0x3
0533  1903     BTFSC STATUS, 0x2
0534  2CA4     GOTO 0x4A4
0535  3A01     XORLW 0x1
0536  1903     BTFSC STATUS, 0x2
0537  2CA8     GOTO 0x4A8
0538  3A07     XORLW 0x7
0539  1903     BTFSC STATUS, 0x2
053A  2CAD     GOTO 0x4AD
053B  3A01     XORLW 0x1
053C  1903     BTFSC STATUS, 0x2
053D  2CB2     GOTO 0x4B2
053E  3A03     XORLW 0x3
053F  1903     BTFSC STATUS, 0x2
0540  2CB7     GOTO 0x4B7
0541  3A01     XORLW 0x1
0542  1903     BTFSC STATUS, 0x2
0543  2CBB     GOTO 0x4BB
0544  3A0F     XORLW 0xF
0545  1903     BTFSC STATUS, 0x2
0546  2CBF     GOTO 0x4BF
0547  3A01     XORLW 0x1
0548  1903     BTFSC STATUS, 0x2
0549  2CC3     GOTO 0x4C3
054A  3A03     XORLW 0x3
054B  1903     BTFSC STATUS, 0x2
054C  2CC7     GOTO 0x4C7
054D  3A01     XORLW 0x1
054E  1903     BTFSC STATUS, 0x2
054F  2CCB     GOTO 0x4CB
0550  3A07     XORLW 0x7
0551  1903     BTFSC STATUS, 0x2
0552  2CD2     GOTO 0x4D2
0553  3A01     XORLW 0x1
0554  1903     BTFSC STATUS, 0x2
0555  2CD6     GOTO 0x4D6
0556  3A03     XORLW 0x3
0557  1903     BTFSC STATUS, 0x2
0558  2CDA     GOTO 0x4DA
0559  3A01     XORLW 0x1
055A  1903     BTFSC STATUS, 0x2
055B  2D00     GOTO 0x500
055C  3A1F     XORLW 0x1F
055D  1903     BTFSC STATUS, 0x2
055E  2D09     GOTO 0x509
055F  3A01     XORLW 0x1
0560  1903     BTFSC STATUS, 0x2
0561  2D0D     GOTO 0x50D
0562  3A03     XORLW 0x3
0563  1903     BTFSC STATUS, 0x2
0564  2D11     GOTO 0x511
0565  3A32     XORLW 0x32
0566  1903     BTFSC STATUS, 0x2
0567  2D15     GOTO 0x515
0568  3A01     XORLW 0x1
0569  1903     BTFSC STATUS, 0x2
056A  2D19     GOTO 0x519
056B  3A03     XORLW 0x3
056C  1903     BTFSC STATUS, 0x2
056D  2D1D     GOTO 0x51D
056E  3A01     XORLW 0x1
056F  1903     BTFSC STATUS, 0x2
0570  2D21     GOTO 0x521
0571  3A07     XORLW 0x7
0572  1903     BTFSC STATUS, 0x2
0573  2D25     GOTO 0x525
0574  2D75     GOTO 0x575
355:                           {
356:                               case 0x00:
357:                                   usb_reset_all();
049C  118A     BCF PCLATH, 0x3
049D  225B     CALL 0x25B
049E  118A     BCF PCLATH, 0x3
358:                                   break;
049F  2D75     GOTO 0x575
359:                               case 0x01:
360:                                   usb_autoconfig();
04A0  118A     BCF PCLATH, 0x3
04A1  269E     CALL 0x69E
04A2  118A     BCF PCLATH, 0x3
361:                                   break;
04A3  2D75     GOTO 0x575
362:                               case 0x02:
363:                                   temp = usb_get_version();
04A4  118A     BCF PCLATH, 0x3
04A5  22E5     CALL 0x2E5
04A6  118A     BCF PCLATH, 0x3
04A7  2D03     GOTO 0x503
364:                                   break;
365:                               case 0x03:
366:                                   usb_set_mode(0x05);
04A8  3005     MOVLW 0x5
04A9  118A     BCF PCLATH, 0x3
04AA  22DD     CALL 0x2DD
04AB  118A     BCF PCLATH, 0x3
367:                                   break;
04AC  2D75     GOTO 0x575
368:                               case 0x04:
369:                                   usb_set_mode(0x06);
04AD  3006     MOVLW 0x6
04AE  118A     BCF PCLATH, 0x3
04AF  22DD     CALL 0x2DD
04B0  118A     BCF PCLATH, 0x3
370:                                   break;
04B1  2D75     GOTO 0x575
371:                               case 0x05:
372:                                   usb_set_mode(0x07);
04B2  3007     MOVLW 0x7
04B3  118A     BCF PCLATH, 0x3
04B4  22DD     CALL 0x2DD
04B5  118A     BCF PCLATH, 0x3
373:                                   break;
04B6  2D75     GOTO 0x575
374:                               case 0x06:
375:                                   usb_disk_connect();
04B7  118A     BCF PCLATH, 0x3
04B8  22D8     CALL 0x2D8
04B9  118A     BCF PCLATH, 0x3
376:                                   break;
04BA  2D75     GOTO 0x575
377:                               case 0x07:
378:                                   usb_disk_mount();
04BB  118A     BCF PCLATH, 0x3
04BC  22D3     CALL 0x2D3
04BD  118A     BCF PCLATH, 0x3
379:                                   break;
04BE  2D75     GOTO 0x575
380:                               case 0x08:
381:                                   temp = usb_get_status();
04BF  118A     BCF PCLATH, 0x3
04C0  22CC     CALL 0x2CC
04C1  118A     BCF PCLATH, 0x3
04C2  2D03     GOTO 0x503
382:                                   break;
383:                               case 0x09:
384:                                   print_query();
04C3  118A     BCF PCLATH, 0x3
04C4  2724     CALL 0x724
04C5  118A     BCF PCLATH, 0x3
385:                                   break;
04C6  2D75     GOTO 0x575
386:                               case 0x0A:
387:                                   print_capacity();
04C7  158A     BSF PCLATH, 0x3
04C8  27C8     CALL 0x7C8
04C9  118A     BCF PCLATH, 0x3
388:                                   break;
04CA  2D75     GOTO 0x575
389:                               case 0x0B:
390:                                   usb_set_file_name();
04CB  118A     BCF PCLATH, 0x3
04CC  2260     CALL 0x260
04CD  118A     BCF PCLATH, 0x3
391:                                   print_name();
04CE  118A     BCF PCLATH, 0x3
04CF  2180     CALL 0x180
04D0  118A     BCF PCLATH, 0x3
392:                                   break;
04D1  2D75     GOTO 0x575
393:                               case 0x0C:
394:                                   usb_file_open();
04D2  118A     BCF PCLATH, 0x3
04D3  2273     CALL 0x273
04D4  118A     BCF PCLATH, 0x3
395:                                   break;
04D5  2D75     GOTO 0x575
396:                               case 0x0D:
397:                                   usb_file_close();
04D6  118A     BCF PCLATH, 0x3
04D7  2278     CALL 0x278
04D8  118A     BCF PCLATH, 0x3
398:                                   break;
04D9  2D75     GOTO 0x575
399:                               case 0x0E:
400:                                   usb_get_file_size();
04DA  118A     BCF PCLATH, 0x3
04DB  229E     CALL 0x29E
04DC  118A     BCF PCLATH, 0x3
401:                                   print_string_serial("File size: ");
04DD  3068     MOVLW 0x68
04DE  158A     BSF PCLATH, 0x3
04DF  2788     CALL 0x788
04E0  118A     BCF PCLATH, 0x3
402:                                   byte_to_hex(usb_file_size_high);
04E1  0833     MOVF usb_file_size_high, W
04E2  158A     BSF PCLATH, 0x3
04E3  27A5     CALL 0x7A5
04E4  118A     BCF PCLATH, 0x3
403:                                   uart_send(hex_char_high);
04E5  0876     MOVF hex_char_high, W
04E6  118A     BCF PCLATH, 0x3
04E7  20B6     CALL 0xB6
04E8  118A     BCF PCLATH, 0x3
404:                                   uart_send(hex_char_low);
04E9  0875     MOVF hex_char_low, W
04EA  118A     BCF PCLATH, 0x3
04EB  20B6     CALL 0xB6
04EC  118A     BCF PCLATH, 0x3
405:                                   byte_to_hex(usb_file_size_low);
04ED  1283     BCF STATUS, 0x5
04EE  1303     BCF STATUS, 0x6
04EF  0832     MOVF usb_file_size_low, W
04F0  158A     BSF PCLATH, 0x3
04F1  27A5     CALL 0x7A5
04F2  118A     BCF PCLATH, 0x3
406:                                   uart_send(hex_char_high);
04F3  0876     MOVF hex_char_high, W
04F4  118A     BCF PCLATH, 0x3
04F5  20B6     CALL 0xB6
04F6  118A     BCF PCLATH, 0x3
407:                                   uart_send(hex_char_low);
04F7  0875     MOVF hex_char_low, W
04F8  118A     BCF PCLATH, 0x3
04F9  20B6     CALL 0xB6
04FA  118A     BCF PCLATH, 0x3
408:                                   uart_send('\n');
04FB  300A     MOVLW 0xA
04FC  118A     BCF PCLATH, 0x3
04FD  20B6     CALL 0xB6
04FE  118A     BCF PCLATH, 0x3
409:                                   break;
04FF  2D75     GOTO 0x575
410:                               case 0x0F:
411:                                   temp = usb_file_read();
0500  118A     BCF PCLATH, 0x3
0501  2426     CALL 0x426
0502  118A     BCF PCLATH, 0x3
0503  1283     BCF STATUS, 0x5
0504  1303     BCF STATUS, 0x6
0505  00D0     MOVWF 0x50
0506  0850     MOVF 0x50, W
0507  00D2     MOVWF temp
412:                                   break;
0508  2D75     GOTO 0x575
413:                               case 0x10:
414:                                   usb_file_create();
0509  118A     BCF PCLATH, 0x3
050A  22B9     CALL 0x2B9
050B  118A     BCF PCLATH, 0x3
415:                                   break;
050C  2D75     GOTO 0x575
416:                               case 0x11:
417:                                   usb_file_write();
050D  118A     BCF PCLATH, 0x3
050E  23B5     CALL 0x3B5
050F  118A     BCF PCLATH, 0x3
418:                                   break;
0510  2D75     GOTO 0x575
419:                               case 0x12:
420:                                   usb_write_test_data();
0511  118A     BCF PCLATH, 0x3
0512  2350     CALL 0x350
0513  118A     BCF PCLATH, 0x3
421:                                   break;
0514  2D75     GOTO 0x575
422:                               case 0x20:
423:                                   mem_clear();
0515  118A     BCF PCLATH, 0x3
0516  2083     CALL 0x83
0517  118A     BCF PCLATH, 0x3
424:                                   break;
0518  2D75     GOTO 0x575
425:                               case 0x21:
426:                                   mem_dump();
0519  118A     BCF PCLATH, 0x3
051A  2091     CALL 0x91
051B  118A     BCF PCLATH, 0x3
427:                                   break;
051C  2D75     GOTO 0x575
428:                               case 0x22:
429:                                   file_dump();
051D  118A     BCF PCLATH, 0x3
051E  209F     CALL 0x9F
051F  118A     BCF PCLATH, 0x3
430:                                   break;
0520  2D75     GOTO 0x575
431:                               case 0x23:
432:                                   print_test_data();
0521  118A     BCF PCLATH, 0x3
0522  223E     CALL 0x23E
0523  118A     BCF PCLATH, 0x3
433:                                   break;
0524  2D75     GOTO 0x575
434:                               case 0x24:
435:                                   usb_file_size_low = 16;
0525  3010     MOVLW 0x10
0526  00D0     MOVWF 0x50
0527  0850     MOVF 0x50, W
0528  00B2     MOVWF usb_file_size_low
436:                                   usb_file_size_high = 0;
0529  01B3     CLRF usb_file_size_high
052A  2D1D     GOTO 0x51D
437:                                   file_dump();
438:                           }
439:                           byte_to_hex(temp);
0575  1283     BCF STATUS, 0x5
0576  1303     BCF STATUS, 0x6
0577  0852     MOVF temp, W
0578  158A     BSF PCLATH, 0x3
0579  27A5     CALL 0x7A5
057A  118A     BCF PCLATH, 0x3
440:                           uart_send(hex_char_high);
057B  0876     MOVF hex_char_high, W
057C  118A     BCF PCLATH, 0x3
057D  20B6     CALL 0xB6
057E  118A     BCF PCLATH, 0x3
441:                           uart_send(hex_char_low);
057F  0875     MOVF hex_char_low, W
0580  118A     BCF PCLATH, 0x3
0581  20B6     CALL 0xB6
0582  118A     BCF PCLATH, 0x3
442:                           lcd_clear2();
0583  118A     BCF PCLATH, 0x3
0584  2168     CALL 0x168
0585  118A     BCF PCLATH, 0x3
443:                           lcd_putc(hex_char_high);
0586  0876     MOVF hex_char_high, W
0587  118A     BCF PCLATH, 0x3
0588  211C     CALL 0x11C
0589  118A     BCF PCLATH, 0x3
444:                           lcd_putc(hex_char_low);
058A  0875     MOVF hex_char_low, W
058B  118A     BCF PCLATH, 0x3
058C  211C     CALL 0x11C
058D  118A     BCF PCLATH, 0x3
058E  118A     BCF PCLATH, 0x3
058F  20B2     CALL 0xB2
0590  118A     BCF PCLATH, 0x3
0591  1283     BCF STATUS, 0x5
0592  1303     BCF STATUS, 0x6
0593  00D0     MOVWF 0x50
0594  0850     MOVF 0x50, W
0595  00D2     MOVWF temp
0596  0851     MOVF state, W
0597  3A00     XORLW 0x0
0598  1903     BTFSC STATUS, 0x2
0599  2C7A     GOTO 0x47A
059A  3A01     XORLW 0x1
059B  1903     BTFSC STATUS, 0x2
059C  2C81     GOTO 0x481
059D  3A03     XORLW 0x3
059E  1903     BTFSC STATUS, 0x2
059F  2C89     GOTO 0x489
05A0  3A01     XORLW 0x1
05A1  1903     BTFSC STATUS, 0x2
05A2  2C8F     GOTO 0x48F
05A3  3A07     XORLW 0x7
05A4  1903     BTFSC STATUS, 0x2
05A5  2D2B     GOTO 0x52B
05A6  2D8E     GOTO 0x58E
05A7  118A     BCF PCLATH, 0x3
05A8  2805     GOTO 0x5
445:                           break;
446:                   }
447:               }
448:               return;
449:           }
---  /home/dragomir/repos/MC-10_Tape_Emulator/MC10_Tape_Drive_C.X/core.asm  -----------------------------
                                                  1:     #include <xc.inc>
                                                  2:     #define IRP 7
                                                  3:         
                                                  4:     #define DISP_E PORTA, 2
                                                  5:     #define DISP_RS PORTA, 3
                                                  6:     #define USB_INT PORTB, 0
                                                  7:     #define TAPE_IN PORTB, 1
                                                  8:     ;#define TAPE_OUT PORTB, 2
                                                  9:     #define SW0 PORTB, 3
                                                  10:    #define SW1 PORTB, 4
                                                  11:    #define SW2 PORTB, 5
                                                  12:    #define SW3 PORTB, 6
                                                  13:    #define RAM_CS PORTB, 7
                                                  14:    #define USB_CS PORTD, 2
                                                  15:    #define USB_RST PORTD, 3
                                                  16:    #define DISP_CLK PORTD, 6
                                                  17:    #define DISP_DATA PORTD, 7
                                                  18:        
                                                  19:    #define F_SRL_VALID _flag_reg, 0
                                                  20:    #define F_BB_FIRST _flag_reg, 1
                                                  21:    #define F_TIMEOUT _flag_reg, 2
                                                  22:    #define F_SPACE_OK _flag_reg, 3
                                                  23:        
                                                  24:    ;PIN USAGE:
                                                  25:    ; PORTA,0 UNUSED OUTPUT
                                                  26:    ; PORTA,1 UNUSED OUTPUT
                                                  27:    ; PORTA,2 DISPLAY CE OUTPUT
                                                  28:    ; PORTA,3 DISPLAY RS OUTPUT
                                                  29:    ; PORTA,4 UNUSED (OPEN DRAIN) OUTPUT
                                                  30:    ; PORTA,5 UNUSED OUTPUT
                                                  31:    ; PORTA,6 CLOCK INPUT
                                                  32:    ; PORTA,7 CLOCK INPUT
                                                  33:    ; PORTB,0 CH376S INTERRUPT INPUT
                                                  34:    ; PORTB,1 TAPE INPUT
                                                  35:    ; PORTB,2 TAPE OUTPUT
                                                  36:    ; PORTB,3 BUTTON 1 INPUT
                                                  37:    ; PORTB,4 BUTTON 2 INPUT
                                                  38:    ; PORTB,5 BUTTON 3 INPUT
                                                  39:    ; PORTB,6 BUTTON 4 INPUT    ICSP CLOCK
                                                  40:    ; PORTB,7 RAM CE OUTPUT     ICSP DATA
                                                  41:    ; PORTC,0 UNUSED OUTPUT
                                                  42:    ; PORTC,1 UNUSED OUTPUT
                                                  43:    ; PORTC,2 UNUSED OUTPUT
                                                  44:    ; PORTC,3 SCK (HARDWARE SPI) OUTPUT
                                                  45:    ; PORTC,4 SDI (HARDWARE SPI) INPUT
                                                  46:    ; PORTC,5 SDO (HARDWARE SPI) OUTPUT
                                                  47:    ; PORTC,6 TXD (HARDWARE UART) INPUT (MUST BE CONFIGURED AS INPUT FOR UART MODULE TO WORK. THIS IS ACTUALLY AN OUTPUT)
                                                  48:    ; PORTC,7 RXD (HARDWARE UART) INPUT
                                                  49:    ; PORTD,0 UNUSED OUTPUT
                                                  50:    ; PORTD,1 UNUSED OUTPUT
                                                  51:    ; PORTD,2 CH376S CE OUTPUT
                                                  52:    ; PORTD,3 CH376S RESET OUTPUT
                                                  53:    ; PORTD,4 TEST OUTPUT
                                                  54:    ; PORTD,5 UNUSED OUTPUT
                                                  55:    ; PORTD,6 DISPLAY CLOCK OUTPUT
                                                  56:    ; PORTD,7 DISPLAY DATA OUTPUT
                                                  57:    ; PORTE,0 UNUSED OUTPUT
                                                  58:    ; PORTE,1 UNUSED OUTPUT
                                                  59:    ; PORTE,2 UNUSED OUTPUT
                                                  60:        
                                                  61:    ;FLAG REG USAGE:
                                                  62:    ;BIT0 SET IF S_REG_LOW CONTAINS VALID DATA
                                                  63:    ;BIT1 SET IF BUILD_BYTE IS WAITING FOR THE FIRST BYTE OF A TRANSMISSION (PREVENTS RESET IF TRANSMISSION FAILS)
                                                  64:    ;BIT2 SET IF TIMEOUT OCCURED WHILE WAITING FOR USB STATUS
                                                  65:    ;BIT3 SET IF FREE SPACE EXCEEDS TAPE SIZE
                                                  66:    ;BIT4 SET IF FREE SPACE EXCEEDS 0x20000
                                                  67:    ;BIT5 UNUSED
                                                  68:    ;BIT6 UNUSED
                                                  69:    ;BIT7 UNUSED
                                                  70:    
                                                  71:    ; When assembly code is placed in a psect, it can be manipulated as a
                                                  72:    ; whole by the linker and placed in memory.  
                                                  73:    ;
                                                  74:    ; In this example, barfunc is the program section (psect) name, 'local' means
                                                  75:    ; that the section will not be combined with other sections even if they have
                                                  76:    ; the same name.  class=CODE means the barfunc must go in the CODE container.
                                                  77:    ; PIC18s should have a delta (addressible unit size) of 1 (default) since they
                                                  78:    ; are byte addressible.  PIC10/12/16s have a delta of 2 since they are word
                                                  79:    ; addressible.  PIC18s should have a reloc (alignment) flag of 2 for any
                                                  80:    ; psect which contains executable code.  PIC10/12/16s can use the default
                                                  81:    ; reloc value of 1.  Use one of the psects below for the device you use:
                                                  82:    
                                                  83:    PSECT intentry,class=CODE,delta=2,space=0
0004  29CF     GOTO 0x1CF                         84:        GOTO _tape_int
                                                  85:    
                                                  86:    psect   barfunc,local,class=CODE,delta=2 ; PIC10/12/16
                                                  87:    ; psect   barfunc,local,class=CODE,reloc=2 ; PIC18
                                                  88:    
                                                  89:    global _temp1
                                                  90:    global _temp2
                                                  91:    global _temp3
                                                  92:    global _temp4
                                                  93:    global _temp5
                                                  94:    global _ram_address_h
                                                  95:    global _ram_address_l
                                                  96:    global _sdel_count
                                                  97:    global _ldel_count
                                                  98:    global _gen_count
                                                  99:    global _gen_count2
                                                  100:   global _gen_count3
                                                  101:   global _gen_count4
                                                  102:   global _gen_count5
                                                  103:   global _gen_count6
                                                  104:   global _tape_size_high
                                                  105:   global _tape_size_low
                                                  106:   global _bit_count
                                                  107:   global _hex_char_high
                                                  108:   global _hex_char_low
                                                  109:   global _usb_bytes_sent_high
                                                  110:   global _usb_bytes_sent_low
                                                  111:   global _usb_file_size_high
                                                  112:   global _usb_file_size_low
                                                  113:   global _usb_bytes_read_high
                                                  114:   global _usb_bytes_read_low
                                                  115:   global _usb_drive_size1
                                                  116:   global _usb_drive_size2
                                                  117:   global _usb_drive_size3
                                                  118:   global _usb_free_space1
                                                  119:   global _usb_free_space2
                                                  120:   global _usb_free_space3
                                                  121:   global _usb_logical_bytes1
                                                  122:   global _usb_logical_bytes2
                                                  123:   global _usb_logical_bytes3
                                                  124:   global _usb_target_status
                                                  125:   global _s_reg_high
                                                  126:   global _s_reg_low
                                                  127:   global _timeout_high
                                                  128:   global _timeout_low
                                                  129:   global _delay_counter
                                                  130:   global _flag_reg
                                                  131:   global _fifo_read_idx
                                                  132:   global _fifo_read_bank
                                                  133:   global _fifo_write_idx
                                                  134:   global _fifo_write_bank
                                                  135:   global _fifo_num_bytes
                                                  136:   
                                                  137:   global _tape_name
                                                  138:   
                                                  139:   
                                                  140:   ;extern entry__byte_to_hex
                                                  141:   global _byte_to_hex
                                                  142:   global _fifo_push
                                                  143:   global _fifo_pop
                                                  144:   
                                                  145:    
                                                  146:   global _initialize
                                                  147:   _initialize
0049  1303     BCF STATUS, 0x6                    148:       BANKSEL PORTA
004B  0185     CLRF PORTA                         149:       CLRF PORTA
004C  0186     CLRF PORTB                         150:       CLRF PORTB
004D  0187     CLRF PORTC                         151:       CLRF PORTC
004E  0188     CLRF PORTD                         152:       CLRF PORTD
004F  0986     COMF PORTB, F                      153:       COMF PORTB, F
0050  0987     COMF PORTC, F                      154:       COMF PORTC, F
0051  0988     COMF PORTD, F                      155:       COMF PORTD, F
0052  1303     BCF STATUS, 0x6                    156:       BANKSEL TRISA  ;SWITCH TO BANK 1
0054  30C0     MOVLW 0xC0                         157:       MOVLW 0b11000000
0055  0085     MOVWF PORTA                        158:       MOVWF BANKMASK(TRISA)	;CONFIGURE PORTA
0056  307B     MOVLW 0x7B                         159:       MOVLW 0b01111011
0057  0086     MOVWF PORTB                        160:       MOVWF BANKMASK(TRISB) ;CONFIGURE PORTB
0058  30D0     MOVLW 0xD0                         161:       MOVLW 0b11010000
0059  0087     MOVWF PORTC                        162:       MOVWF BANKMASK(TRISC) ;CONFIGURE PORTC
005A  3000     MOVLW 0x0                          163:       MOVLW 0b00000000
005B  0088     MOVWF PORTD                        164:       MOVWF BANKMASK(TRISD)	;CONFIGURE PORTD
005C  30F8     MOVLW 0xF8                         165:       MOVLW 0b11111000
005D  0089     MOVWF PORTE                        166:       MOVWF BANKMASK(TRISE)	;CONFIGURE PORTE
005E  3000     MOVLW 0x0                          167:       MOVLW 0b00000000	    ;SMP=0, CKE=0, DA=0, P=0, S=0, RW=0, UA=0, BF=0
005F  0094     MOVWF SSPCON                       168:       MOVWF BANKMASK(SSPSTAT) ;CONFIGURE SPI
0060  300F     MOVLW 0xF                          169:       MOVLW 0b00001111	    ;PCFG=1111
0061  009F     MOVWF ADCON0                       170:       MOVWF BANKMASK(ADCON1) ;DISABLE ANALOG INPUTS
0062  3026     MOVLW 0x26                         171:       MOVLW 0b00100110	;CSRC=0, TX9=0, TXEN=1, SYNC=0, UNIMPLEMENTED=0, BRGH=1, TRMT=1, TX9D=0
0063  0098     MOVWF RCSTA                        172:       MOVWF BANKMASK(TXSTA) ;CONFIGURE UART
0064  3019     MOVLW 0x19                         173:       MOVLW 25
0065  0099     MOVWF TXREG                        174:       MOVWF BANKMASK(SPBRG) ;CONFIGURE BAUD RATE
0066  30D8     MOVLW 0xD8                         175:       MOVLW 0b11011000	;RBPU = 1, INTEDG = 1, T0CS = 0, T0SE = 1, PSA = 1, PS2 = 0, PS1 = 0, PS0 = 0
0067  0081     MOVWF TMR0                         176:       MOVWF BANKMASK(OPTION_REG)	;CONFIGURE TIMER
0068  1303     BCF STATUS, 0x6                    177:       BANKSEL SSPCON
006A  3030     MOVLW 0x30                         178:       MOVLW 0b00110000	;WCOL=0, SSPOV=0, SSPEN=1, CKP=1, SSPM=0000
006B  0094     MOVWF SSPCON                       179:       MOVWF SSPCON ;CONFIGURE SPI
006C  3090     MOVLW 0x90                         180:       MOVLW 0b10010000	;SPEN=1, RX9=0,SREN=0, CREN=1, ADDEN=0, FERR=0, OERR=0, RX9D=0
006D  0098     MOVWF RCSTA                        181:       MOVWF RCSTA ;CONFIGURE UART
006E  3020     MOVLW 0x20                         182:       MOVLW 0b00100000
006F  008B     MOVWF INTCON                       183:       MOVWF INTCON    ;ENABLE TIMER 0 INTERRUPT
0070  01A3     CLRF 0x23                          184:       CLRF _flag_reg
0071  01A8     CLRF 0x28                          185:       CLRF _s_reg_high
0072  01A7     CLRF 0x27                          186:       CLRF _s_reg_low
0073  1188     BCF PORTD, 0x3                     187:       BCF USB_RST
0074  3032     MOVLW 0x32                         188:       MOVLW 50
0075  2232     CALL 0x232                         189:       CALL _delay_millis   ;50 MS DELAY AT STARTUP
0076  2458     CALL 0x458                         190:       CALL _fifo_init
0077  2108     CALL 0x108                         191:       CALL RAM_CONFIG
0078  01C2     CLRF 0x42                          192:       CLRF _ram_address_h
0079  01C1     CLRF 0x41                          193:       CLRF _ram_address_l
007A  3055     MOVLW 0x55                         194:       MOVLW 0x55
007B  20E3     CALL 0xE3                          195:       CALL RAM_WRITE
007C  30AA     MOVLW 0xAA                         196:       MOVLW 0xAA
007D  20E0     CALL 0xE0                          197:       CALL RAM_WRITE_AUTO
                                                  198:       ;CALL _mem_clear
007E  2131     CALL 0x131                         199:       CALL FUNCTIONSET_LCD    ;INITIALIZE DISPLAY
007F  213A     CALL 0x13A                         200:       CALL DISPLAYON  ;POWER ON THE DISPLAY
0080  2141     CALL 0x141                         201:       CALL CLEARDISPLAY	;CLEAR THE DISPLAY
0081  2148     CALL 0x148                         202:       CALL SETHOME_LCD	;SET CURSOR TO THE START OF LINE 1
0082  0008     RETURN                             203:       RETURN
                                                  204:   
                                                  205:   global _mem_clear
                                                  206:   _mem_clear
0083  30FF     MOVLW 0xFF                         207:       MOVLW 0xFF
0084  00C1     MOVWF 0x41                         208:       MOVWF _ram_address_l
0085  00C2     MOVWF 0x42                         209:       MOVWF _ram_address_h
                                                  210:   MEM_CLEAR_LOOP
                                                  211:       ;BSF PORTD, 4
0086  30FF     MOVLW 0xFF                         212:       MOVLW 0xFF
0087  20E0     CALL 0xE0                          213:       CALL RAM_WRITE_AUTO
                                                  214:       ;BCF PORTD, 4    ;PORTD 4 IS A DEBUG OUTPUT TO MEASURE THE DURATION OF RAM_WRITE
0088  0841     MOVF 0x41, W                       215:       MOVF _ram_address_l, W
0089  3AFF     XORLW 0xFF                         216:       XORLW 0xFF
008A  1D03     BTFSS STATUS, 0x2                  217:       BTFSS ZERO
008B  2886     GOTO 0x86                          218:       GOTO MEM_CLEAR_LOOP
008C  0842     MOVF 0x42, W                       219:       MOVF _ram_address_h, W
008D  3AFF     XORLW 0xFF                         220:       XORLW 0xFF
008E  1D03     BTFSS STATUS, 0x2                  221:       BTFSS ZERO
008F  2886     GOTO 0x86                          222:       GOTO MEM_CLEAR_LOOP
0090  0008     RETURN                             223:       RETURN
                                                  224:   
                                                  225:   global _mem_dump
                                                  226:   _mem_dump
0091  30FF     MOVLW 0xFF                         227:       MOVLW 0xFF
0092  00C1     MOVWF 0x41                         228:       MOVWF _ram_address_l
0093  00C2     MOVWF 0x42                         229:       MOVWF _ram_address_h
                                                  230:   MEM_DUMP_LOOP
0094  20BA     CALL 0xBA                          231:       CALL RAM_READ_AUTO
0095  20B6     CALL 0xB6                          232:       CALL _uart_send
0096  0841     MOVF 0x41, W                       233:       MOVF _ram_address_l, W
0097  3AFF     XORLW 0xFF                         234:       XORLW 0xFF
0098  1D03     BTFSS STATUS, 0x2                  235:       BTFSS ZERO
0099  2894     GOTO 0x94                          236:       GOTO MEM_DUMP_LOOP
009A  0842     MOVF 0x42, W                       237:       MOVF _ram_address_h, W
009B  3AFF     XORLW 0xFF                         238:       XORLW 0xFF
009C  1D03     BTFSS STATUS, 0x2                  239:       BTFSS ZERO
009D  2894     GOTO 0x94                          240:       GOTO MEM_DUMP_LOOP
009E  0008     RETURN                             241:       RETURN
                                                  242:   
                                                  243:   global _file_dump
                                                  244:   _file_dump
009F  0833     MOVF 0x33, W                       245:       MOVF _usb_file_size_high, W
00A0  0432     IORWF 0x32, W                      246:       IORWF _usb_file_size_low, W
00A1  1903     BTFSC STATUS, 0x2                  247:       BTFSC ZERO
00A2  0008     RETURN                             248:       RETURN
00A3  0833     MOVF 0x33, W                       249:       MOVF _usb_file_size_high, W
00A4  00BE     MOVWF 0x3E                         250:       MOVWF _gen_count
00A5  0832     MOVF 0x32, W                       251:       MOVF _usb_file_size_low, W
00A6  00BD     MOVWF 0x3D                         252:       MOVWF _gen_count2
00A7  30FF     MOVLW 0xFF                         253:       MOVLW 0xFF
00A8  00C1     MOVWF 0x41                         254:       MOVWF _ram_address_l
00A9  00C2     MOVWF 0x42                         255:       MOVWF _ram_address_h
00AA  0ABE     INCF 0x3E, F                       256:       INCF _gen_count, F
                                                  257:   FD_INNER
00AB  20BA     CALL 0xBA                          258:       CALL RAM_READ_AUTO
00AC  20B6     CALL 0xB6                          259:       CALL _uart_send
00AD  0BBD     DECFSZ 0x3D, F                     260:       DECFSZ _gen_count2, F
00AE  28AB     GOTO 0xAB                          261:       GOTO FD_INNER
00AF  0BBE     DECFSZ 0x3E, F                     262:       DECFSZ _gen_count, F
00B0  28AB     GOTO 0xAB                          263:       GOTO FD_INNER
00B1  0008     RETURN                             264:       RETURN
                                                  265:   
                                                  266:   global _uart_read
                                                  267:   _uart_read
00B2  1E8C     BTFSS PIR1, 0x5                    268:       BTFSS RCIF    ;CHECK IF UART RECEIVE BUFFER IS FULL
00B3  28B2     GOTO 0xB2                          269:       GOTO _uart_read  ;IF NOT WAIT UNTIL ITS FULL
00B4  081A     MOVF RCREG, W                      270:       MOVF RCREG, W   ;COPY DATA TO W
00B5  0008     RETURN                             271:       RETURN
                                                  272:   
                                                  273:   global _uart_send
                                                  274:   _uart_send
00B6  1E0C     BTFSS PIR1, 0x4                    275:       BTFSS TXIF    ;CHECK IF UART TRANSMIT BUFFER IS EMPTY
00B7  28B6     GOTO 0xB6                          276:       GOTO _uart_send  ;IF NOT WAIT UNTIL IT IS
00B8  0099     MOVWF TXREG                        277:       MOVWF TXREG	    ;COPY DATA TO TXREG
00B9  0008     RETURN                             278:       RETURN
                                                  279:   
                                                  280:   RAM_READ_AUTO
00BA  0FC1     INCFSZ 0x41, F                     281:       INCFSZ _ram_address_l, F    ;INCREMENT LOW ADDRESS
00BB  03C2     DECF 0x42, F                       282:       DECF _ram_address_h, F
00BC  0AC2     INCF 0x42, F                       283:       INCF _ram_address_h, F	;IF LOW ADDRESS IS ZERO INCREMENT THE HIGH ADDRESS TOO
                                                  284:   RAM_READ
00BD  1386     BCF PORTB, 0x7                     285:       BCF RAM_CS    ;CHIP ENABLE
00BE  3003     MOVLW 0x3                          286:       MOVLW 0x03	;PUT WRITE COMMAND IN W
00BF  0093     MOVWF SSPBUF                       287:       MOVWF SSPBUF    ;SEND COMMAND
00C0  0842     MOVF 0x42, W                       288:       MOVF _ram_address_h, W   ;COPY ADDRESS TO W
00C1  1303     BCF STATUS, 0x6                    289:       BANKSEL SSPSTAT
                                                  290:   RAM_WAIT_AH
00C3  1C14     BTFSS SSPCON, 0x0                  291:       BTFSS BF	;IS THE TRANSMISSION READY
00C4  28C3     GOTO 0xC3                          292:       GOTO RAM_WAIT_AH	;IF NOT WAIT UNTIL IT IS
00C5  1303     BCF STATUS, 0x6                    293:       BANKSEL SSPBUF
00C7  0093     MOVWF SSPBUF                       294:       MOVWF SSPBUF    ;SEND ADDRESS HIGH BYTE
00C8  0841     MOVF 0x41, W                       295:       MOVF _ram_address_l, W   ;COPY ADDRESS TO W
00C9  1303     BCF STATUS, 0x6                    296:       BANKSEL SSPSTAT
                                                  297:   RAM_WAIT_AL
00CB  1C14     BTFSS SSPCON, 0x0                  298:       BTFSS BF
00CC  28CB     GOTO 0xCB                          299:       GOTO RAM_WAIT_AL
00CD  1303     BCF STATUS, 0x6                    300:       BANKSEL SSPBUF
00CF  0093     MOVWF SSPBUF                       301:       MOVWF SSPBUF    ;SEND ADDRESS LOW BYTE
00D0  1303     BCF STATUS, 0x6                    302:       BANKSEL SSPSTAT
                                                  303:   RAM_WAIT_D
00D2  1C14     BTFSS SSPCON, 0x0                  304:       BTFSS BF
00D3  28D2     GOTO 0xD2                          305:       GOTO RAM_WAIT_D
00D4  1303     BCF STATUS, 0x6                    306:       BANKSEL SSPBUF
00D6  0193     CLRF SSPBUF                        307:       CLRF SSPBUF
00D7  1303     BCF STATUS, 0x6                    308:       BANKSEL SSPSTAT
                                                  309:   RAM_WAIT_R
00D9  1C14     BTFSS SSPCON, 0x0                  310:       BTFSS BF
00DA  28D9     GOTO 0xD9                          311:       GOTO RAM_WAIT_R
00DB  1303     BCF STATUS, 0x6                    312:       BANKSEL SSPBUF
00DD  0813     MOVF SSPBUF, W                     313:       MOVF SSPBUF, W  ;COPY DATA TO W
00DE  1786     BSF PORTB, 0x7                     314:       BSF RAM_CS
00DF  0008     RETURN                             315:       RETURN
                                                  316:   
                                                  317:   RAM_WRITE_AUTO
00E0  0FC1     INCFSZ 0x41, F                     318:       INCFSZ _ram_address_l, F    ;INCREMENT LOW ADDRESS
00E1  03C2     DECF 0x42, F                       319:       DECF _ram_address_h, F
00E2  0AC2     INCF 0x42, F                       320:       INCF _ram_address_h, F	;IF LOW ADDRESS IS ZERO INCREMENT THE HIGH ADDRESS TOO
                                                  321:   RAM_WRITE
00E3  00C3     MOVWF 0x43                         322:       MOVWF _temp5
00E4  1386     BCF PORTB, 0x7                     323:       BCF RAM_CS    ;CHIP ENABLE
00E5  3002     MOVLW 0x2                          324:       MOVLW 0x02	;PUT WRITE COMMAND IN W
00E6  0093     MOVWF SSPBUF                       325:       MOVWF SSPBUF    ;SEND COMMAND
00E7  0842     MOVF 0x42, W                       326:       MOVF _ram_address_h, W   ;COPY ADDRESS TO W
00E8  1303     BCF STATUS, 0x6                    327:       BANKSEL SSPSTAT
                                                  328:   RAM_WRITE_AH
00EA  1C14     BTFSS SSPCON, 0x0                  329:       BTFSS BF	;IS THE TRANSMISSION READY
00EB  28EA     GOTO 0xEA                          330:       GOTO RAM_WRITE_AH	;IF NOT WAIT UNTIL IT IS
00EC  1303     BCF STATUS, 0x6                    331:       BANKSEL SSPBUF
00EE  0093     MOVWF SSPBUF                       332:       MOVWF SSPBUF    ;SEND ADDRESS HIGH BYTE
00EF  0841     MOVF 0x41, W                       333:       MOVF _ram_address_l, W   ;COPY ADDRESS TO W
00F0  1303     BCF STATUS, 0x6                    334:       BANKSEL SSPSTAT
                                                  335:   RAM_WRITE_AL
00F2  1C14     BTFSS SSPCON, 0x0                  336:       BTFSS BF
00F3  28F2     GOTO 0xF2                          337:       GOTO RAM_WRITE_AL
00F4  1303     BCF STATUS, 0x6                    338:       BANKSEL SSPBUF
00F6  0093     MOVWF SSPBUF                       339:       MOVWF SSPBUF    ;SEND ADDRESS LOW BYTE
00F7  0843     MOVF 0x43, W                       340:       MOVF _temp5, W    ;COPY DATA TO W
00F8  1303     BCF STATUS, 0x6                    341:       BANKSEL SSPSTAT
                                                  342:   RAM_WRITE_D
00FA  1C14     BTFSS SSPCON, 0x0                  343:       BTFSS BF
00FB  28FA     GOTO 0xFA                          344:       GOTO RAM_WRITE_D
00FC  1303     BCF STATUS, 0x6                    345:       BANKSEL SSPBUF
00FE  0093     MOVWF SSPBUF                       346:       MOVWF SSPBUF    ;SEND DATA
00FF  1303     BCF STATUS, 0x6                    347:       BANKSEL SSPSTAT
                                                  348:   RAM_WRITE_R
0101  1C14     BTFSS SSPCON, 0x0                  349:       BTFSS BF
0102  2901     GOTO 0x101                         350:       GOTO RAM_WRITE_R
0103  1303     BCF STATUS, 0x6                    351:       BANKSEL SSPBUF
0105  0813     MOVF SSPBUF, W                     352:       MOVF SSPBUF, W  ;COPY DUMMY DATA TO W
0106  1786     BSF PORTB, 0x7                     353:       BSF RAM_CS
0107  0008     RETURN                             354:       RETURN
                                                  355:       
                                                  356:   RAM_CONFIG
0108  1386     BCF PORTB, 0x7                     357:       BCF RAM_CS    ;CHIP ENABLE
0109  3001     MOVLW 0x1                          358:       MOVLW 0x01	;PUT WRITE COMMAND IN W
010A  0093     MOVWF SSPBUF                       359:       MOVWF SSPBUF    ;SEND COMMAND
010B  3000     MOVLW 0x0                          360:       MOVLW 0x00	;CONFIGURE FOR BYTE MODE
010C  1303     BCF STATUS, 0x6                    361:       BANKSEL SSPSTAT
                                                  362:   RAM_CONFIG_C
010E  1C14     BTFSS SSPCON, 0x0                  363:       BTFSS BF	;IS THE TRANSMISSION READY
010F  290E     GOTO 0x10E                         364:       GOTO RAM_CONFIG_C	;IF NOT WAIT UNTIL IT IS
0110  1303     BCF STATUS, 0x6                    365:       BANKSEL SSPBUF
0112  0093     MOVWF SSPBUF                       366:       MOVWF SSPBUF    ;SEND CONFIG DATA
0113  1303     BCF STATUS, 0x6                    367:       BANKSEL SSPSTAT
                                                  368:   RAM_CONFIG_D
0115  1C14     BTFSS SSPCON, 0x0                  369:       BTFSS BF
0116  2915     GOTO 0x115                         370:       GOTO RAM_CONFIG_D
0117  1303     BCF STATUS, 0x6                    371:       BANKSEL SSPBUF
0119  0813     MOVF SSPBUF, W                     372:       MOVF SSPBUF, W  ;COPY DUMMY DATA TO W
011A  1786     BSF PORTB, 0x7                     373:       BSF RAM_CS
011B  0008     RETURN                             374:       RETURN
                                                  375:   
                                                  376:   global _lcd_putc
                                                  377:   _lcd_putc
011C  1585     BSF PORTA, 0x3                     378:       BSF DISP_RS	;RS LINE TO 1 (PORT A BIT 3)
011D  2122     CALL 0x122                         379:       CALL _lcd_send
011E  2175     CALL 0x175                         380:       CALL _pulse_e
011F  3002     MOVLW 0x2                          381:       MOVLW 0x02
0120  2232     CALL 0x232                         382:       CALL _delay_millis
0121  0008     RETURN                             383:       RETURN
                                                  384:       
                                                  385:   global _lcd_send
                                                  386:   _lcd_send    ;SENDS DATA OR COMMAND TO LCD SHIFT REGISTER
0122  00C5     MOVWF 0x45                         387:       MOVWF _temp3	;COPY DATA TO TEMP VARIABLE
0123  3008     MOVLW 0x8                          388:       MOVLW 0x08
0124  00BC     MOVWF 0x3C                         389:       MOVWF _gen_count3	;COUNT 8 BITS
                                                  390:   LCD_SEND_LOOP
0125  1BC5     BTFSC 0x45, 0x7                    391:       BTFSC _temp3,7
0126  1788     BSF PORTD, 0x7                     392:       BSF DISP_DATA
0127  1FC5     BTFSS 0x45, 0x7                    393:       BTFSS _temp3,7
0128  1388     BCF PORTD, 0x7                     394:       BCF DISP_DATA
0129  0DC5     RLF 0x45, F                        395:       RLF _temp3,F
012A  1708     BSF PORTD, 0x6                     396:       BSF DISP_CLK
012B  0000     NOP                                397:       NOP
012C  0000     NOP                                398:       NOP
012D  1308     BCF PORTD, 0x6                     399:       BCF DISP_CLK
012E  0BBC     DECFSZ 0x3C, F                     400:       DECFSZ _gen_count3,F
012F  2925     GOTO 0x125                         401:       GOTO LCD_SEND_LOOP
0130  0008     RETURN                             402:       RETURN
                                                  403:   
                                                  404:   FUNCTIONSET_LCD
0131  1105     BCF PORTA, 0x2                     405:       BCF DISP_E	;MAKE SURE THAT E STARTS LOW
0132  1308     BCF PORTD, 0x6                     406:       BCF DISP_CLK     ;MAKE SURE DISPLAY CLOCK STARTS LOW
0133  1185     BCF PORTA, 0x3                     407:       BCF DISP_RS	;RS LINE TO 0 (PORT A BIT 3)
0134  3038     MOVLW 0x38                         408:       MOVLW 0b00111000	;FUNCTION SET COMMAND
0135  2122     CALL 0x122                         409:       CALL _lcd_send
0136  2175     CALL 0x175                         410:       CALL _pulse_e    ;PULSE E LINE HIGH (PORT A BIT 2)
0137  300A     MOVLW 0xA                          411:       MOVLW 10
0138  2232     CALL 0x232                         412:       CALL _delay_millis
0139  0008     RETURN                             413:       RETURN
                                                  414:   
                                                  415:   DISPLAYON
013A  1185     BCF PORTA, 0x3                     416:       BCF DISP_RS   ;RS LINE TO 0 (PORT A BIT 3)
013B  300F     MOVLW 0xF                          417:       MOVLW 0x0F  ;DISPLAY ON/OFF AND CURSOR COMMAND
013C  2122     CALL 0x122                         418:       CALL _lcd_send
013D  2175     CALL 0x175                         419:       CALL _pulse_e
013E  300A     MOVLW 0xA                          420:       MOVLW 10
013F  2232     CALL 0x232                         421:       CALL _delay_millis
0140  0008     RETURN                             422:       RETURN
                                                  423:   
                                                  424:   CLEARDISPLAY
0141  1185     BCF PORTA, 0x3                     425:       BCF DISP_RS	;RS LINE LOW
0142  3001     MOVLW 0x1                          426:       MOVLW 0x01	;CLEAR DISPLAY COMMAND
0143  2122     CALL 0x122                         427:       CALL _lcd_send	;WRITE TO DATA LINES
0144  2175     CALL 0x175                         428:       CALL _pulse_e
0145  300A     MOVLW 0xA                          429:       MOVLW 10
0146  2232     CALL 0x232                         430:       CALL _delay_millis
0147  0008     RETURN                             431:       RETURN
                                                  432:   
                                                  433:   SETHOME_LCD
0148  1185     BCF PORTA, 0x3                     434:       BCF DISP_RS ;RS LINE LOW
0149  3003     MOVLW 0x3                          435:       MOVLW 0x03   ;DISPLAY AND CURSOR HOME COMMAND
014A  2122     CALL 0x122                         436:       CALL _lcd_send ;WRITE TO DATA LINES
014B  2175     CALL 0x175                         437:       CALL _pulse_e
014C  3005     MOVLW 0x5                          438:       MOVLW 5
014D  2232     CALL 0x232                         439:       CALL _delay_millis
014E  0008     RETURN                             440:       RETURN
                                                  441:   
                                                  442:   global _lcd_line2
                                                  443:   _lcd_line2
014F  2148     CALL 0x148                         444:       CALL SETHOME_LCD
0150  3028     MOVLW 0x28                         445:       MOVLW 28H   ;SET COUNTER TO 40
0151  00BD     MOVWF 0x3D                         446:       MOVWF _gen_count2
0152  3010     MOVLW 0x10                         447:       MOVLW 0b00010000   ;CURSOR LEFT COMMAND
0153  2122     CALL 0x122                         448:       CALL _lcd_send ;WRITE COMMAND TO DATA LINES
                                                  449:   CLLOOP40
0154  1185     BCF PORTA, 0x3                     450:       BCF DISP_RS	;RS LINE LOW (COMMAND MODE)
0155  2175     CALL 0x175                         451:       CALL _pulse_e
0156  3002     MOVLW 0x2                          452:       MOVLW 2
0157  2232     CALL 0x232                         453:       CALL _delay_millis
0158  0BBD     DECFSZ 0x3D, F                     454:       DECFSZ _gen_count2, F
0159  2954     GOTO 0x154                         455:       GOTO CLLOOP40
015A  0008     RETURN                             456:       RETURN
                                                  457:   
                                                  458:   LCD_CLEAR1
015B  2148     CALL 0x148                         459:       CALL SETHOME_LCD
015C  3020     MOVLW 0x20                         460:       MOVLW 0x20 ;SPACE CHAR
015D  1585     BSF PORTA, 0x3                     461:       BSF DISP_RS ;RS LINE HIGH FOR DATA
015E  2122     CALL 0x122                         462:       CALL _lcd_send	;PUT CHAR ON THE DATA LINES
015F  3014     MOVLW 0x14                         463:       MOVLW 20 ;COUNT 20 SPACE CHARS
0160  00BD     MOVWF 0x3D                         464:       MOVWF _gen_count2
                                                  465:   LCD_CLEAR12
0161  2175     CALL 0x175                         466:       CALL _pulse_e
0162  3002     MOVLW 0x2                          467:       MOVLW 2
0163  2232     CALL 0x232                         468:       CALL _delay_millis
0164  0BBD     DECFSZ 0x3D, F                     469:       DECFSZ _gen_count2, F
0165  2961     GOTO 0x161                         470:       GOTO LCD_CLEAR12
0166  2148     CALL 0x148                         471:       CALL SETHOME_LCD
0167  0008     RETURN                             472:       RETURN
                                                  473:   
                                                  474:   global _lcd_clear2
                                                  475:   _lcd_clear2
0168  214F     CALL 0x14F                         476:       CALL _lcd_line2
0169  3020     MOVLW 0x20                         477:       MOVLW 0x20 ;SPACE CHAR
016A  1585     BSF PORTA, 0x3                     478:       BSF DISP_RS ;RS LINE HIGH FOR DATA
016B  2122     CALL 0x122                         479:       CALL _lcd_send	;PUT CHAR ON THE DATA LINES
016C  3014     MOVLW 0x14                         480:       MOVLW 20 ;COUNT 20 SPACE CHARS
016D  00BD     MOVWF 0x3D                         481:       MOVWF _gen_count2
                                                  482:   LCD_CLEAR22
016E  2175     CALL 0x175                         483:       CALL _pulse_e
016F  3002     MOVLW 0x2                          484:       MOVLW 2
0170  2232     CALL 0x232                         485:       CALL _delay_millis
0171  0BBD     DECFSZ 0x3D, F                     486:       DECFSZ _gen_count2, F
0172  296E     GOTO 0x16E                         487:       GOTO LCD_CLEAR22
0173  214F     CALL 0x14F                         488:       CALL _lcd_line2
0174  0008     RETURN                             489:       RETURN
                                                  490:   
                                                  491:   global _pulse_e
                                                  492:   _pulse_e
0175  1505     BSF PORTA, 0x2                     493:       BSF DISP_E   ;SET E LINE HIGH
0176  0000     NOP                                494:       NOP
0177  0000     NOP                                495:       NOP
0178  0000     NOP                                496:       NOP
0179  0000     NOP                                497:       NOP
017A  0000     NOP                                498:       NOP ;MODIFIED FOR 4MHZ CLOCK
017B  0000     NOP                                499:       NOP
017C  0000     NOP                                500:       NOP
017D  0000     NOP                                501:       NOP
017E  1105     BCF PORTA, 0x2                     502:       BCF DISP_E   ;SET E LINE LOW
017F  0008     RETURN                             503:       RETURN
                                                  504:   
                                                  505:   global _print_name
                                                  506:   _print_name
0180  1383     BCF STATUS, 0x7                    507:       BCF STATUS, IRP ;SET BANK 0 AND 1
0181  3053     MOVLW 0x53                         508:       MOVLW _tape_name
0182  0084     MOVWF FSR                          509:       MOVWF FSR
0183  3008     MOVLW 0x8                          510:       MOVLW 8  ;COUNT 8 CHARS
0184  00BD     MOVWF 0x3D                         511:       MOVWF _gen_count2
0185  1585     BSF PORTA, 0x3                     512:       BSF DISP_RS ;RS LINE HIGH FOR DATA
                                                  513:   PN_LOOP
0186  0800     MOVF INDF, W                       514:       MOVF INDF, W
0187  2122     CALL 0x122                         515:       CALL _lcd_send
0188  2175     CALL 0x175                         516:       CALL _pulse_e
0189  3002     MOVLW 0x2                          517:       MOVLW 2
018A  2232     CALL 0x232                         518:       CALL _delay_millis
018B  0A84     INCF FSR, F                        519:       INCF FSR, F
018C  0BBD     DECFSZ 0x3D, F                     520:       DECFSZ _gen_count2, F
018D  2986     GOTO 0x186                         521:       GOTO PN_LOOP
018E  0008     RETURN                             522:       RETURN
                                                  523:   
                                                  524:   ;TAPE_IN
                                                  525:   ;    MOVLW H'FF'
                                                  526:   ;    MOVWF RAM_ADDRESS_H
                                                  527:   ;    MOVWF RAM_ADDRESS_L
                                                  528:   ;    BSF FLAG_REG,1 ;DISSABLE RESET IF TRANSMISSION FAILS
                                                  529:   ;    CALL GET_LEADER
                                                  530:   ;    BCF FLAG_REG,1 ;ENABLE RESET IF TRANSMISSION FAILS
                                                  531:   ;    CALL SAVE_FIRST_BLOCK
                                                  532:   ;    INCFSZ RAM_ADDRESS_L, F    ;INCREMENT LOW ADDRESS
                                                  533:   ;    DECF RAM_ADDRESS_H, F
                                                  534:   ;    INCF RAM_ADDRESS_H, F	;IF LOW ADDRESS IS ZERO INCREMENT THE HIGH ADDRESS TOO
                                                  535:   ;    MOVF RAM_ADDRESS_H, W
                                                  536:   ;    MOVWF TAPE_SIZE_HIGH
                                                  537:   ;    MOVF RAM_ADDRESS_L, W
                                                  538:   ;    MOVWF TAPE_SIZE_LOW
                                                  539:   ;    CLRF RAM_ADDRESS_H
                                                  540:   ;    MOVLW H'03'
                                                  541:   ;    MOVWF RAM_ADDRESS_L
                                                  542:   ;    BCF STATUS, IRP ;SET BANKS 0 AND 1
                                                  543:   ;    MOVLW TAPE_NAME
                                                  544:   ;    MOVWF FSR
                                                  545:   ;    MOVLW D'08'
                                                  546:   ;    MOVWF GEN_COUNT
                                                  547:   ;NAME_COPY
                                                  548:   ;    CALL RAM_READ_AUTO
                                                  549:   ;    MOVF DREG, W
                                                  550:   ;    MOVWF INDF
                                                  551:   ;    INCF FSR, F
                                                  552:   ;    DECFSZ GEN_COUNT, F
                                                  553:   ;    GOTO NAME_COPY
                                                  554:   ;    RETURN
                                                  555:   
                                                  556:   ;GET_LEADER
                                                  557:   ;    MOVLW D'128'    ;LENGTH OF LEADER
                                                  558:   ;    MOVWF GEN_COUNT2
                                                  559:   ;LEADER_LOOP
                                                  560:   ;    CALL BUILD_BYTE
                                                  561:   ;    MOVF DREG,W
                                                  562:   ;    XORLW H'55'
                                                  563:   ;    BTFSS STATUS, Z
                                                  564:   ;    GOTO GL_FIX
                                                  565:   ;    DECFSZ GEN_COUNT2, F
                                                  566:   ;    GOTO LEADER_LOOP
                                                  567:   ;    RETURN
                                                  568:   ;GL_FIX
                                                  569:   ;    DECFSZ GEN_COUNT2, F
                                                  570:   ;    GOTO GL_FIX2
                                                  571:   ;    GOTO BUILD_PANIC
                                                  572:   ;GL_FIX2
                                                  573:   ;    CALL BUILD_ALIGN
                                                  574:   ;    MOVF DREG,W
                                                  575:   ;    XORLW H'55'
                                                  576:   ;    BTFSS STATUS,Z
                                                  577:   ;    GOTO BUILD_PANIC
                                                  578:   ;    DECFSZ GEN_COUNT2, F
                                                  579:   ;    GOTO LEADER_LOOP
                                                  580:   ;    GOTO BUILD_PANIC
                                                  581:   
                                                  582:   ;SAVE_FIRST_BLOCK
                                                  583:   ;    CALL BUILD_BYTE
                                                  584:   ;    BTFSS DREG,0    ;CHECK IF BIT 0 IS SET (IF IT IS CLEARED THERE HAS BEEN AN ALIGNMENT ERROR)
                                                  585:   ;    GOTO BUILD_PANIC
                                                  586:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  587:   ;    CALL BUILD_BYTE
                                                  588:   ;    CALL RAM_WRITE_AUTO	;SAVE SYNC BYTE
                                                  589:   ;    CALL BUILD_BYTE
                                                  590:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK TYPE BYTE
                                                  591:   ;    CALL BUILD_BYTE
                                                  592:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK LENGTH
                                                  593:   ;    MOVF DREG, W
                                                  594:   ;    MOVWF GEN_COUNT2
                                                  595:   ;FIRST_BLOCK_LOOP
                                                  596:   ;    CALL BUILD_BYTE
                                                  597:   ;    CALL RAM_WRITE_AUTO
                                                  598:   ;    DECFSZ GEN_COUNT2, F
                                                  599:   ;    GOTO FIRST_BLOCK_LOOP
                                                  600:   ;    CALL BUILD_BYTE
                                                  601:   ;    CALL RAM_WRITE_AUTO	;SAVE CHECKSUM
                                                  602:   ;    CALL BUILD_BYTE
                                                  603:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  604:   ;    CALL GET_LEADER ;GETS THE SECOND LEADER
                                                  605:   ;SAVE_BLOCKS
                                                  606:   ;    CALL BUILD_BYTE
                                                  607:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  608:   ;    CALL BUILD_BYTE
                                                  609:   ;    CALL RAM_WRITE_AUTO	;SAVE SYNC BYTE
                                                  610:   ;    CALL BUILD_BYTE
                                                  611:   ;    INCFSZ DREG, W  ;CHECK IF BLOCK IS END OF FILE
                                                  612:   ;    GOTO NOT_EOF_BLOCK
                                                  613:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK TYPE
                                                  614:   ;    CALL BUILD_BYTE
                                                  615:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK LENGTH
                                                  616:   ;    CALL BUILD_BYTE
                                                  617:   ;    CALL RAM_WRITE_AUTO	;SAVE CHECKSUM
                                                  618:   ;    CALL BUILD_BYTE
                                                  619:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  620:   ;    RETURN
                                                  621:   ;NOT_EOF_BLOCK
                                                  622:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK TYPE
                                                  623:   ;    CALL BUILD_BYTE
                                                  624:   ;    CALL RAM_WRITE_AUTO	;SAVE LENGTH BYTE
                                                  625:   ;    MOVF DREG, W
                                                  626:   ;    MOVWF GEN_COUNT2 ;COPY LENGTH TO GEN_COUNT2
                                                  627:   ;BLOCK_DATA_LOOP
                                                  628:   ;    CALL BUILD_BYTE
                                                  629:   ;    CALL RAM_WRITE_AUTO
                                                  630:   ;    DECFSZ GEN_COUNT2, F
                                                  631:   ;    GOTO BLOCK_DATA_LOOP
                                                  632:   ;    CALL BUILD_BYTE
                                                  633:   ;    CALL RAM_WRITE_AUTO	;SAVE CHECKSUM
                                                  634:   ;    CALL BUILD_BYTE
                                                  635:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  636:   ;    GOTO SAVE_BLOCKS
                                                  637:   
                                                  638:   ;BUILD_ALIGN ;SKIPS INITIAL WAIT IN AN ATTEMPT TO FIX ALIGNMENT. BUILD_BYTE IS THE NORMAL ENTRY POINT
                                                  639:   ;    MOVLW H'08'
                                                  640:   ;    MOVWF GEN_COUNT ;INITIALIZE COUNTER TO 8
                                                  641:   ;    MOVF PORTB, W
                                                  642:   ;    XORLW H'02' ;INVERT TAPE BIT
                                                  643:   ;    MOVWF TEMP1	    ;COPY PORTB TO TEMP1
                                                  644:   ;    GOTO WAIT_STOP
                                                  645:   ;BUILD_BYTE
                                                  646:   ;    MOVLW H'08'
                                                  647:   ;    MOVWF GEN_COUNT ;INITIALIZE COUNTER TO 8
                                                  648:   ;BUILD_LOOP
                                                  649:   ;    MOVF PORTB, W
                                                  650:   ;    MOVWF TEMP1	    ;COPY PORTB TO TEMP1
                                                  651:   ;    CLRF PULSE_LENGTH
                                                  652:   ;    RRF DREG, F
                                                  653:   ;    BCF DREG, 7
                                                  654:   ;WAIT_START
                                                  655:   ;    MOVF PORTB, W
                                                  656:   ;    XORWF TEMP1, W  ;COMPARE PORTB WITH PREVIOUS STATE
                                                  657:   ;    MOVWF TEMP2	    ;STORE RESULT IN TEMP2
                                                  658:   ;    BTFSS TEMP2, 1
                                                  659:   ;    GOTO WAIT_START ;IF STATE HAS NOT CHANGED KEEP WAITING
                                                  660:   ;WAIT_STOP
                                                  661:   ;    CALL TAPE_DELAY
                                                  662:   ;    INCF PULSE_LENGTH, F	;#1
                                                  663:   ;    MOVF PULSE_LENGTH, W    ;#2
                                                  664:   ;    SUBLW D'22'	    ;#3
                                                  665:   ;    BTFSC STATUS, C ;CHECK IF LENGTH IS GREATER THAN 22 #4
                                                  666:   ;    GOTO BUILD_NO_ERROR	;IF NOT CONTINUE NORMALLY #6
                                                  667:   ;BUILD_ERROR
                                                  668:   ;    BTFSS FLAG_REG, 1 ;IF ERROR IS IN FIRST BYTE TRY TO RECOVER
                                                  669:   ;    GOTO BUILD_PANIC   ;IF NOT RESET TO AVOID INFINITE LOOP
                                                  670:   ;    ;MOVF GEN_COUNT, W
                                                  671:   ;    ;SUBLW H'08'
                                                  672:   ;    ;BTFSS STATUS, Z ;CHECK IF ERROR IS IN FIRST BIT
                                                  673:   ;    ;GOTO BUILD_PANIC   ; IF NOT RESET TO AVOID INFINITE LOOP
                                                  674:   ;    GOTO BUILD_BYTE ;IF IT IS IN FIRST BIT OF FIRST BYTE RESTART SUBROUTINE
                                                  675:   ;BUILD_NO_ERROR
                                                  676:   ;    MOVF PORTB, W   ;#7
                                                  677:   ;    XORWF TEMP1, W  ;#8
                                                  678:   ;    MOVWF TEMP2	    ;#9
                                                  679:   ;    BTFSC TEMP2, 1  ;#10
                                                  680:   ;    GOTO WAIT_STOP  ;WAIT UNTIL TAPE INPUT RETURNS TO ORIGINAL STATE #12
                                                  681:   ;    MOVF PULSE_LENGTH, W
                                                  682:   ;    SUBLW D'08'
                                                  683:   ;    BTFSC STATUS, C ;CHECK IF LENGTH IS LESS THAN 8
                                                  684:   ;    GOTO BUILD_ERROR	;IF IT IS GO TO LOCAL ERROR HANDLER
                                                  685:   ;    MOVLW D'15'
                                                  686:   ;    SUBWF PULSE_LENGTH, F   ;SUBTRACT THRESHOLD FROM PULSE LENGTH
                                                  687:   ;    BTFSC PULSE_LENGTH, 7   ;CHECK IF PULSE LENGHT IS NEGATIVE
                                                  688:   ;    BSF DREG, 7		    ;IF IT IS SET BIT IN DREG
                                                  689:   ;    DECFSZ GEN_COUNT, F
                                                  690:   ;    GOTO BUILD_LOOP
                                                  691:   ;    RETLW H'00'	;RETURN ZERO TO INDICATE SUCCESS
                                                  692:   
                                                  693:   ;BUILD_PANIC ;ENABLES THE WATCHDOG TO CAUSE A RESET
                                                  694:   ;    BANKSEL WDTCON
                                                  695:   ;    BSF WDTCON, SWDTEN  ;ENABLE WATCHDOG
                                                  696:   ;BP_HALT
                                                  697:   ;    GOTO BP_HALT    ;WAIT FOR THE WATCHDOG TO DO THE THING
                                                  698:   
                                                  699:   ;TAPE_DELAY
                                                  700:   ;    NOP
                                                  701:   ;    NOP
                                                  702:   ;    NOP
                                                  703:   ;    NOP
                                                  704:   ;    NOP	;5 CYCLE DELAY
                                                  705:   ;    RETURN
                                                  706:   
                                                  707:   TAPE_OUT
018F  01C7     CLRF 0x47                          708:       CLRF _temp1
0190  01B6     CLRF 0x36                          709:       CLRF _bit_count
0191  30FF     MOVLW 0xFF                         710:       MOVLW 0xFF
0192  00C2     MOVWF 0x42                         711:       MOVWF _ram_address_h
0193  00C1     MOVWF 0x41                         712:       MOVWF _ram_address_l	;RAM READ FUNCTION WILL AUTO INCREMENT ADDRESS, SO IT SHOULD OVERFLOW WHEN IT IS FIRST CALLED
0194  3055     MOVLW 0x55                         713:       MOVLW 0x55
0195  00C3     MOVWF 0x43                         714:       MOVWF _temp5    ;TAPE LEADER VALUE
0196  307F     MOVLW 0x7F                         715:       MOVLW 127
0197  00BE     MOVWF 0x3E                         716:       MOVWF _gen_count ;128 LEADER BYTES
0198  0181     CLRF TMR0                          717:       CLRF TMR0
0199  0000     NOP                                718:       NOP
019A  110B     BCF INTCON, 0x2                    719:       BCF T0IF
019B  178B     BSF INTCON, 0x7                    720:       BSF GIE	;ENABLE INTERRUPT
                                                  721:   LEADER_OUT
019C  1D36     BTFSS 0x36, 0x2                    722:       BTFSS _bit_count, 2
019D  299C     GOTO 0x19C                         723:       GOTO LEADER_OUT	;WAIT UNTIL BIT COUNT IS NOT ZERO
                                                  724:   LEADER_WAIT
019E  1936     BTFSC 0x36, 0x2                    725:       BTFSC _bit_count, 2
019F  299E     GOTO 0x19E                         726:       GOTO LEADER_WAIT	;WAIT UNTIL BIT_COUNT IS ZERO
01A0  0BBE     DECFSZ 0x3E, F                     727:       DECFSZ _gen_count, F
01A1  299C     GOTO 0x19C                         728:       GOTO LEADER_OUT	;LOOP UNTIL 128 LEADER BYTES HAVE BEEN SENT
01A2  3016     MOVLW 0x16                         729:       MOVLW 22
01A3  00BE     MOVWF 0x3E                         730:       MOVWF _gen_count	;ONE PAST THE END OF THE NAME FILE
                                                  731:   TAPE_NAMEBLOCK
01A4  20BA     CALL 0xBA                          732:       CALL RAM_READ_AUTO	;GET FIRST BYTE
01A5  00C3     MOVWF 0x43                         733:       MOVWF _temp5
                                                  734:   TAPE_W1
01A6  1D36     BTFSS 0x36, 0x2                    735:       BTFSS _bit_count, 2
01A7  29A6     GOTO 0x1A6                         736:       GOTO TAPE_W1    ;WAIT UNTIL BIT COUNT IS NOT ZERO
                                                  737:   TAPE_W2
01A8  1936     BTFSC 0x36, 0x2                    738:       BTFSC _bit_count, 2
01A9  29A8     GOTO 0x1A8                         739:       GOTO TAPE_W2
01AA  0BBE     DECFSZ 0x3E, F                     740:       DECFSZ _gen_count, F
01AB  29A4     GOTO 0x1A4                         741:       GOTO TAPE_NAMEBLOCK
01AC  138B     BCF INTCON, 0x7                    742:       BCF GIE ;STOP INTERRUPT
01AD  2204     CALL 0x204                         743:       CALL TAPE_PAUSE ;1/2 SECOND SILENCE
01AE  307F     MOVLW 0x7F                         744:       MOVLW 127
01AF  00BE     MOVWF 0x3E                         745:       MOVWF _gen_count ;128 LEADER BYTES
01B0  0181     CLRF TMR0                          746:       CLRF TMR0
01B1  01C7     CLRF 0x47                          747:       CLRF _temp1
01B2  0000     NOP                                748:       NOP
01B3  110B     BCF INTCON, 0x2                    749:       BCF T0IF
01B4  178B     BSF INTCON, 0x7                    750:       BSF GIE	;ENABLE INTERRUPT
                                                  751:   LEADER_OUT2
01B5  1D36     BTFSS 0x36, 0x2                    752:       BTFSS _bit_count, 2
01B6  29B5     GOTO 0x1B5                         753:       GOTO LEADER_OUT2	;WAIT UNTIL BIT COUNT IS NOT ZERO
                                                  754:   LEADER_WAIT2
01B7  1936     BTFSC 0x36, 0x2                    755:       BTFSC _bit_count, 2
01B8  29B7     GOTO 0x1B7                         756:       GOTO LEADER_WAIT2	;WAIT UNTIL BIT_COUNT IS ZERO
01B9  0BBE     DECFSZ 0x3E, F                     757:       DECFSZ _gen_count, F
01BA  29B5     GOTO 0x1B5                         758:       GOTO LEADER_OUT2	;LOOP UNTIL 128 LEADER BYTES HAVE BEEN SENT
                                                  759:   TAPE_NE
01BB  20BA     CALL 0xBA                          760:       CALL RAM_READ_AUTO
01BC  00C3     MOVWF 0x43                         761:       MOVWF _temp5
                                                  762:   TAPE_W3
01BD  1D36     BTFSS 0x36, 0x2                    763:       BTFSS _bit_count, 2
01BE  29BD     GOTO 0x1BD                         764:       GOTO TAPE_W3    ;WAIT UNTIL BIT_COUNT IS NOT ZERO
                                                  765:   TAPE_W4
01BF  1936     BTFSC 0x36, 0x2                    766:       BTFSC _bit_count, 2
01C0  29BF     GOTO 0x1BF                         767:       GOTO TAPE_W4
01C1  0838     MOVF 0x38, W                       768:       MOVF _tape_size_high, W
01C2  0642     XORWF 0x42, W                      769:       XORWF _ram_address_h, W
01C3  00C5     MOVWF 0x45                         770:       MOVWF _temp3	;STORE RESULT IN TEMP3
01C4  0AC5     INCF 0x45, F                       771:       INCF _temp3, F   ;INCREMENT RESULT
01C5  0BC5     DECFSZ 0x45, F                     772:       DECFSZ _temp3, F
01C6  29BB     GOTO 0x1BB                         773:       GOTO TAPE_NE
01C7  0837     MOVF 0x37, W                       774:       MOVF _tape_size_low, W
01C8  0641     XORWF 0x41, W                      775:       XORWF _ram_address_l, W
01C9  00C5     MOVWF 0x45                         776:       MOVWF _temp3	;STORE RESULT IN TEMP3
01CA  0AC5     INCF 0x45, F                       777:       INCF _temp3, F  ;TODO: this needs optimizing
01CB  0BC5     DECFSZ 0x45, F                     778:       DECFSZ _temp3, F
01CC  29BB     GOTO 0x1BB                         779:       GOTO TAPE_NE
01CD  138B     BCF INTCON, 0x7                    780:       BCF GIE
01CE  0008     RETURN                             781:       RETURN
                                                  782:   
                                                  783:   global _tape_int
                                                  784:   _tape_int
01CF  00C4     MOVWF 0x44                         785:       MOVWF _temp4	;SAVE W REG
01D0  110B     BCF INTCON, 0x2                    786:       BCF T0IF
01D1  303B     MOVLW 0x3B                         787:       MOVLW 59	;USED TO BE 58, CHANGED IT BECAUSE I ADDED THE SAVE W INSTRUCTION
01D2  0081     MOVWF TMR0                         788:       MOVWF TMR0	;PRELOAD TIMER
01D3  1847     BTFSC 0x47, 0x0                    789:       BTFSC _temp1, 0  ;IDENTIFY PHASE
01D4  29E4     GOTO 0x1E4                         790:       GOTO PHASE1
01D5  18C7     BTFSC 0x47, 0x1                    791:       BTFSC _temp1, 1
01D6  29EB     GOTO 0x1EB                         792:       GOTO PHASE2
01D7  1947     BTFSC 0x47, 0x2                    793:       BTFSC _temp1, 2
01D8  29F3     GOTO 0x1F3                         794:       GOTO PHASE3
01D9  19C7     BTFSC 0x47, 0x3                    795:       BTFSC _temp1, 3
01DA  29F7     GOTO 0x1F7                         796:       GOTO PHASE4
01DB  3004     MOVLW 0x4                          797:       MOVLW 0b00000100	;DEFAULT PHASE - LOAD NEW DATA AND INITIALIZE VARIABLES
01DC  0686     XORWF PORTB, F                     798:       XORWF PORTB, F  ;TOGGLE TAPE OUT
01DD  0843     MOVF 0x43, W                       799:       MOVF _temp5, W
01DE  00C6     MOVWF 0x46                         800:       MOVWF _temp2	    ;COPY NEW DATA TO BUFFER
01DF  01B6     CLRF 0x36                          801:       CLRF _bit_count
01E0  3001     MOVLW 0x1                          802:       MOVLW 0x01
01E1  00C7     MOVWF 0x47                         803:       MOVWF _temp1	;SET PHASE TO 1
01E2  0844     MOVF 0x44, W                       804:       MOVF _temp4, W   ;RESTORE W
01E3  0009     RETFIE                             805:       RETFIE
                                                  806:   PHASE1	;TOGGLE IF BIT IS 1
01E4  3004     MOVLW 0x4                          807:   	MOVLW 0b00000100	;WILL USE THIS TO TOGGLE OUTPUT
01E5  1846     BTFSC 0x46, 0x0                    808:   	BTFSC _temp2, 0	;CHECK IF BIT IS 1 OR 0
01E6  0686     XORWF PORTB, F                     809:   	XORWF PORTB, F	;IF BIT IS 1 TOGGLE OUTPUT
01E7  3002     MOVLW 0x2                          810:   	MOVLW 0x02
01E8  00C7     MOVWF 0x47                         811:   	MOVWF _temp1	;SET PHASE TO 2
01E9  0844     MOVF 0x44, W                       812:   	MOVF _temp4, W   ;RESTORE W
01EA  0009     RETFIE                             813:   	RETFIE
                                                  814:   PHASE2	;ALWAYS TOGGLE
01EB  3004     MOVLW 0x4                          815:   	MOVLW 0b00000100
01EC  0686     XORWF PORTB, F                     816:   	XORWF PORTB, F	;TOGGLE OUTPUT
01ED  1846     BTFSC 0x46, 0x0                    817:   	BTFSC _temp2, 0	;CHECK IF BIT IS 1 OR 0
01EE  29F9     GOTO 0x1F9                         818:   	GOTO PHASE2_NEXT	;IF BIT IS SET THEN LOAD NEXT BIT AND RESET PHASE
01EF  3004     MOVLW 0x4                          819:   	MOVLW 0x04
01F0  00C7     MOVWF 0x47                         820:   	MOVWF _temp1	;SET PHASE TO 3
01F1  0844     MOVF 0x44, W                       821:   	MOVF _temp4, W	;RESTORE W
01F2  0009     RETFIE                             822:   	RETFIE
                                                  823:   PHASE3	;NEVER TOGGLE
01F3  3008     MOVLW 0x8                          824:   	MOVLW 0x08
01F4  00C7     MOVWF 0x47                         825:   	MOVWF _temp1	;SET PHASE TO 4
01F5  0844     MOVF 0x44, W                       826:   	MOVF _temp4, W
01F6  0009     RETFIE                             827:   	RETFIE
                                                  828:   PHASE4	;ALWAYS TOGGLE
01F7  3004     MOVLW 0x4                          829:   	MOVLW 0b00000100
01F8  0686     XORWF PORTB, F                     830:   	XORWF PORTB, F	;TOGGLE OUTPUT
                                                  831:   PHASE2_NEXT
01F9  3001     MOVLW 0x1                          832:       MOVLW 0x01
01FA  00C7     MOVWF 0x47                         833:       MOVWF _temp1	;SET PHASE TO 1
01FB  0CC6     RRF 0x46, F                        834:       RRF _temp2, F	;SHIFT TO NEXT BIT
01FC  0AB6     INCF 0x36, F                       835:       INCF _bit_count, F	;NEXT BIT COUNT
01FD  1DB6     BTFSS 0x36, 0x3                    836:       BTFSS _bit_count, 3	;CHECK IF BIT COUNT HAS REACHED 8
01FE  2A02     GOTO 0x202                         837:       GOTO PHASE_DONE	;IF NOT, RETURN
01FF  01B6     CLRF 0x36                          838:       CLRF _bit_count	;CLEAR BIT COUNT
0200  0843     MOVF 0x43, W                       839:       MOVF _temp5, W
0201  00C6     MOVWF 0x46                         840:       MOVWF _temp2	;COPY NEW DATA TO BUFFER
                                                  841:   PHASE_DONE
0202  0844     MOVF 0x44, W                       842:       MOVF _temp4, W
0203  0009     RETFIE                             843:       RETFIE
                                                  844:   
                                                  845:   TAPE_PAUSE
0204  3020     MOVLW 0x20                         846:       MOVLW 32
0205  00BE     MOVWF 0x3E                         847:       MOVWF _gen_count
                                                  848:   TP1
0206  3036     MOVLW 0x36                         849:       MOVLW 54
0207  00BD     MOVWF 0x3D                         850:       MOVWF _gen_count2
                                                  851:   TP2
0208  305F     MOVLW 0x5F                         852:       MOVLW 95
0209  00BF     MOVWF 0x3F                         853:       MOVWF _ldel_count
                                                  854:   TP3
020A  0BBF     DECFSZ 0x3F, F                     855:       DECFSZ _ldel_count, F
020B  2A0A     GOTO 0x20A                         856:       GOTO TP3
020C  0BBD     DECFSZ 0x3D, F                     857:       DECFSZ _gen_count2, F
020D  2A08     GOTO 0x208                         858:       GOTO TP2
020E  0BBE     DECFSZ 0x3E, F                     859:       DECFSZ _gen_count, F
020F  2A06     GOTO 0x206                         860:       GOTO TP1
0210  0008     RETURN                             861:       RETURN
                                                  862:       
                                                  863:   SPI_TRANSFER
0211  0093     MOVWF SSPBUF                       864:       MOVWF SSPBUF    ;SEND DATA
0212  1303     BCF STATUS, 0x6                    865:       BANKSEL SSPSTAT
                                                  866:   SPI_WAIT
0214  1C14     BTFSS SSPCON, 0x0                  867:       BTFSS BF	;IS THE TRANSMISSION READY
0215  2A14     GOTO 0x214                         868:       GOTO SPI_WAIT	;IF NOT WAIT UNTIL IT IS
0216  1303     BCF STATUS, 0x6                    869:       BANKSEL SSPBUF
0218  0813     MOVF SSPBUF, W                     870:       MOVF SSPBUF, W  ;COPY DATA TO W
0219  0008     RETURN                             871:       RETURN
                                                  872:   
                                                  873:   BUILD_WORD  ;GENERATES PSEUDO-RANDOM TEST DATA
021A  3010     MOVLW 0x10                         874:       MOVLW 16
021B  00BB     MOVWF 0x3B                         875:       MOVWF _gen_count4
                                                  876:   BUILD_WORD_LOOP
                                                  877:       ;GET WORD HERE
021C  01C5     CLRF 0x45                          878:       CLRF _temp3  ;THIS WILL CONTAIN BIT 7 OF S_REG_LOW
021D  1BA7     BTFSC 0x27, 0x7                    879:       BTFSC _s_reg_low, 7
021E  1445     BSF 0x45, 0x0                      880:       BSF _temp3, 0
021F  0827     MOVF 0x27, W                       881:       MOVF _s_reg_low, W
0220  3901     ANDLW 0x1                          882:       ANDLW 0x01	    ;GET BIT 0
0221  3A01     XORLW 0x1                          883:       XORLW 0x01	    ;FLIP BIT 0
0222  06C5     XORWF 0x45, F                      884:       XORWF _temp3, F   ;TEMP3 NOW CONTAINS BIT0 ^ BIT7 ^ 1
0223  0CC5     RRF 0x45, F                        885:       RRF _temp3, F
0224  0CA8     RRF 0x28, F                        886:       RRF _s_reg_high, F
0225  0CA7     RRF 0x27, F                        887:       RRF _s_reg_low, F
0226  0BBB     DECFSZ 0x3B, F                     888:       DECFSZ _gen_count4, F
0227  2A1C     GOTO 0x21C                         889:       GOTO BUILD_WORD_LOOP
0228  0008     RETURN                             890:       RETURN
                                                  891:   
                                                  892:   GET_TEST_BYTE   ;SPLITS PSEUDO-RANDOM TEST DATA INTO SINGLE BYTES
0229  1C23     BTFSS 0x23, 0x0                    893:       BTFSS F_SRL_VALID
022A  2A2E     GOTO 0x22E                         894:       GOTO GTB_UPDATE
022B  0827     MOVF 0x27, W                       895:       MOVF _s_reg_low, W
022C  1023     BCF 0x23, 0x0                      896:       BCF F_SRL_VALID
022D  0008     RETURN                             897:       RETURN
                                                  898:   GTB_UPDATE
022E  221A     CALL 0x21A                         899:       CALL BUILD_WORD
022F  1423     BSF 0x23, 0x0                      900:       BSF F_SRL_VALID
0230  0828     MOVF 0x28, W                       901:       MOVF _s_reg_high, W
0231  0008     RETURN                             902:       RETURN
                                                  903:   
                                                  904:   global _delay_millis
                                                  905:   _delay_millis    ;DESIGNED FOR 4MHZ CLOCK
0232  00A4     MOVWF 0x24                         906:       MOVWF _delay_counter
                                                  907:   DM_MILLIS
0233  3014     MOVLW 0x14                         908:       MOVLW 20
0234  00BF     MOVWF 0x3F                         909:       MOVWF _ldel_count
                                                  910:   DM_OUTER
0235  3010     MOVLW 0x10                         911:       MOVLW 16
0236  00C0     MOVWF 0x40                         912:       MOVWF _sdel_count
                                                  913:   DM_INNER
0237  0BC0     DECFSZ 0x40, F                     914:       DECFSZ _sdel_count,F
0238  2A37     GOTO 0x237                         915:       GOTO DM_INNER
0239  0BBF     DECFSZ 0x3F, F                     916:       DECFSZ _ldel_count,F
023A  2A35     GOTO 0x235                         917:       GOTO DM_OUTER
023B  0BA4     DECFSZ 0x24, F                     918:       DECFSZ _delay_counter,F
023C  2A33     GOTO 0x233                         919:       GOTO DM_MILLIS
023D  0008     RETURN                             920:       RETURN
                                                  921:   
                                                  922:   global _print_test_data
                                                  923:   _print_test_data
023E  01BE     CLRF 0x3E                          924:       CLRF _gen_count
                                                  925:   PTD_OUTER
023F  01BD     CLRF 0x3D                          926:       CLRF _gen_count2
                                                  927:   PTD_INNER
0240  083D     MOVF 0x3D, W                       928:       MOVF _gen_count2, W
0241  390F     ANDLW 0xF                          929:       ANDLW 0x0F
0242  1D03     BTFSS STATUS, 0x2                  930:       BTFSS ZERO  ;EVERY 16 WORDS PRINT A NEWLINE
0243  2A46     GOTO 0x246                         931:       GOTO PTD_NO_NEWLINE
0244  300A     MOVLW 0xA                          932:       MOVLW 0x0A ;NEWLINE CHAR
0245  20B6     CALL 0xB6                          933:       CALL _uart_send
                                                  934:   PTD_NO_NEWLINE
0246  2229     CALL 0x229                         935:       CALL GET_TEST_BYTE  ;GET MSB
0247  158A     BSF PCLATH, 0x3                    936:       PAGESEL _byte_to_hex
0248  27A5     CALL 0x7A5                         937:       CALL (_byte_to_hex & 0x7FF)
0249  118A     BCF PCLATH, 0x3                    938:       PAGESEL _print_test_data
024A  0876     MOVF 0x76, W                       939:       MOVF _hex_char_high, W
024B  20B6     CALL 0xB6                          940:       CALL _uart_send  ;HIGH NIBBLE HIGH BYTE
024C  0875     MOVF 0x75, W                       941:       MOVF _hex_char_low ,W
024D  20B6     CALL 0xB6                          942:       CALL _uart_send  ;LOW NIBBLE HIGH BYTE
024E  2229     CALL 0x229                         943:       CALL GET_TEST_BYTE  ;GET LSB
024F  158A     BSF PCLATH, 0x3                    944:       PAGESEL _byte_to_hex
0250  27A5     CALL 0x7A5                         945:       CALL (_byte_to_hex & 0x7FF)
0251  118A     BCF PCLATH, 0x3                    946:       PAGESEL _print_test_data
0252  0876     MOVF 0x76, W                       947:       MOVF _hex_char_high, W
0253  20B6     CALL 0xB6                          948:       CALL _uart_send  ;HIGH NIBBLE LOW BYTE
0254  0875     MOVF 0x75, W                       949:       MOVF _hex_char_low, W
0255  20B6     CALL 0xB6                          950:       CALL _uart_send  ;LOW NIBBLE LOW BYTE
0256  0BBD     DECFSZ 0x3D, F                     951:       DECFSZ _gen_count2, F
0257  2A40     GOTO 0x240                         952:       GOTO PTD_INNER
0258  0BBE     DECFSZ 0x3E, F                     953:       DECFSZ _gen_count, F
0259  2A3F     GOTO 0x23F                         954:       GOTO PTD_OUTER
025A  0008     RETURN                             955:       RETURN
                                                  956:   
                                                  957:   ;CHECK_FREE_SPACE
                                                  958:   ;    BCF FLAG_REG, 3
                                                  959:   ;    BCF FLAG_REG, 4
                                                  960:   ;    MOVF USB_FREE_SPACE3, F
                                                  961:   ;    BTFSS STATUS, Z
                                                  962:   ;    GOTO CFS2
                                                  963:   ;    BSF FLAG_REG, 3
                                                  964:   ;    BSF FLAG_REG, 4
                                                  965:   ;    RETURN
                                                  966:   ;CFS2
                                                  967:   ;    MOVF USB_FREE_SPACE2, W
                                                  968:   ;    SUBLW H'02'
                                                  969:   ;    BTFSS STATUS, C
                                                  970:   ;    GOTO CFS3
                                                  971:   ;    BSF FLAG_REG, 3
                                                  972:   ;    BSF FLAG_REG, 4
                                                  973:   ;    RETURN
                                                  974:   ;CFS3
                                                  975:   ;    MOVF USB_FREE_SPACE1, W
                                                  976:   ;    XORWF TAPE_SIZE_HIGH, W
                                                  977:   ;    BTFSC STATUS, Z
                                                  978:   ;    GOTO CFS4
                                                  979:   ;    MOVF TAPE_SIZE_HIGH, W
                                                  980:   ;    SUBWF USB_FREE_SPACE1, W
                                                  981:   ;    BTFSC STATUS, C
                                                  982:   ;    BSF FLAG_REG, 3
                                                  983:   ;    RETURN
                                                  984:   ;CFS4
                                                  985:   ;    MOVF TAPE_SIZE_LOW, F
                                                  986:   ;    BTFSC STATUS, Z
                                                  987:   ;    BSF FLAG_REG, 3
                                                  988:   ;    RETURN
                                                  989:   
                                                  990:   global _usb_reset_all
                                                  991:   _usb_reset_all
025B  1108     BCF PORTD, 0x2                     992:       BCF USB_CS ;CH376 CE LINE LOW
025C  3005     MOVLW 0x5                          993:       MOVLW 0x05 ;RESET ALL COMMAND
025D  2211     CALL 0x211                         994:       CALL SPI_TRANSFER
025E  1508     BSF PORTD, 0x2                     995:       BSF USB_CS ;CH376S CE LINE HIGH
025F  0008     RETURN                             996:       RETURN
                                                  997:   
                                                  998:   global _usb_set_file_name
                                                  999:   _usb_set_file_name
0260  1383     BCF STATUS, 0x7                    1000:      BCF STATUS, IRP
0261  3053     MOVLW 0x53                         1001:      MOVLW _tape_name ;NAME ADDRESS
0262  0084     MOVWF FSR                          1002:      MOVWF FSR
0263  3008     MOVLW 0x8                          1003:      MOVLW 0x08 ;NAME LENGTH
0264  00BB     MOVWF 0x3B                         1004:      MOVWF _gen_count4
0265  1108     BCF PORTD, 0x2                     1005:      BCF USB_CS
0266  302F     MOVLW 0x2F                         1006:      MOVLW 0x2F ;SET FILE NAME COMMAND
0267  2211     CALL 0x211                         1007:      CALL SPI_TRANSFER
0268  302F     MOVLW 0x2F                         1008:      MOVLW 0x2F ;'\' CHAR NEEDED AT START OF NAME
0269  2211     CALL 0x211                         1009:      CALL SPI_TRANSFER
                                                  1010:  USFN_LOOP
026A  0800     MOVF INDF, W                       1011:      MOVF INDF, W
026B  2211     CALL 0x211                         1012:      CALL SPI_TRANSFER
026C  0A84     INCF FSR, F                        1013:      INCF FSR, F
026D  0BBB     DECFSZ 0x3B, F                     1014:      DECFSZ _gen_count4, F
026E  2A6A     GOTO 0x26A                         1015:      GOTO USFN_LOOP
026F  0100     CLRW                               1016:      CLRW   ;NULL CHAR AT END OF NAME
0270  2211     CALL 0x211                         1017:      CALL SPI_TRANSFER
0271  1508     BSF PORTD, 0x2                     1018:      BSF USB_CS ;CE LINE HIGH
0272  0008     RETURN                             1019:      RETURN
                                                  1020:  
                                                  1021:  global _usb_file_open
                                                  1022:  _usb_file_open
0273  1108     BCF PORTD, 0x2                     1023:      BCF USB_CS
0274  3032     MOVLW 0x32                         1024:      MOVLW 0x32 ;FILE OPEN COMMAND
0275  2211     CALL 0x211                         1025:      CALL SPI_TRANSFER
0276  1508     BSF PORTD, 0x2                     1026:      BSF USB_CS
0277  0008     RETURN                             1027:      RETURN
                                                  1028:  
                                                  1029:  global _usb_file_close
                                                  1030:  _usb_file_close
0278  1108     BCF PORTD, 0x2                     1031:      BCF USB_CS
0279  3036     MOVLW 0x36                         1032:      MOVLW 0x36 ;FILE CLOSE COMMAND
027A  2211     CALL 0x211                         1033:      CALL SPI_TRANSFER
027B  3001     MOVLW 0x1                          1034:      MOVLW 0x01 ;UPDATE FILE LENGTH
027C  2211     CALL 0x211                         1035:      CALL SPI_TRANSFER
027D  1508     BSF PORTD, 0x2                     1036:      BSF USB_CS
027E  0008     RETURN                             1037:      RETURN
                                                  1038:  
                                                  1039:  USB_BYTE_READ
027F  1108     BCF PORTD, 0x2                     1040:      BCF USB_CS
0280  303A     MOVLW 0x3A                         1041:      MOVLW 0x3A ;BYTE READ COMMAND
0281  2211     CALL 0x211                         1042:      CALL SPI_TRANSFER
0282  0832     MOVF 0x32, W                       1043:      MOVF _usb_file_size_low, W
0283  2211     CALL 0x211                         1044:      CALL SPI_TRANSFER
0284  0833     MOVF 0x33, W                       1045:      MOVF _usb_file_size_high, W
0285  2211     CALL 0x211                         1046:      CALL SPI_TRANSFER
0286  1508     BSF PORTD, 0x2                     1047:      BSF USB_CS
0287  0008     RETURN                             1048:      RETURN
                                                  1049:  
                                                  1050:  USB_BYTE_READ_GO
0288  1108     BCF PORTD, 0x2                     1051:      BCF USB_CS
0289  303B     MOVLW 0x3B                         1052:      MOVLW 0x3B ;BYTE READ GO COMMAND
028A  2211     CALL 0x211                         1053:      CALL SPI_TRANSFER
028B  1508     BSF PORTD, 0x2                     1054:      BSF USB_CS
028C  0008     RETURN                             1055:      RETURN
                                                  1056:  
                                                  1057:  USB_READ_DATA0
028D  1108     BCF PORTD, 0x2                     1058:      BCF USB_CS
028E  3027     MOVLW 0x27                         1059:      MOVLW 0x27 ;READ DATA0 COMMAND
028F  2211     CALL 0x211                         1060:      CALL SPI_TRANSFER
0290  0100     CLRW                               1061:      CLRW
0291  2211     CALL 0x211                         1062:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO READ
0292  07B0     ADDWF 0x30, F                      1063:      ADDWF _usb_bytes_read_low, F
0293  1803     BTFSC STATUS, 0x0                  1064:      BTFSC CARRY
0294  0AB1     INCF 0x31, F                       1065:      INCF _usb_bytes_read_high, F
0295  00BB     MOVWF 0x3B                         1066:      MOVWF _gen_count4
                                                  1067:  URD_LOOP
0296  0100     CLRW                               1068:      CLRW
0297  2211     CALL 0x211                         1069:      CALL SPI_TRANSFER
                                                  1070:      ;CALL RAM_WRITE_AUTO	;this is a problem, two active spi devices
0298  2798     CALL 0x798                         1071:      CALL _fifo_push
0299  0BBB     DECFSZ 0x3B, F                     1072:      DECFSZ _gen_count4, F
029A  2A96     GOTO 0x296                         1073:      GOTO URD_LOOP
029B  1508     BSF PORTD, 0x2                     1074:      BSF USB_CS
029C  245E     CALL 0x45E                         1075:      CALL _fifo_tf_to_mem
029D  0008     RETURN                             1076:      RETURN
                                                  1077:  
                                                  1078:  global _usb_get_file_size
                                                  1079:  _usb_get_file_size
029E  1108     BCF PORTD, 0x2                     1080:      BCF USB_CS
029F  300C     MOVLW 0xC                          1081:      MOVLW 0x0C ;GET FILE SIZE COMMAND
02A0  2211     CALL 0x211                         1082:      CALL SPI_TRANSFER
02A1  3068     MOVLW 0x68                         1083:      MOVLW 0x68 ;COMMAND DATA
02A2  2211     CALL 0x211                         1084:      CALL SPI_TRANSFER
02A3  0100     CLRW                               1085:      CLRW
02A4  2211     CALL 0x211                         1086:      CALL SPI_TRANSFER
02A5  00B2     MOVWF 0x32                         1087:      MOVWF _usb_file_size_low
02A6  0100     CLRW                               1088:      CLRW
02A7  2211     CALL 0x211                         1089:      CALL SPI_TRANSFER
02A8  00B3     MOVWF 0x33                         1090:      MOVWF _usb_file_size_high
02A9  0100     CLRW                               1091:      CLRW
02AA  2211     CALL 0x211                         1092:      CALL SPI_TRANSFER
02AB  0100     CLRW                               1093:      CLRW
02AC  2211     CALL 0x211                         1094:      CALL SPI_TRANSFER   ;DISCARD UPPER BYTES OF FILE SIZE
02AD  1508     BSF PORTD, 0x2                     1095:      BSF USB_CS
02AE  0008     RETURN                             1096:      RETURN
                                                  1097:  
                                                  1098:  global _usb_check_exists
                                                  1099:  _usb_check_exists
02AF  1108     BCF PORTD, 0x2                     1100:      BCF USB_CS
02B0  00C4     MOVWF 0x44                         1101:      MOVWF _temp4
02B1  3006     MOVLW 0x6                          1102:      MOVLW 0x06
02B2  2211     CALL 0x211                         1103:      CALL SPI_TRANSFER   ;SEND CHECK_EXISTS COMMAND
02B3  0844     MOVF 0x44, W                       1104:      MOVF _temp4, W
02B4  2211     CALL 0x211                         1105:      CALL SPI_TRANSFER   ;SEND TEST DATA
02B5  0100     CLRW                               1106:      CLRW
02B6  2211     CALL 0x211                         1107:      CALL SPI_TRANSFER   ;GET RESULT
02B7  1508     BSF PORTD, 0x2                     1108:      BSF USB_CS
02B8  0008     RETURN                             1109:      RETURN
                                                  1110:  
                                                  1111:  global _usb_file_create
                                                  1112:  _usb_file_create
02B9  1108     BCF PORTD, 0x2                     1113:      BCF USB_CS
02BA  3034     MOVLW 0x34                         1114:      MOVLW 0x34
02BB  2211     CALL 0x211                         1115:      CALL SPI_TRANSFER
02BC  1508     BSF PORTD, 0x2                     1116:      BSF USB_CS
02BD  0008     RETURN                             1117:      RETURN
                                                  1118:  
                                                  1119:  USB_BYTE_WRITE
02BE  1108     BCF PORTD, 0x2                     1120:      BCF USB_CS
02BF  303C     MOVLW 0x3C                         1121:      MOVLW 0x3C
02C0  2211     CALL 0x211                         1122:      CALL SPI_TRANSFER
02C1  0832     MOVF 0x32, W                       1123:      MOVF _usb_file_size_low, W
02C2  2211     CALL 0x211                         1124:      CALL SPI_TRANSFER
02C3  0833     MOVF 0x33, W                       1125:      MOVF _usb_file_size_high, W
02C4  2211     CALL 0x211                         1126:      CALL SPI_TRANSFER
02C5  1508     BSF PORTD, 0x2                     1127:      BSF USB_CS
02C6  0008     RETURN                             1128:      RETURN
                                                  1129:  
                                                  1130:  USB_BYTE_WR_GO
02C7  1108     BCF PORTD, 0x2                     1131:      BCF USB_CS
02C8  303D     MOVLW 0x3D                         1132:      MOVLW 0x3D
02C9  2211     CALL 0x211                         1133:      CALL SPI_TRANSFER
02CA  1508     BSF PORTD, 0x2                     1134:      BSF USB_CS
02CB  0008     RETURN                             1135:      RETURN
                                                  1136:  
                                                  1137:  global _usb_get_status
                                                  1138:  _usb_get_status
02CC  1108     BCF PORTD, 0x2                     1139:      BCF USB_CS
02CD  3022     MOVLW 0x22                         1140:      MOVLW 0x22
02CE  2211     CALL 0x211                         1141:      CALL SPI_TRANSFER
02CF  0100     CLRW                               1142:      CLRW
02D0  2211     CALL 0x211                         1143:      CALL SPI_TRANSFER
02D1  1508     BSF PORTD, 0x2                     1144:      BSF USB_CS
02D2  0008     RETURN                             1145:      RETURN
                                                  1146:  
                                                  1147:  global _usb_disk_mount
                                                  1148:  _usb_disk_mount
02D3  1108     BCF PORTD, 0x2                     1149:      BCF USB_CS
02D4  3031     MOVLW 0x31                         1150:      MOVLW 0x31
02D5  2211     CALL 0x211                         1151:      CALL SPI_TRANSFER
02D6  1508     BSF PORTD, 0x2                     1152:      BSF USB_CS
02D7  0008     RETURN                             1153:      RETURN
                                                  1154:  
                                                  1155:  global _usb_disk_connect
                                                  1156:  _usb_disk_connect
02D8  1108     BCF PORTD, 0x2                     1157:      BCF USB_CS
02D9  3030     MOVLW 0x30                         1158:      MOVLW 0x30
02DA  2211     CALL 0x211                         1159:      CALL SPI_TRANSFER
02DB  1508     BSF PORTD, 0x2                     1160:      BSF USB_CS
02DC  0008     RETURN                             1161:      RETURN
                                                  1162:      
                                                  1163:  global _usb_set_mode
                                                  1164:  _usb_set_mode
02DD  00C3     MOVWF 0x43                         1165:      MOVWF _temp5
02DE  1108     BCF PORTD, 0x2                     1166:      BCF USB_CS
02DF  3015     MOVLW 0x15                         1167:      MOVLW 0X15
02E0  2211     CALL 0x211                         1168:      CALL SPI_TRANSFER
02E1  0843     MOVF 0x43, W                       1169:      MOVF _temp5, W
02E2  2211     CALL 0x211                         1170:      CALL SPI_TRANSFER
02E3  1508     BSF PORTD, 0x2                     1171:      BSF USB_CS
02E4  0008     RETURN                             1172:      RETURN
                                                  1173:  
                                                  1174:  global _usb_get_version
                                                  1175:  _usb_get_version
02E5  1108     BCF PORTD, 0x2                     1176:      BCF USB_CS
02E6  3001     MOVLW 0x1                          1177:      MOVLW 0x01
02E7  2211     CALL 0x211                         1178:      CALL SPI_TRANSFER
02E8  0100     CLRW                               1179:      CLRW
02E9  2211     CALL 0x211                         1180:      CALL SPI_TRANSFER
02EA  1508     BSF PORTD, 0x2                     1181:      BSF USB_CS
02EB  0008     RETURN                             1182:      RETURN
                                                  1183:  
                                                  1184:  USB_WAIT_STATUS
02EC  1123     BCF 0x23, 0x2                      1185:      BCF F_TIMEOUT
02ED  0AA6     INCF 0x26, F                       1186:      INCF _timeout_high, F
02EE  0AA5     INCF 0x25, F                       1187:      INCF _timeout_low, F
                                                  1188:  UWS_LOOP
02EF  3001     MOVLW 0x1                          1189:      MOVLW 0x01
02F0  2232     CALL 0x232                         1190:      CALL _delay_millis   ;DELAY 1 MILLISECOND
02F1  22CC     CALL 0x2CC                         1191:      CALL _usb_get_status
02F2  00C3     MOVWF 0x43                         1192:      MOVWF _temp5
02F3  0629     XORWF 0x29, W                      1193:      XORWF _usb_target_status, W
02F4  1903     BTFSC STATUS, 0x2                  1194:      BTFSC ZERO
02F5  3400     RETLW 0x0                          1195:      RETLW 0x00
02F6  0BA5     DECFSZ 0x25, F                     1196:      DECFSZ _timeout_low, F
02F7  2AEF     GOTO 0x2EF                         1197:      GOTO UWS_LOOP
02F8  0BA6     DECFSZ 0x26, F                     1198:      DECFSZ _timeout_high, F
02F9  2AEF     GOTO 0x2EF                         1199:      GOTO UWS_LOOP
02FA  1523     BSF 0x23, 0x2                      1200:      BSF F_TIMEOUT    ;SET FLAG TO INDICATE A TIMEOUT
02FB  0843     MOVF 0x43, W                       1201:      MOVF _temp5, W
02FC  0008     RETURN                             1202:      RETURN
                                                  1203:  
                                                  1204:  global _usb_disk_capacity
                                                  1205:  _usb_disk_capacity
02FD  1108     BCF PORTD, 0x2                     1206:      BCF USB_CS
02FE  303E     MOVLW 0x3E                         1207:      MOVLW 0x3E
02FF  2211     CALL 0x211                         1208:      CALL SPI_TRANSFER   ;SEND DISK CAPACITY COMMAND
0300  1508     BSF PORTD, 0x2                     1209:      BSF USB_CS
0301  3014     MOVLW 0x14                         1210:      MOVLW 0x14
0302  00A9     MOVWF 0x29                         1211:      MOVWF _usb_target_status ;SET TARGET STATUS TO 14 (DEVICE READY)
0303  01A6     CLRF 0x26                          1212:      CLRF _timeout_high
0304  3064     MOVLW 0x64                         1213:      MOVLW 100
0305  00A5     MOVWF 0x25                         1214:      MOVWF _timeout_low   ;SET TIMEOUT TO 16 MILLISECONDS
0306  22EC     CALL 0x2EC                         1215:      CALL USB_WAIT_STATUS
0307  1923     BTFSC 0x23, 0x2                    1216:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0308  0008     RETURN                             1217:      RETURN
0309  1108     BCF PORTD, 0x2                     1218:      BCF USB_CS
030A  3027     MOVLW 0x27                         1219:      MOVLW 0x27
030B  2211     CALL 0x211                         1220:      CALL SPI_TRANSFER   ;SEND READ DATA0 COMMAND
030C  0100     CLRW                               1221:      CLRW
030D  2211     CALL 0x211                         1222:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO READ (ALWAYS 4)
030E  0100     CLRW                               1223:      CLRW
030F  2211     CALL 0x211                         1224:      CALL SPI_TRANSFER   ;GET LSB OF DISK SIZE
                                                  1225:  ;THE DISK SIZE IS GIVEN IN SECTORS, SO TO GET THE NUMBER OF BYTES WE MULTIPLY BY 512 WHICH IS THE SAME AS SHIFTING BY 9
                                                  1226:  ;THIS MEANS THE LSB IS ALWAYS ZERO AND THERE IS NO NEED TO HAVE A REGISTER FOR IT.
                                                  1227:  ;INSTEAD WE PUT THE LSB IN USB_DRIVE_SIZE1 WHICH CORRESPONDS TO SHIFTING BY 8.
0310  00F4     MOVWF 0x74                         1228:      MOVWF _usb_drive_size1
0311  0100     CLRW                               1229:      CLRW
0312  2211     CALL 0x211                         1230:      CALL SPI_TRANSFER
0313  00F3     MOVWF 0x73                         1231:      MOVWF _usb_drive_size2
0314  0100     CLRW                               1232:      CLRW
0315  2211     CALL 0x211                         1233:      CALL SPI_TRANSFER
0316  00F2     MOVWF 0x72                         1234:      MOVWF _usb_drive_size3
0317  0100     CLRW                               1235:      CLRW
0318  2211     CALL 0x211                         1236:      CALL SPI_TRANSFER
0319  1508     BSF PORTD, 0x2                     1237:      BSF USB_CS
031A  1003     BCF STATUS, 0x0                    1238:      BCF CARRY   ;CLEAR CARRY FLAG
031B  0DF4     RLF 0x74, F                        1239:      RLF _usb_drive_size1, F
031C  0DF3     RLF 0x73, F                        1240:      RLF _usb_drive_size2, F
031D  0DF2     RLF 0x72, F                        1241:      RLF _usb_drive_size3, F
031E  0008     RETURN                             1242:      RETURN
                                                  1243:  
                                                  1244:  global _usb_disk_query
                                                  1245:  _usb_disk_query
031F  1108     BCF PORTD, 0x2                     1246:      BCF USB_CS
0320  303F     MOVLW 0x3F                         1247:      MOVLW 0x3F
0321  2211     CALL 0x211                         1248:      CALL SPI_TRANSFER   ;SEND DISK QUERY COMMAND
0322  1508     BSF PORTD, 0x2                     1249:      BSF USB_CS
0323  3014     MOVLW 0x14                         1250:      MOVLW 0x14
0324  00A9     MOVWF 0x29                         1251:      MOVWF _usb_target_status ;SET TARGET STATUS TO 14 (DEVICE READY)
0325  01A6     CLRF 0x26                          1252:      CLRF _timeout_high
0326  3064     MOVLW 0x64                         1253:      MOVLW 100
0327  00A5     MOVWF 0x25                         1254:      MOVWF _timeout_low   ;SET TIMEOUT TO 16 MILLISECONDS
0328  22EC     CALL 0x2EC                         1255:      CALL USB_WAIT_STATUS
0329  1923     BTFSC 0x23, 0x2                    1256:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
032A  0008     RETURN                             1257:      RETURN
032B  1108     BCF PORTD, 0x2                     1258:      BCF USB_CS
032C  3027     MOVLW 0x27                         1259:      MOVLW 0x27
032D  2211     CALL 0x211                         1260:      CALL SPI_TRANSFER   ;SEND READ DATA0 COMMAND
032E  0100     CLRW                               1261:      CLRW
032F  2211     CALL 0x211                         1262:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO READ (ALWAYS 8)
0330  0100     CLRW                               1263:      CLRW
0331  2211     CALL 0x211                         1264:      CALL SPI_TRANSFER   ;GET LSB OF LOGICAL BYTES
0332  00AC     MOVWF 0x2C                         1265:      MOVWF _usb_logical_bytes1
0333  0100     CLRW                               1266:      CLRW
0334  2211     CALL 0x211                         1267:      CALL SPI_TRANSFER
0335  00AB     MOVWF 0x2B                         1268:      MOVWF _usb_logical_bytes2
0336  0100     CLRW                               1269:      CLRW
0337  2211     CALL 0x211                         1270:      CALL SPI_TRANSFER
0338  00AA     MOVWF 0x2A                         1271:      MOVWF _usb_logical_bytes3
0339  0100     CLRW                               1272:      CLRW
033A  2211     CALL 0x211                         1273:      CALL SPI_TRANSFER   ;DISCARD MSB OF LOGICAL BYTES
033B  0100     CLRW                               1274:      CLRW
033C  2211     CALL 0x211                         1275:      CALL SPI_TRANSFER   ;GET LSB OF FREE SPACE
033D  00AF     MOVWF 0x2F                         1276:      MOVWF _usb_free_space1
033E  0100     CLRW                               1277:      CLRW
033F  2211     CALL 0x211                         1278:      CALL SPI_TRANSFER
0340  00AE     MOVWF 0x2E                         1279:      MOVWF _usb_free_space2
0341  0100     CLRW                               1280:      CLRW
0342  2211     CALL 0x211                         1281:      CALL SPI_TRANSFER
0343  00AD     MOVWF 0x2D                         1282:      MOVWF _usb_free_space3
0344  0100     CLRW                               1283:      CLRW
0345  2211     CALL 0x211                         1284:      CALL SPI_TRANSFER   ;DISCARD MSB OF FREE SPACE
0346  1508     BSF PORTD, 0x2                     1285:      BSF USB_CS
0347  1003     BCF STATUS, 0x0                    1286:      BCF CARRY
0348  0DAC     RLF 0x2C, F                        1287:      RLF _usb_logical_bytes1, F
0349  0DAB     RLF 0x2B, F                        1288:      RLF _usb_logical_bytes2, F
034A  0DAA     RLF 0x2A, F                        1289:      RLF _usb_logical_bytes3, F
034B  1003     BCF STATUS, 0x0                    1290:      BCF CARRY
034C  0DAF     RLF 0x2F, F                        1291:      RLF _usb_free_space1, F
034D  0DAE     RLF 0x2E, F                        1292:      RLF _usb_free_space2, F
034E  0DAD     RLF 0x2D, F                        1293:      RLF _usb_free_space3, F
034F  0008     RETURN                             1294:      RETURN
                                                  1295:  
                                                  1296:  global _usb_write_test_data
                                                  1297:  _usb_write_test_data
0350  01A7     CLRF 0x27                          1298:      CLRF _s_reg_low
0351  01A8     CLRF 0x28                          1299:      CLRF _s_reg_high
0352  1023     BCF 0x23, 0x0                      1300:      BCF F_SRL_VALID ;INITIALIZE PSUEDO-RANDOM DATA GENERATOR
0353  22B9     CALL 0x2B9                         1301:      CALL _usb_file_create
0354  30B8     MOVLW 0xB8                         1302:      MOVLW 0xB8
0355  00A5     MOVWF 0x25                         1303:      MOVWF _timeout_low
0356  300B     MOVLW 0xB                          1304:      MOVLW 0x0B
0357  00A6     MOVWF 0x26                         1305:      MOVWF _timeout_high  ;SET TIMEOUT TO 3 SECONDS
0358  3014     MOVLW 0x14                         1306:      MOVLW 0x14
0359  00A9     MOVWF 0x29                         1307:      MOVWF _usb_target_status ;SET TARGET STATUS TO 0x14
035A  22EC     CALL 0x2EC                         1308:      CALL USB_WAIT_STATUS
035B  1923     BTFSC 0x23, 0x2                    1309:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
035C  0008     RETURN                             1310:      RETURN
035D  3004     MOVLW 0x4                          1311:      MOVLW 0x04	;WE WILL WRITE 4 BLOCKS OF 32KB
035E  00B9     MOVWF 0x39                         1312:      MOVWF _gen_count6
                                                  1313:  UWTD_L4
035F  01B5     CLRF 0x35                          1314:      CLRF _usb_bytes_sent_high
0360  01B4     CLRF 0x34                          1315:      CLRF _usb_bytes_sent_low
0361  3080     MOVLW 0x80                         1316:      MOVLW 0x80	;SET FILE SIZE TO 32KB
0362  00B3     MOVWF 0x33                         1317:      MOVWF _usb_file_size_high
0363  01B2     CLRF 0x32                          1318:      CLRF _usb_file_size_low
0364  22BE     CALL 0x2BE                         1319:      CALL USB_BYTE_WRITE
0365  300B     MOVLW 0xB                          1320:      MOVLW 0x0B
0366  00A6     MOVWF 0x26                         1321:      MOVWF _timeout_high
0367  30B8     MOVLW 0xB8                         1322:      MOVLW 0xB8
0368  00A5     MOVWF 0x25                         1323:      MOVWF _timeout_low	;3 SECOND TIMEOUT
0369  301E     MOVLW 0x1E                         1324:      MOVLW 0x1E
036A  00A9     MOVWF 0x29                         1325:      MOVWF _usb_target_status
036B  22EC     CALL 0x2EC                         1326:      CALL USB_WAIT_STATUS
036C  1923     BTFSC 0x23, 0x2                    1327:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
036D  0008     RETURN                             1328:      RETURN
                                                  1329:  UWTD_ND_LOOP
036E  1108     BCF PORTD, 0x2                     1330:      BCF USB_CS
036F  302D     MOVLW 0x2D                         1331:      MOVLW 0x2D
0370  2211     CALL 0x211                         1332:      CALL SPI_TRANSFER   ;SEND WR_REQ_DATA
0371  0100     CLRW                               1333:      CLRW
0372  2211     CALL 0x211                         1334:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO SEND
0373  00BA     MOVWF 0x3A                         1335:      MOVWF _gen_count5
                                                  1336:  UWTD_WR_LOOP
0374  2229     CALL 0x229                         1337:      CALL GET_TEST_BYTE
0375  2211     CALL 0x211                         1338:      CALL SPI_TRANSFER
0376  0FB4     INCFSZ 0x34, F                     1339:      INCFSZ _usb_bytes_sent_low, F
0377  03B5     DECF 0x35, F                       1340:      DECF _usb_bytes_sent_high, F
0378  0AB5     INCF 0x35, F                       1341:      INCF _usb_bytes_sent_high, F
0379  0835     MOVF 0x35, W                       1342:      MOVF _usb_bytes_sent_high, W
037A  0633     XORWF 0x33, W                      1343:      XORWF _usb_file_size_high, W
037B  1D03     BTFSS STATUS, 0x2                  1344:      BTFSS ZERO
037C  2B81     GOTO 0x381                         1345:      GOTO UWTD_NB
037D  0834     MOVF 0x34, W                       1346:      MOVF _usb_bytes_sent_low, W
037E  0632     XORWF 0x32, W                      1347:      XORWF _usb_file_size_low, W
037F  1903     BTFSC STATUS, 0x2                  1348:      BTFSC ZERO
0380  2B83     GOTO 0x383                         1349:      GOTO UWTD_BREAK
                                                  1350:  UWTD_NB	;GO HERE IF BYTES SENT != FILE SIZE
0381  0BBA     DECFSZ 0x3A, F                     1351:      DECFSZ _gen_count5, F
0382  2B74     GOTO 0x374                         1352:      GOTO UWTD_WR_LOOP
                                                  1353:  UWTD_BREAK  ;GO HERE IF BYTES SENT == FILE SIZE
0383  1508     BSF PORTD, 0x2                     1354:      BSF USB_CS
0384  300B     MOVLW 0xB                          1355:      MOVLW 0x0B
0385  00A6     MOVWF 0x26                         1356:      MOVWF _timeout_high
0386  30B8     MOVLW 0xB8                         1357:      MOVLW 0xB8
0387  00A5     MOVWF 0x25                         1358:      MOVWF _timeout_low	;3 SECOND TIMEOUT
0388  301E     MOVLW 0x1E                         1359:      MOVLW 0x1E
0389  00A9     MOVWF 0x29                         1360:      MOVWF _usb_target_status
038A  22EC     CALL 0x2EC                         1361:      CALL USB_WAIT_STATUS
038B  1923     BTFSC 0x23, 0x2                    1362:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
038C  0008     RETURN                             1363:      RETURN
038D  0835     MOVF 0x35, W                       1364:      MOVF _usb_bytes_sent_high, W
038E  0633     XORWF 0x33, W                      1365:      XORWF _usb_file_size_high, W
038F  1D03     BTFSS STATUS, 0x2                  1366:      BTFSS ZERO
0390  2B95     GOTO 0x395                         1367:      GOTO UWTD_NE
0391  0834     MOVF 0x34, W                       1368:      MOVF _usb_bytes_sent_low, W
0392  0632     XORWF 0x32, W                      1369:      XORWF _usb_file_size_low, W
0393  1903     BTFSC STATUS, 0x2                  1370:      BTFSC ZERO
0394  2BA0     GOTO 0x3A0                         1371:      GOTO UWTD_EQUAL
                                                  1372:  UWTD_NE
0395  22C7     CALL 0x2C7                         1373:      CALL USB_BYTE_WR_GO
0396  300B     MOVLW 0xB                          1374:      MOVLW 0x0B
0397  00A6     MOVWF 0x26                         1375:      MOVWF _timeout_high
0398  30B8     MOVLW 0xB8                         1376:      MOVLW 0xB8
0399  00A5     MOVWF 0x25                         1377:      MOVWF _timeout_low	;3 SECOND TIMEOUT
039A  301E     MOVLW 0x1E                         1378:      MOVLW 0x1E
039B  00A9     MOVWF 0x29                         1379:      MOVWF _usb_target_status
039C  22EC     CALL 0x2EC                         1380:      CALL USB_WAIT_STATUS
039D  1923     BTFSC 0x23, 0x2                    1381:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
039E  0008     RETURN                             1382:      RETURN
039F  2B6E     GOTO 0x36E                         1383:      GOTO UWTD_ND_LOOP
                                                  1384:  UWTD_EQUAL
03A0  22C7     CALL 0x2C7                         1385:      CALL USB_BYTE_WR_GO
03A1  300B     MOVLW 0xB                          1386:      MOVLW 0x0B
03A2  00A6     MOVWF 0x26                         1387:      MOVWF _timeout_high
03A3  30B8     MOVLW 0xB8                         1388:      MOVLW 0xB8
03A4  00A5     MOVWF 0x25                         1389:      MOVWF _timeout_low	;3 SECOND TIMEOUT
03A5  3014     MOVLW 0x14                         1390:      MOVLW 0x14
03A6  00A9     MOVWF 0x29                         1391:      MOVWF _usb_target_status
03A7  22EC     CALL 0x2EC                         1392:      CALL USB_WAIT_STATUS
03A8  1923     BTFSC 0x23, 0x2                    1393:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
03A9  0008     RETURN                             1394:      RETURN
03AA  0BB9     DECFSZ 0x39, F                     1395:      DECFSZ _gen_count6, F
03AB  2B5F     GOTO 0x35F                         1396:      GOTO UWTD_L4
03AC  2278     CALL 0x278                         1397:      CALL _usb_file_close
03AD  300B     MOVLW 0xB                          1398:      MOVLW 0x0B
03AE  00A6     MOVWF 0x26                         1399:      MOVWF _timeout_high
03AF  30B8     MOVLW 0xB8                         1400:      MOVLW 0xB8
03B0  00A5     MOVWF 0x25                         1401:      MOVWF _timeout_low	;3 SECOND TIMEOUT
03B1  3014     MOVLW 0x14                         1402:      MOVLW 0x14
03B2  00A9     MOVWF 0x29                         1403:      MOVWF _usb_target_status
03B3  22EC     CALL 0x2EC                         1404:      CALL USB_WAIT_STATUS
03B4  0008     RETURN                             1405:      RETURN
                                                  1406:  
                                                  1407:  global _usb_file_write
                                                  1408:  _usb_file_write
03B5  2458     CALL 0x458                         1409:      CALL _fifo_init
03B6  2260     CALL 0x260                         1410:      CALL _usb_set_file_name
03B7  3010     MOVLW 0x10                         1411:      MOVLW 0x10
03B8  00A5     MOVWF 0x25                         1412:      MOVWF _timeout_low
03B9  01A6     CLRF 0x26                          1413:      CLRF _timeout_high
03BA  3014     MOVLW 0x14                         1414:      MOVLW 0x14
03BB  00A9     MOVWF 0x29                         1415:      MOVWF _usb_target_status
03BC  22EC     CALL 0x2EC                         1416:      CALL USB_WAIT_STATUS
03BD  1923     BTFSC 0x23, 0x2                    1417:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
03BE  0008     RETURN                             1418:      RETURN
03BF  22B9     CALL 0x2B9                         1419:      CALL _usb_file_create
03C0  30B8     MOVLW 0xB8                         1420:      MOVLW 0xB8
03C1  00A5     MOVWF 0x25                         1421:      MOVWF _timeout_low
03C2  300B     MOVLW 0xB                          1422:      MOVLW 0x0B
03C3  00A6     MOVWF 0x26                         1423:      MOVWF _timeout_high  ;SET TIMEOUT TO 3 SECONDS
03C4  3014     MOVLW 0x14                         1424:      MOVLW 0x14
03C5  00A9     MOVWF 0x29                         1425:      MOVWF _usb_target_status ;SET TARGET STATUS TO 0x14
03C6  22EC     CALL 0x2EC                         1426:      CALL USB_WAIT_STATUS
03C7  1923     BTFSC 0x23, 0x2                    1427:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
03C8  0008     RETURN                             1428:      RETURN
03C9  01B5     CLRF 0x35                          1429:      CLRF _usb_bytes_sent_high
03CA  01B4     CLRF 0x34                          1430:      CLRF _usb_bytes_sent_low
03CB  0838     MOVF 0x38, W                       1431:      MOVF _tape_size_high, W
03CC  00B3     MOVWF 0x33                         1432:      MOVWF _usb_file_size_high
03CD  0837     MOVF 0x37, W                       1433:      MOVF _tape_size_low, W
03CE  00B2     MOVWF 0x32                         1434:      MOVWF _usb_file_size_low
03CF  22BE     CALL 0x2BE                         1435:      CALL USB_BYTE_WRITE
03D0  300B     MOVLW 0xB                          1436:      MOVLW 0x0B
03D1  00A6     MOVWF 0x26                         1437:      MOVWF _timeout_high
03D2  30B8     MOVLW 0xB8                         1438:      MOVLW 0xB8
03D3  00A5     MOVWF 0x25                         1439:      MOVWF _timeout_low
03D4  301E     MOVLW 0x1E                         1440:      MOVLW 0x1E
03D5  00A9     MOVWF 0x29                         1441:      MOVWF _usb_target_status
03D6  22EC     CALL 0x2EC                         1442:      CALL USB_WAIT_STATUS
03D7  1923     BTFSC 0x23, 0x2                    1443:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
03D8  0008     RETURN                             1444:      RETURN
                                                  1445:  UFW_ND_LOOP
                                                  1446:      ;CALL BUFF_INIT  ;TODO: CHANGE THIS TO USE FIFO
03D9  0834     MOVF 0x34, W                       1447:      MOVF _usb_bytes_sent_low, W
03DA  00C1     MOVWF 0x41                         1448:      MOVWF _ram_address_l
03DB  0835     MOVF 0x35, W                       1449:      MOVF _usb_bytes_sent_high, W
03DC  00C2     MOVWF 0x42                         1450:      MOVWF _ram_address_h
03DD  03C1     DECF 0x41, F                       1451:      DECF _ram_address_l, F
03DE  1C03     BTFSS STATUS, 0x0                  1452:      BTFSS CARRY
03DF  03C2     DECF 0x42, F                       1453:      DECF _ram_address_h, F
03E0  2464     CALL 0x464                         1454:      CALL _fifo_tf_from_mem
03E1  1108     BCF PORTD, 0x2                     1455:      BCF USB_CS
03E2  302D     MOVLW 0x2D                         1456:      MOVLW 0x2D
03E3  2211     CALL 0x211                         1457:      CALL SPI_TRANSFER   ;SEND WR_REQ_DATA
03E4  0100     CLRW                               1458:      CLRW
03E5  2211     CALL 0x211                         1459:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO SEND
03E6  00BA     MOVWF 0x3A                         1460:      MOVWF _gen_count5
                                                  1461:  UFW_WR_LOOP
03E7  25A9     CALL 0x5A9                         1462:      CALL _fifo_pop
03E8  2211     CALL 0x211                         1463:      CALL SPI_TRANSFER
03E9  0FB4     INCFSZ 0x34, F                     1464:      INCFSZ _usb_bytes_sent_low, F
03EA  03B5     DECF 0x35, F                       1465:      DECF _usb_bytes_sent_high, F
03EB  0AB5     INCF 0x35, F                       1466:      INCF _usb_bytes_sent_high, F
03EC  0835     MOVF 0x35, W                       1467:      MOVF _usb_bytes_sent_high, W
03ED  0633     XORWF 0x33, W                      1468:      XORWF _usb_file_size_high, W
03EE  1D03     BTFSS STATUS, 0x2                  1469:      BTFSS ZERO
03EF  2BF4     GOTO 0x3F4                         1470:      GOTO UFW_NB
03F0  0834     MOVF 0x34, W                       1471:      MOVF _usb_bytes_sent_low, W
03F1  0632     XORWF 0x32, W                      1472:      XORWF _usb_file_size_low, W
03F2  1903     BTFSC STATUS, 0x2                  1473:      BTFSC ZERO
03F3  2BF6     GOTO 0x3F6                         1474:      GOTO UFW_BREAK
                                                  1475:  UFW_NB
03F4  0BBA     DECFSZ 0x3A, F                     1476:      DECFSZ _gen_count5, F
03F5  2BE7     GOTO 0x3E7                         1477:      GOTO UFW_WR_LOOP
                                                  1478:  UFW_BREAK
03F6  1508     BSF PORTD, 0x2                     1479:      BSF USB_CS
03F7  300B     MOVLW 0xB                          1480:      MOVLW 0x0B
03F8  00A6     MOVWF 0x26                         1481:      MOVWF _timeout_high
03F9  30B8     MOVLW 0xB8                         1482:      MOVLW 0xB8
03FA  00A5     MOVWF 0x25                         1483:      MOVWF _timeout_low
03FB  301E     MOVLW 0x1E                         1484:      MOVLW 0x1E
03FC  00A9     MOVWF 0x29                         1485:      MOVWF _usb_target_status
03FD  22EC     CALL 0x2EC                         1486:      CALL USB_WAIT_STATUS
03FE  1923     BTFSC 0x23, 0x2                    1487:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
03FF  0008     RETURN                             1488:      RETURN
0400  0835     MOVF 0x35, W                       1489:      MOVF _usb_bytes_sent_high, W
0401  0633     XORWF 0x33, W                      1490:      XORWF _usb_file_size_high, W
0402  1D03     BTFSS STATUS, 0x2                  1491:      BTFSS ZERO
0403  2C08     GOTO 0x408                         1492:      GOTO UFW_NE
0404  0834     MOVF 0x34, W                       1493:      MOVF _usb_bytes_sent_low, W
0405  0632     XORWF 0x32, W                      1494:      XORWF _usb_file_size_low, W
0406  1903     BTFSC STATUS, 0x2                  1495:      BTFSC ZERO
0407  2C13     GOTO 0x413                         1496:      GOTO UFW_EQUAL
                                                  1497:  UFW_NE
0408  22C7     CALL 0x2C7                         1498:      CALL USB_BYTE_WR_GO
0409  300B     MOVLW 0xB                          1499:      MOVLW 0x0B
040A  00A6     MOVWF 0x26                         1500:      MOVWF _timeout_high
040B  30B8     MOVLW 0xB8                         1501:      MOVLW 0xB8
040C  00A5     MOVWF 0x25                         1502:      MOVWF _timeout_low
040D  301E     MOVLW 0x1E                         1503:      MOVLW 0x1E
040E  00A9     MOVWF 0x29                         1504:      MOVWF _usb_target_status
040F  22EC     CALL 0x2EC                         1505:      CALL USB_WAIT_STATUS
0410  1923     BTFSC 0x23, 0x2                    1506:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0411  0008     RETURN                             1507:      RETURN
0412  2BD9     GOTO 0x3D9                         1508:      GOTO UFW_ND_LOOP
                                                  1509:  UFW_EQUAL
0413  22C7     CALL 0x2C7                         1510:      CALL USB_BYTE_WR_GO
0414  300B     MOVLW 0xB                          1511:      MOVLW 0x0B
0415  00A6     MOVWF 0x26                         1512:      MOVWF _timeout_high
0416  30B8     MOVLW 0xB8                         1513:      MOVLW 0xB8
0417  00A5     MOVWF 0x25                         1514:      MOVWF _timeout_low
0418  3014     MOVLW 0x14                         1515:      MOVLW 0x14
0419  00A9     MOVWF 0x29                         1516:      MOVWF _usb_target_status
041A  22EC     CALL 0x2EC                         1517:      CALL USB_WAIT_STATUS
041B  1923     BTFSC 0x23, 0x2                    1518:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
041C  0008     RETURN                             1519:      RETURN
041D  2278     CALL 0x278                         1520:      CALL _usb_file_close
041E  300B     MOVLW 0xB                          1521:      MOVLW 0x0B
041F  00A6     MOVWF 0x26                         1522:      MOVWF _timeout_high
0420  30B8     MOVLW 0xB8                         1523:      MOVLW 0xB8
0421  00A5     MOVWF 0x25                         1524:      MOVWF _timeout_low
0422  3014     MOVLW 0x14                         1525:      MOVLW 0x14
0423  00A9     MOVWF 0x29                         1526:      MOVWF _usb_target_status
0424  22EC     CALL 0x2EC                         1527:      CALL USB_WAIT_STATUS
0425  0008     RETURN                             1528:      RETURN
                                                  1529:  
                                                  1530:  global _usb_file_read
                                                  1531:  _usb_file_read
0426  30FF     MOVLW 0xFF                         1532:      MOVLW 0xFF
0427  00C2     MOVWF 0x42                         1533:      MOVWF _ram_address_h
0428  00C1     MOVWF 0x41                         1534:      MOVWF _ram_address_l ;RAM ADDRESS WILL OVERFLOW BEFORE FIRST WRITE
0429  227F     CALL 0x27F                         1535:      CALL USB_BYTE_READ
042A  01A6     CLRF 0x26                          1536:      CLRF _timeout_high
042B  3080     MOVLW 0x80                         1537:      MOVLW 0x80
042C  00A5     MOVWF 0x25                         1538:      MOVWF _timeout_low
042D  301D     MOVLW 0x1D                         1539:      MOVLW 0x1D
042E  00A9     MOVWF 0x29                         1540:      MOVWF _usb_target_status
042F  22EC     CALL 0x2EC                         1541:      CALL USB_WAIT_STATUS
0430  1923     BTFSC 0x23, 0x2                    1542:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0431  0008     RETURN                             1543:      RETURN
                                                  1544:  UFR_LOOP
0432  228D     CALL 0x28D                         1545:      CALL USB_READ_DATA0
0433  3001     MOVLW 0x1                          1546:      MOVLW 0x01
0434  2232     CALL 0x232                         1547:      CALL _delay_millis
0435  0832     MOVF 0x32, W                       1548:      MOVF _usb_file_size_low, W
0436  0630     XORWF 0x30, W                      1549:      XORWF _usb_bytes_read_low, W
0437  1D03     BTFSS STATUS, 0x2                  1550:      BTFSS ZERO
0438  2C3D     GOTO 0x43D                         1551:      GOTO UFR_GO
0439  0833     MOVF 0x33, W                       1552:      MOVF _usb_file_size_high, W
043A  0631     XORWF 0x31, W                      1553:      XORWF _usb_bytes_read_high, W
043B  1903     BTFSC STATUS, 0x2                  1554:      BTFSC ZERO
043C  2C47     GOTO 0x447                         1555:      GOTO UFR_DONE
                                                  1556:  UFR_GO
043D  2288     CALL 0x288                         1557:      CALL USB_BYTE_READ_GO
043E  01A6     CLRF 0x26                          1558:      CLRF _timeout_high
043F  30FF     MOVLW 0xFF                         1559:      MOVLW 0xFF
0440  00A5     MOVWF 0x25                         1560:      MOVWF _timeout_low
0441  301D     MOVLW 0x1D                         1561:      MOVLW 0x1D
0442  00A9     MOVWF 0x29                         1562:      MOVWF _usb_target_status
0443  22EC     CALL 0x2EC                         1563:      CALL USB_WAIT_STATUS
0444  1923     BTFSC 0x23, 0x2                    1564:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0445  0008     RETURN                             1565:      RETURN
0446  2C32     GOTO 0x432                         1566:      GOTO UFR_LOOP
                                                  1567:  UFR_DONE
0447  0832     MOVF 0x32, W                       1568:      MOVF _usb_file_size_low, W
0448  00B7     MOVWF 0x37                         1569:      MOVWF _tape_size_low
0449  0833     MOVF 0x33, W                       1570:      MOVF _usb_file_size_high, W
044A  00B8     MOVWF 0x38                         1571:      MOVWF _tape_size_high
044B  1108     BCF PORTD, 0x2                     1572:      BCF USB_CS
044C  3036     MOVLW 0x36                         1573:      MOVLW 0x36
044D  2211     CALL 0x211                         1574:      CALL SPI_TRANSFER   ;SEND FILE CLOSE COMMAND
044E  0100     CLRW                               1575:      CLRW
044F  2211     CALL 0x211                         1576:      CALL SPI_TRANSFER   ;FILE CLOSE PARAMETER IS 0 (DO NOT UPDATE FILE SIZE)
0450  1508     BSF PORTD, 0x2                     1577:      BSF USB_CS
0451  01A6     CLRF 0x26                          1578:      CLRF _timeout_high
0452  3080     MOVLW 0x80                         1579:      MOVLW 0x80
0453  00A5     MOVWF 0x25                         1580:      MOVWF _timeout_low
0454  3014     MOVLW 0x14                         1581:      MOVLW 0x14
0455  00A9     MOVWF 0x29                         1582:      MOVWF _usb_target_status
0456  22EC     CALL 0x2EC                         1583:      CALL USB_WAIT_STATUS
0457  0008     RETURN                             1584:      RETURN
                                                  1585:      
                                                  1586:  _fifo_init
0458  01F0     CLRF 0x70                          1587:      CLRF _fifo_write_idx
0459  01A1     CLRF 0x21                          1588:      CLRF _fifo_write_bank
045A  01F1     CLRF 0x71                          1589:      CLRF _fifo_read_idx
045B  01A2     CLRF 0x22                          1590:      CLRF _fifo_read_bank
045C  01A0     CLRF 0x20                          1591:      CLRF _fifo_num_bytes
045D  0008     RETURN                             1592:      RETURN
                                                  1593:      
                                                  1594:  _fifo_tf_to_mem
045E  08A0     MOVF 0x20, F                       1595:      MOVF _fifo_num_bytes, F
045F  1903     BTFSC STATUS, 0x2                  1596:      BTFSC ZERO
0460  0008     RETURN                             1597:      RETURN
0461  25A9     CALL 0x5A9                         1598:      CALL _fifo_pop
0462  20E0     CALL 0xE0                          1599:      CALL RAM_WRITE_AUTO
0463  2C5E     GOTO 0x45E                         1600:      GOTO _fifo_tf_to_mem
                                                  1601:  
                                                  1602:  _fifo_tf_from_mem
0464  0920     COMF 0x20, W                       1603:      COMF _fifo_num_bytes, W
0465  1903     BTFSC STATUS, 0x2                  1604:      BTFSC ZERO
0466  0008     RETURN                             1605:      RETURN
0467  20BA     CALL 0xBA                          1606:      CALL RAM_READ_AUTO
0468  2798     CALL 0x798                         1607:      CALL _fifo_push
0469  2C64     GOTO 0x464                         1608:      GOTO _fifo_tf_from_mem

Disassembly Listing for MC10_Tape_Drive_C
Generated From:
/home/dragomir/repos/MC-10_Tape_Emulator/MC10_Tape_Drive_C.X/dist/default/production/MC10_Tape_Drive_C.X.production.elf
May 29, 2023 6:41:31 PM

---  /home/dragomir/repos/MC-10_Tape_Emulator/MC10_Tape_Drive_C.X/main.c  -------------------------------
1:             /*
2:              * File:   main.c
3:              * Author: Steve
4:              *
5:              * Created on August 25, 2022, 1:44 PM
6:              */
7:             // CONFIG1
8:             #pragma config FOSC = XT        // Oscillator Selection bits (XT oscillator)
9:             #pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
10:            #pragma config PWRTE = ON       // Power-up Timer Enable bit (PWRT enabled)
11:            #pragma config MCLRE = ON       // MCLR/VPP/RE3 Pin Function Select bit (MCLR/VPP/RE3 pin function is MCLR)
12:            #pragma config BOREN = ON       // Brown-out Reset Enable bit (Enabled)
13:            #pragma config BORV = 42        // Brown-out Reset Voltage bits (VBOR set to 4.2V)
14:            #pragma config CCP2MX = RC1     // CCP2 Multiplex bit (CCP2 is on RC1)
15:            #pragma config CP = OFF         // Flash Program Memory Code Protection bits (Code protection off)
16:            
17:            // CONFIG2
18:            #pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
19:            #pragma config IESO = OFF       // Internal External Switchover bit (Internal External Switchover mode disabled)
20:            #pragma config BORSEN = OFF     // Brown-out Reset Software Enable bit (Disabled)
21:            
22:            #define MHz *1000000UL
23:            #define _XTAL_FREQ (4 MHz)
24:            
25:            #include <xc.h>
26:            #include <pic16f747.h>
27:            
28:            //ASM globals
29:            //unsigned char dreg;
30:            unsigned char temp3;
31:            unsigned char temp4;
32:            unsigned char temp5;
33:            unsigned char ram_address_h;
34:            unsigned char ram_address_l;
35:            unsigned char sdel_count;
36:            unsigned char ldel_count;
37:            unsigned char gen_count;
38:            unsigned char gen_count2;
39:            unsigned char gen_count3;
40:            unsigned char gen_count4;
41:            unsigned char gen_count5;
42:            unsigned char gen_count6;
43:            unsigned char tape_size_high;
44:            unsigned char tape_size_low;
45:            unsigned char hex_char_high;
46:            unsigned char hex_char_low;
47:            unsigned char usb_bytes_sent_high;
48:            unsigned char usb_bytes_sent_low;
49:            unsigned char usb_file_size_high;
50:            unsigned char usb_file_size_low;
51:            unsigned char usb_bytes_read_high;
52:            unsigned char usb_bytes_read_low;
53:            unsigned char usb_drive_size1;
54:            unsigned char usb_drive_size2;
55:            unsigned char usb_drive_size3;
56:            unsigned char usb_free_space1;
57:            unsigned char usb_free_space2;
58:            unsigned char usb_free_space3;
59:            unsigned char usb_logical_bytes1;
60:            unsigned char usb_logical_bytes2;
61:            unsigned char usb_logical_bytes3;
62:            unsigned char usb_target_status;
63:            unsigned char s_reg_high;
64:            unsigned char s_reg_low;
65:            unsigned char timeout_high;
66:            unsigned char timeout_low;
67:            unsigned char delay_counter;
68:            unsigned char flag_reg;
69:            unsigned char fifo_read_idx;
70:            unsigned char fifo_read_bank;
71:            unsigned char fifo_write_idx;
72:            unsigned char fifo_write_bank;
73:            unsigned char fifo_num_bytes;
74:            
75:            unsigned char tape_name[8] = {'D', 'E', 'R', 'G', 'A', 'N', 'Q', 'Q'};
76:            
77:            //ASM function declarations
78:            void initialize();
79:            void mem_clear();
80:            void mem_dump();
81:            void file_dump();
82:            unsigned char uart_read();
83:            void uart_send(unsigned char);
84:            void lcd_putc(unsigned char);
85:            void lcd_line2();
86:            void lcd_clear2();
87:            void print_name();
88:            void delay_millis(unsigned char);
89:            void print_test_data();
90:            void usb_reset_all();
91:            void usb_set_file_name();
92:            void usb_file_open();
93:            void usb_file_close();
94:            void usb_get_file_size();
95:            unsigned char usb_check_exists(unsigned char);
96:            void usb_file_create();
97:            unsigned char usb_get_status();
98:            void usb_disk_mount();
99:            void usb_disk_connect();
100:           void usb_set_mode(unsigned char);
101:           unsigned char usb_get_version();
102:           void usb_disk_capacity();
103:           void usb_disk_query();
104:           void usb_write_test_data();
105:           //void usb_file_write();
106:           unsigned char usb_file_read();
107:           
108:           //C globals
109:           unsigned char fifo_bank_A[64];
110:           unsigned char fifo_bank_B[96];
111:           unsigned char fifo_bank_C[96];
112:           
113:           const char str_timeout[] = "Timeout: ";
114:           const char str_cmd_mode[] = "Command mode\n";
115:           
116:           const unsigned char hex_table[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
117:           
118:           
119:           unsigned char fifo_push(unsigned char data)
021C  00F8     MOVWF data
120:           {
121:               switch(fifo_write_bank)
021D  2A34     GOTO 0x234
0234  1283     BCF STATUS, 0x5
0235  1303     BCF STATUS, 0x6
0236  0821     MOVF fifo_write_bank, W
0237  3A00     XORLW 0x0
0238  1903     BTFSC STATUS, 0x2
0239  2A1E     GOTO 0x21E
023A  3A01     XORLW 0x1
023B  1903     BTFSC STATUS, 0x2
023C  2A1E     GOTO 0x21E
023D  3A03     XORLW 0x3
023E  1903     BTFSC STATUS, 0x2
023F  2A26     GOTO 0x226
0240  3A01     XORLW 0x1
0241  1903     BTFSC STATUS, 0x2
0242  2A26     GOTO 0x226
0243  3A07     XORLW 0x7
0244  1903     BTFSC STATUS, 0x2
0245  2A26     GOTO 0x226
0246  3A01     XORLW 0x1
0247  1903     BTFSC STATUS, 0x2
0248  2A2B     GOTO 0x22B
0249  3A03     XORLW 0x3
024A  1903     BTFSC STATUS, 0x2
024B  2A2B     GOTO 0x22B
024C  3A01     XORLW 0x1
024D  1903     BTFSC STATUS, 0x2
024E  2A2B     GOTO 0x22B
024F  2A50     GOTO 0x250
122:               {
123:                   case 0:
124:                   case 1:
125:                       fifo_bank_A[fifo_write_idx] = data;
021E  0878     MOVF data, W
021F  00F7     MOVWF __pcstackCOMMON
0220  0870     MOVF fifo_write_idx, W
0221  3EA0     ADDLW 0xA0
0222  0084     MOVWF FSR
0223  0877     MOVF __pcstackCOMMON, W
0224  1383     BCF STATUS, 0x7
0225  2A32     GOTO 0x232
126:                       break;
127:                   case 2:
128:                   case 3:
129:                   case 4:
130:                       fifo_bank_B[fifo_write_idx - 64] = data;
0226  0878     MOVF data, W
0227  00F7     MOVWF __pcstackCOMMON
0228  0870     MOVF fifo_write_idx, W
0229  3E50     ADDLW 0x50
022A  2A2F     GOTO 0x22F
131:                       break;
132:                   case 5:
133:                   case 6:
134:                   case 7:
135:                       fifo_bank_C[fifo_write_idx - (64 + 96)] = data;
022B  0878     MOVF data, W
022C  00F7     MOVWF __pcstackCOMMON
022D  0870     MOVF fifo_write_idx, W
022E  3E70     ADDLW 0x70
022F  0084     MOVWF FSR
0230  0877     MOVF __pcstackCOMMON, W
0231  1783     BSF STATUS, 0x7
0232  0080     MOVWF INDF
136:                       break;
0233  2A50     GOTO 0x250
137:               }
138:               ++fifo_write_idx;
0250  3001     MOVLW 0x1
0251  00F7     MOVWF __pcstackCOMMON
0252  0877     MOVF __pcstackCOMMON, W
0253  07F0     ADDWF fifo_write_idx, F
139:               if(!(fifo_write_idx & 0x1F))
0254  0870     MOVF fifo_write_idx, W
0255  391F     ANDLW 0x1F
0256  1D03     BTFSS STATUS, 0x2
0257  2A5C     GOTO 0x25C
140:               {
141:                   ++fifo_write_bank;
0258  3001     MOVLW 0x1
0259  00F7     MOVWF __pcstackCOMMON
025A  0877     MOVF __pcstackCOMMON, W
025B  07A1     ADDWF fifo_write_bank, F
142:               }
143:               ++fifo_num_bytes;
025C  3001     MOVLW 0x1
025D  00F7     MOVWF __pcstackCOMMON
025E  0877     MOVF __pcstackCOMMON, W
025F  07A0     ADDWF fifo_num_bytes, F
144:               return fifo_num_bytes;
0260  0820     MOVF fifo_num_bytes, W
145:           }
0261  0008     RETURN
146:           
147:           unsigned char fifo_pop(void)
148:           {
149:               unsigned char temp;
150:               switch(fifo_read_bank)
01DE  29F0     GOTO 0x1F0
01F0  1283     BCF STATUS, 0x5
01F1  1303     BCF STATUS, 0x6
01F2  0822     MOVF fifo_read_bank, W
01F3  3A00     XORLW 0x0
01F4  1903     BTFSC STATUS, 0x2
01F5  29DF     GOTO 0x1DF
01F6  3A01     XORLW 0x1
01F7  1903     BTFSC STATUS, 0x2
01F8  29DF     GOTO 0x1DF
01F9  3A03     XORLW 0x3
01FA  1903     BTFSC STATUS, 0x2
01FB  29E4     GOTO 0x1E4
01FC  3A01     XORLW 0x1
01FD  1903     BTFSC STATUS, 0x2
01FE  29E4     GOTO 0x1E4
01FF  3A07     XORLW 0x7
0200  1903     BTFSC STATUS, 0x2
0201  29E4     GOTO 0x1E4
0202  3A01     XORLW 0x1
0203  1903     BTFSC STATUS, 0x2
0204  29E7     GOTO 0x1E7
0205  3A03     XORLW 0x3
0206  1903     BTFSC STATUS, 0x2
0207  29E7     GOTO 0x1E7
0208  3A01     XORLW 0x1
0209  1903     BTFSC STATUS, 0x2
020A  29E7     GOTO 0x1E7
020B  2A0C     GOTO 0x20C
151:               {
152:                   case 0:
153:                   case 1:
154:                       temp = fifo_bank_A[fifo_read_idx];
01DF  0871     MOVF fifo_read_idx, W
01E0  3EA0     ADDLW 0xA0
01E1  0084     MOVWF FSR
01E2  1383     BCF STATUS, 0x7
01E3  29EB     GOTO 0x1EB
155:                       break;
156:                   case 2:
157:                   case 3:
158:                   case 4:
159:                       temp = fifo_bank_B[fifo_read_idx - 64];
01E4  0871     MOVF fifo_read_idx, W
01E5  3E50     ADDLW 0x50
01E6  29E9     GOTO 0x1E9
160:                       break;
161:                   case 5:
162:                   case 6:
163:                   case 7:
164:                       temp = fifo_bank_C[fifo_read_idx - (64 + 96)];
01E7  0871     MOVF fifo_read_idx, W
01E8  3E70     ADDLW 0x70
01E9  0084     MOVWF FSR
01EA  1783     BSF STATUS, 0x7
01EB  0800     MOVF INDF, W
01EC  00F9     MOVWF 0x79
01ED  0879     MOVF 0x79, W
01EE  00FA     MOVWF temp
165:                       break;
01EF  2A0C     GOTO 0x20C
166:               }
167:               ++fifo_read_idx;
020C  3001     MOVLW 0x1
020D  00F9     MOVWF 0x79
020E  0879     MOVF 0x79, W
020F  07F1     ADDWF fifo_read_idx, F
168:               if(!(fifo_read_idx & 0x1F))
0210  0871     MOVF fifo_read_idx, W
0211  391F     ANDLW 0x1F
0212  1D03     BTFSS STATUS, 0x2
0213  2A18     GOTO 0x218
169:               {
170:                   ++fifo_read_bank;
0214  3001     MOVLW 0x1
0215  00F9     MOVWF 0x79
0216  0879     MOVF 0x79, W
0217  07A2     ADDWF fifo_read_bank, F
171:               }
172:               --fifo_num_bytes;
0218  3001     MOVLW 0x1
0219  02A0     SUBWF fifo_num_bytes, F
173:               return temp;
021A  087A     MOVF temp, W
174:           }
021B  0008     RETURN
175:           
176:           void byte_to_hex(unsigned char data)
0183  1283     BCF STATUS, 0x5
0184  1303     BCF STATUS, 0x6
0185  00C7     MOVWF data
177:           {
178:               hex_char_low = hex_table[data & (unsigned char)0x0F];
0186  0847     MOVF data, W
0187  390F     ANDLW 0xF
0188  3E01     ADDLW 0x1
0189  0084     MOVWF FSR
018A  118A     BCF PCLATH, 0x3
018B  2002     CALL 0x2
018C  118A     BCF PCLATH, 0x3
018D  00C5     MOVWF __pcstackBANK0
018E  0845     MOVF __pcstackBANK0, W
018F  00F5     MOVWF hex_char_low
179:               data = data >> 4;
0190  0847     MOVF data, W
0191  00C5     MOVWF __pcstackBANK0
0192  3004     MOVLW 0x4
0193  1003     BCF STATUS, 0x0
0194  0CC5     RRF __pcstackBANK0, F
0195  3EFF     ADDLW 0xFF
0196  1D03     BTFSS STATUS, 0x2
0197  2993     GOTO 0x193
0198  0845     MOVF __pcstackBANK0, W
0199  00C6     MOVWF 0x46
019A  0846     MOVF 0x46, W
019B  00C7     MOVWF data
180:               hex_char_high = hex_table[data & (unsigned char)0x0F];
019C  0847     MOVF data, W
019D  390F     ANDLW 0xF
019E  3E01     ADDLW 0x1
019F  0084     MOVWF FSR
01A0  118A     BCF PCLATH, 0x3
01A1  2002     CALL 0x2
01A2  00C5     MOVWF __pcstackBANK0
01A3  0845     MOVF __pcstackBANK0, W
01A4  00F6     MOVWF hex_char_high
181:               return;
182:           }
01A5  0008     RETURN
183:           
184:           void print_string_lcd(const char* string)
0166  1283     BCF STATUS, 0x5
0167  1303     BCF STATUS, 0x6
0168  00C9     MOVWF string
185:           {
186:               unsigned char i = 0;
0169  01CA     CLRF i
187:               while(string[i])
016A  084A     MOVF i, W
016B  0749     ADDWF string, W
016C  0084     MOVWF FSR
016D  118A     BCF PCLATH, 0x3
016E  2002     CALL 0x2
016F  118A     BCF PCLATH, 0x3
0170  3A00     XORLW 0x0
0171  1903     BTFSC STATUS, 0x2
0172  0008     RETURN
0182  296A     GOTO 0x16A
188:               {
189:                   lcd_putc(string[i]);
0173  084A     MOVF i, W
0174  0749     ADDWF string, W
0175  0084     MOVWF FSR
0176  118A     BCF PCLATH, 0x3
0177  2002     CALL 0x2
0178  118A     BCF PCLATH, 0x3
0179  118A     BCF PCLATH, 0x3
017A  2567     CALL 0x567
017B  118A     BCF PCLATH, 0x3
190:                   ++i;
017C  3001     MOVLW 0x1
017D  1283     BCF STATUS, 0x5
017E  1303     BCF STATUS, 0x6
017F  00C8     MOVWF 0x48
0180  0848     MOVF 0x48, W
0181  07CA     ADDWF i, F
0182  296A     GOTO 0x16A
191:               }
192:               return;
193:           }
194:           
195:           void print_string_serial(const char* string)
0149  1283     BCF STATUS, 0x5
014A  1303     BCF STATUS, 0x6
014B  00CA     MOVWF i
196:           {
197:               unsigned char i = 0;
014C  01C9     CLRF string
198:               while(string[i])
014D  0849     MOVF string, W
014E  074A     ADDWF i, W
014F  0084     MOVWF FSR
0150  118A     BCF PCLATH, 0x3
0151  2002     CALL 0x2
0152  118A     BCF PCLATH, 0x3
0153  3A00     XORLW 0x0
0154  1903     BTFSC STATUS, 0x2
0155  0008     RETURN
0165  294D     GOTO 0x14D
199:               {
200:                   uart_send(string[i]);
0156  0849     MOVF string, W
0157  074A     ADDWF i, W
0158  0084     MOVWF FSR
0159  118A     BCF PCLATH, 0x3
015A  2002     CALL 0x2
015B  118A     BCF PCLATH, 0x3
015C  118A     BCF PCLATH, 0x3
015D  2501     CALL 0x501
015E  118A     BCF PCLATH, 0x3
201:                   ++i;
015F  3001     MOVLW 0x1
0160  1283     BCF STATUS, 0x5
0161  1303     BCF STATUS, 0x6
0162  00C8     MOVWF 0x48
0163  0848     MOVF 0x48, W
0164  07C9     ADDWF string, F
0165  294D     GOTO 0x14D
202:               }
203:               return;
204:           }
205:           
206:           void timeout_error()
207:           {
208:               print_string_serial(str_timeout);
209:               byte_to_hex(usb_target_status);
210:               uart_send(hex_char_high);
211:               uart_send(hex_char_low);
212:               uart_send('\n');
213:               return;
214:           }
215:           
216:           void print_capacity()
217:           {
218:               usb_disk_capacity();
01A6  118A     BCF PCLATH, 0x3
01A7  26C2     CALL 0x6C2
01A8  118A     BCF PCLATH, 0x3
219:               print_string_serial("Physical bytes: ");
01A9  303A     MOVLW 0x3A
01AA  118A     BCF PCLATH, 0x3
01AB  2149     CALL 0x149
01AC  118A     BCF PCLATH, 0x3
220:               byte_to_hex(usb_drive_size3);
01AD  0872     MOVF usb_drive_size3, W
01AE  118A     BCF PCLATH, 0x3
01AF  2183     CALL 0x183
01B0  118A     BCF PCLATH, 0x3
221:               uart_send(hex_char_high);
01B1  0876     MOVF hex_char_high, W
01B2  118A     BCF PCLATH, 0x3
01B3  2501     CALL 0x501
01B4  118A     BCF PCLATH, 0x3
222:               uart_send(hex_char_low);
01B5  0875     MOVF hex_char_low, W
01B6  118A     BCF PCLATH, 0x3
01B7  2501     CALL 0x501
01B8  118A     BCF PCLATH, 0x3
223:               byte_to_hex(usb_drive_size2);
01B9  0873     MOVF usb_drive_size2, W
01BA  118A     BCF PCLATH, 0x3
01BB  2183     CALL 0x183
01BC  118A     BCF PCLATH, 0x3
224:               uart_send(hex_char_high);
01BD  0876     MOVF hex_char_high, W
01BE  118A     BCF PCLATH, 0x3
01BF  2501     CALL 0x501
01C0  118A     BCF PCLATH, 0x3
225:               uart_send(hex_char_low);
01C1  0875     MOVF hex_char_low, W
01C2  118A     BCF PCLATH, 0x3
01C3  2501     CALL 0x501
01C4  118A     BCF PCLATH, 0x3
226:               byte_to_hex(usb_drive_size1);
01C5  0874     MOVF usb_drive_size1, W
01C6  118A     BCF PCLATH, 0x3
01C7  2183     CALL 0x183
01C8  118A     BCF PCLATH, 0x3
227:               uart_send(hex_char_high);
01C9  0876     MOVF hex_char_high, W
01CA  118A     BCF PCLATH, 0x3
01CB  2501     CALL 0x501
01CC  118A     BCF PCLATH, 0x3
228:               uart_send(hex_char_low);
01CD  0875     MOVF hex_char_low, W
01CE  118A     BCF PCLATH, 0x3
01CF  2501     CALL 0x501
01D0  118A     BCF PCLATH, 0x3
229:               uart_send('0');
01D1  3030     MOVLW 0x30
01D2  118A     BCF PCLATH, 0x3
01D3  2501     CALL 0x501
01D4  118A     BCF PCLATH, 0x3
230:               uart_send('0');
01D5  3030     MOVLW 0x30
01D6  118A     BCF PCLATH, 0x3
01D7  2501     CALL 0x501
01D8  118A     BCF PCLATH, 0x3
231:               uart_send('\n');
01D9  300A     MOVLW 0xA
01DA  118A     BCF PCLATH, 0x3
01DB  2501     CALL 0x501
01DC  118A     BCF PCLATH, 0x3
232:               return; 
233:           }
01DD  0008     RETURN
234:           void print_query()
235:           {
236:               usb_disk_query();
0262  118A     BCF PCLATH, 0x3
0263  26E4     CALL 0x6E4
0264  118A     BCF PCLATH, 0x3
237:               print_string_serial("Logical bytes: ");
0265  304B     MOVLW 0x4B
0266  118A     BCF PCLATH, 0x3
0267  2149     CALL 0x149
0268  118A     BCF PCLATH, 0x3
238:               byte_to_hex(usb_logical_bytes3);
0269  082A     MOVF usb_logical_bytes3, W
026A  118A     BCF PCLATH, 0x3
026B  2183     CALL 0x183
026C  118A     BCF PCLATH, 0x3
239:               uart_send(hex_char_high);
026D  0876     MOVF hex_char_high, W
026E  118A     BCF PCLATH, 0x3
026F  2501     CALL 0x501
0270  118A     BCF PCLATH, 0x3
240:               uart_send(hex_char_low);
0271  0875     MOVF hex_char_low, W
0272  118A     BCF PCLATH, 0x3
0273  2501     CALL 0x501
0274  118A     BCF PCLATH, 0x3
241:               byte_to_hex(usb_logical_bytes2);
0275  1283     BCF STATUS, 0x5
0276  1303     BCF STATUS, 0x6
0277  082B     MOVF usb_logical_bytes2, W
0278  118A     BCF PCLATH, 0x3
0279  2183     CALL 0x183
027A  118A     BCF PCLATH, 0x3
242:               uart_send(hex_char_high);
027B  0876     MOVF hex_char_high, W
027C  118A     BCF PCLATH, 0x3
027D  2501     CALL 0x501
027E  118A     BCF PCLATH, 0x3
243:               uart_send(hex_char_low);
027F  0875     MOVF hex_char_low, W
0280  118A     BCF PCLATH, 0x3
0281  2501     CALL 0x501
0282  118A     BCF PCLATH, 0x3
244:               byte_to_hex(usb_logical_bytes1);
0283  1283     BCF STATUS, 0x5
0284  1303     BCF STATUS, 0x6
0285  082C     MOVF usb_logical_bytes1, W
0286  118A     BCF PCLATH, 0x3
0287  2183     CALL 0x183
0288  118A     BCF PCLATH, 0x3
245:               uart_send(hex_char_high);
0289  0876     MOVF hex_char_high, W
028A  118A     BCF PCLATH, 0x3
028B  2501     CALL 0x501
028C  118A     BCF PCLATH, 0x3
246:               uart_send(hex_char_low);
028D  0875     MOVF hex_char_low, W
028E  118A     BCF PCLATH, 0x3
028F  2501     CALL 0x501
0290  118A     BCF PCLATH, 0x3
247:               uart_send('0');
0291  3030     MOVLW 0x30
0292  118A     BCF PCLATH, 0x3
0293  2501     CALL 0x501
0294  118A     BCF PCLATH, 0x3
248:               uart_send('0');
0295  3030     MOVLW 0x30
0296  118A     BCF PCLATH, 0x3
0297  2501     CALL 0x501
0298  118A     BCF PCLATH, 0x3
249:               uart_send('\n');
0299  300A     MOVLW 0xA
029A  118A     BCF PCLATH, 0x3
029B  2501     CALL 0x501
029C  118A     BCF PCLATH, 0x3
250:               print_string_serial("Free bytes: ");
029D  305B     MOVLW 0x5B
029E  118A     BCF PCLATH, 0x3
029F  2149     CALL 0x149
02A0  118A     BCF PCLATH, 0x3
251:               byte_to_hex(usb_free_space3);
02A1  082D     MOVF usb_free_space3, W
02A2  118A     BCF PCLATH, 0x3
02A3  2183     CALL 0x183
02A4  118A     BCF PCLATH, 0x3
252:               uart_send(hex_char_high);
02A5  0876     MOVF hex_char_high, W
02A6  118A     BCF PCLATH, 0x3
02A7  2501     CALL 0x501
02A8  118A     BCF PCLATH, 0x3
253:               uart_send(hex_char_low);
02A9  0875     MOVF hex_char_low, W
02AA  118A     BCF PCLATH, 0x3
02AB  2501     CALL 0x501
02AC  118A     BCF PCLATH, 0x3
254:               byte_to_hex(usb_free_space2);
02AD  1283     BCF STATUS, 0x5
02AE  1303     BCF STATUS, 0x6
02AF  082E     MOVF usb_free_space2, W
02B0  118A     BCF PCLATH, 0x3
02B1  2183     CALL 0x183
02B2  118A     BCF PCLATH, 0x3
255:               uart_send(hex_char_high);
02B3  0876     MOVF hex_char_high, W
02B4  118A     BCF PCLATH, 0x3
02B5  2501     CALL 0x501
02B6  118A     BCF PCLATH, 0x3
256:               uart_send(hex_char_low);
02B7  0875     MOVF hex_char_low, W
02B8  118A     BCF PCLATH, 0x3
02B9  2501     CALL 0x501
02BA  118A     BCF PCLATH, 0x3
257:               byte_to_hex(usb_free_space1);
02BB  1283     BCF STATUS, 0x5
02BC  1303     BCF STATUS, 0x6
02BD  082F     MOVF usb_free_space1, W
02BE  118A     BCF PCLATH, 0x3
02BF  2183     CALL 0x183
02C0  118A     BCF PCLATH, 0x3
258:               uart_send(hex_char_high);
02C1  0876     MOVF hex_char_high, W
02C2  118A     BCF PCLATH, 0x3
02C3  2501     CALL 0x501
02C4  118A     BCF PCLATH, 0x3
259:               uart_send(hex_char_low);
02C5  0875     MOVF hex_char_low, W
02C6  118A     BCF PCLATH, 0x3
02C7  2501     CALL 0x501
02C8  118A     BCF PCLATH, 0x3
260:               uart_send('0');
02C9  3030     MOVLW 0x30
02CA  118A     BCF PCLATH, 0x3
02CB  2501     CALL 0x501
02CC  118A     BCF PCLATH, 0x3
261:               uart_send('0');
02CD  3030     MOVLW 0x30
02CE  118A     BCF PCLATH, 0x3
02CF  2501     CALL 0x501
02D0  118A     BCF PCLATH, 0x3
262:               uart_send('\n');
02D1  300A     MOVLW 0xA
02D2  118A     BCF PCLATH, 0x3
02D3  2501     CALL 0x501
02D4  118A     BCF PCLATH, 0x3
263:               return;
264:           }
02D5  0008     RETURN
265:           
266:           void usb_autoconfig()
267:           {
268:               unsigned char temp;
269:               print_string_serial("USB Autoconfig:\n");
02D6  3029     MOVLW 0x29
02D7  118A     BCF PCLATH, 0x3
02D8  2149     CALL 0x149
02D9  118A     BCF PCLATH, 0x3
270:               temp = usb_check_exists(0x55);
02DA  3055     MOVLW 0x55
02DB  118A     BCF PCLATH, 0x3
02DC  2674     CALL 0x674
02DD  118A     BCF PCLATH, 0x3
02DE  1283     BCF STATUS, 0x5
02DF  1303     BCF STATUS, 0x6
02E0  00CB     MOVWF 0x4B
02E1  084B     MOVF 0x4B, W
02E2  00CC     MOVWF temp
271:               byte_to_hex(temp);
02E3  084C     MOVF temp, W
02E4  118A     BCF PCLATH, 0x3
02E5  2183     CALL 0x183
02E6  118A     BCF PCLATH, 0x3
272:               uart_send(hex_char_high);
02E7  0876     MOVF hex_char_high, W
02E8  118A     BCF PCLATH, 0x3
02E9  2501     CALL 0x501
02EA  118A     BCF PCLATH, 0x3
273:               uart_send(hex_char_low);
02EB  0875     MOVF hex_char_low, W
02EC  118A     BCF PCLATH, 0x3
02ED  2501     CALL 0x501
02EE  118A     BCF PCLATH, 0x3
274:               uart_send('\n');
02EF  300A     MOVLW 0xA
02F0  118A     BCF PCLATH, 0x3
02F1  2501     CALL 0x501
02F2  118A     BCF PCLATH, 0x3
275:             
276:               temp = usb_get_version();
02F3  118A     BCF PCLATH, 0x3
02F4  26AA     CALL 0x6AA
02F5  118A     BCF PCLATH, 0x3
02F6  1283     BCF STATUS, 0x5
02F7  1303     BCF STATUS, 0x6
02F8  00CB     MOVWF 0x4B
02F9  084B     MOVF 0x4B, W
02FA  00CC     MOVWF temp
277:               byte_to_hex(temp);
02FB  084C     MOVF temp, W
02FC  118A     BCF PCLATH, 0x3
02FD  2183     CALL 0x183
02FE  118A     BCF PCLATH, 0x3
278:               print_string_serial("Version: ");
02FF  307E     MOVLW 0x7E
0300  118A     BCF PCLATH, 0x3
0301  2149     CALL 0x149
0302  118A     BCF PCLATH, 0x3
279:               uart_send(hex_char_high);
0303  0876     MOVF hex_char_high, W
0304  118A     BCF PCLATH, 0x3
0305  2501     CALL 0x501
0306  118A     BCF PCLATH, 0x3
280:               uart_send(hex_char_low);
0307  0875     MOVF hex_char_low, W
0308  118A     BCF PCLATH, 0x3
0309  2501     CALL 0x501
030A  118A     BCF PCLATH, 0x3
281:               uart_send('\n');
030B  300A     MOVLW 0xA
030C  118A     BCF PCLATH, 0x3
030D  2501     CALL 0x501
030E  118A     BCF PCLATH, 0x3
282:           
283:               usb_set_mode(0x05);
030F  3005     MOVLW 0x5
0310  118A     BCF PCLATH, 0x3
0311  26A2     CALL 0x6A2
0312  118A     BCF PCLATH, 0x3
284:               delay_millis(1);
0313  3001     MOVLW 0x1
0314  118A     BCF PCLATH, 0x3
0315  25FB     CALL 0x5FB
0316  118A     BCF PCLATH, 0x3
285:               usb_set_mode(0x07);
0317  3007     MOVLW 0x7
0318  118A     BCF PCLATH, 0x3
0319  26A2     CALL 0x6A2
031A  118A     BCF PCLATH, 0x3
286:               delay_millis(1);
031B  3001     MOVLW 0x1
031C  118A     BCF PCLATH, 0x3
031D  25FB     CALL 0x5FB
031E  118A     BCF PCLATH, 0x3
287:               usb_set_mode(0x06);
031F  3006     MOVLW 0x6
0320  118A     BCF PCLATH, 0x3
0321  26A2     CALL 0x6A2
0322  118A     BCF PCLATH, 0x3
288:               delay_millis(1);
0323  3001     MOVLW 0x1
0324  118A     BCF PCLATH, 0x3
0325  25FB     CALL 0x5FB
0326  118A     BCF PCLATH, 0x3
289:               usb_disk_connect();
0327  118A     BCF PCLATH, 0x3
0328  269D     CALL 0x69D
0329  118A     BCF PCLATH, 0x3
290:               delay_millis(250);
032A  30FA     MOVLW 0xFA
032B  118A     BCF PCLATH, 0x3
032C  25FB     CALL 0x5FB
032D  118A     BCF PCLATH, 0x3
291:               delay_millis(250);
032E  30FA     MOVLW 0xFA
032F  118A     BCF PCLATH, 0x3
0330  25FB     CALL 0x5FB
0331  118A     BCF PCLATH, 0x3
292:               usb_disk_mount();
0332  118A     BCF PCLATH, 0x3
0333  2698     CALL 0x698
0334  118A     BCF PCLATH, 0x3
293:               delay_millis(250);
0335  30FA     MOVLW 0xFA
0336  118A     BCF PCLATH, 0x3
0337  25FB     CALL 0x5FB
0338  118A     BCF PCLATH, 0x3
294:               delay_millis(250);
0339  30FA     MOVLW 0xFA
033A  118A     BCF PCLATH, 0x3
033B  25FB     CALL 0x5FB
033C  118A     BCF PCLATH, 0x3
295:             
296:               temp = usb_get_status();
033D  118A     BCF PCLATH, 0x3
033E  2691     CALL 0x691
033F  118A     BCF PCLATH, 0x3
0340  1283     BCF STATUS, 0x5
0341  1303     BCF STATUS, 0x6
0342  00CB     MOVWF 0x4B
0343  084B     MOVF 0x4B, W
0344  00CC     MOVWF temp
297:               byte_to_hex(temp);
0345  084C     MOVF temp, W
0346  118A     BCF PCLATH, 0x3
0347  2183     CALL 0x183
0348  118A     BCF PCLATH, 0x3
298:               print_string_serial("Status: ");
0349  3088     MOVLW 0x88
034A  118A     BCF PCLATH, 0x3
034B  2149     CALL 0x149
034C  118A     BCF PCLATH, 0x3
299:               uart_send(hex_char_high);
034D  0876     MOVF hex_char_high, W
034E  118A     BCF PCLATH, 0x3
034F  2501     CALL 0x501
0350  118A     BCF PCLATH, 0x3
300:               uart_send(hex_char_low);
0351  0875     MOVF hex_char_low, W
0352  118A     BCF PCLATH, 0x3
0353  2501     CALL 0x501
0354  118A     BCF PCLATH, 0x3
301:               uart_send('\n');
0355  300A     MOVLW 0xA
0356  118A     BCF PCLATH, 0x3
0357  2501     CALL 0x501
0358  118A     BCF PCLATH, 0x3
302:             
303:               print_query();
0359  118A     BCF PCLATH, 0x3
035A  2262     CALL 0x262
304:               return;
305:           }
035B  0008     RETURN
306:           
307:           void main(void)
308:           {
309:               unsigned char state = 0;
035C  01CE     CLRF state
310:               initialize();
035D  118A     BCF PCLATH, 0x3
035E  2494     CALL 0x494
035F  118A     BCF PCLATH, 0x3
311:               //usb_reset_all();
312:               //delay_millis(100);
313:               //usb_autoconfig();
314:               //print_name();
315:           
316:               print_string_lcd("Dragons");
0360  3091     MOVLW 0x91
0361  118A     BCF PCLATH, 0x3
0362  2166     CALL 0x166
0363  118A     BCF PCLATH, 0x3
317:               lcd_line2();
0364  118A     BCF PCLATH, 0x3
0365  259A     CALL 0x59A
0366  118A     BCF PCLATH, 0x3
318:           
319:               print_string_serial("deadbeef\n");
0367  3074     MOVLW 0x74
0368  118A     BCF PCLATH, 0x3
0369  2149     CALL 0x149
036A  118A     BCF PCLATH, 0x3
320:               
321:               unsigned char temp;
322:               while(1)
323:               {
324:                   temp = uart_read();
0479  118A     BCF PCLATH, 0x3
047A  24FD     CALL 0x4FD
047B  118A     BCF PCLATH, 0x3
047C  1283     BCF STATUS, 0x5
047D  1303     BCF STATUS, 0x6
047E  00CD     MOVWF 0x4D
047F  084D     MOVF 0x4D, W
0480  00CF     MOVWF temp
325:                   
326:                   switch(state)
036B  2C79     GOTO 0x479
0481  084E     MOVF state, W
327:                   {
328:                       case 0:
329:                           if(temp == 0xDE)
036C  30DE     MOVLW 0xDE
036D  064F     XORWF temp, W
036E  1D03     BTFSS STATUS, 0x2
036F  2C79     GOTO 0x479
330:                               state = 1;
0370  01CE     CLRF state
0371  0ACE     INCF state, F
0372  2C79     GOTO 0x479
331:                           break;
332:                       case 1:
333:                           if(temp == 0xAD)
0373  30AD     MOVLW 0xAD
0374  064F     XORWF temp, W
0375  1D03     BTFSS STATUS, 0x2
0376  2B79     GOTO 0x379
334:                               state = 2;
0377  3002     MOVLW 0x2
0378  2B8A     GOTO 0x38A
335:                           else
336:                               state = 0;
0379  01CE     CLRF state
037A  2C79     GOTO 0x479
337:                           break;
338:                       case 2:
339:                           if(temp == 0xBE)
037B  30BE     MOVLW 0xBE
037C  064F     XORWF temp, W
037D  1D03     BTFSS STATUS, 0x2
037E  2B79     GOTO 0x379
340:                               state = 3;
037F  3003     MOVLW 0x3
0380  2B8A     GOTO 0x38A
341:                           else
342:                               state = 0;
343:                           break;
344:                       case 3:
345:                           if(temp == 0xEF)
0381  30EF     MOVLW 0xEF
0382  064F     XORWF temp, W
0383  1D03     BTFSS STATUS, 0x2
0384  2B89     GOTO 0x389
346:                               print_string_serial(str_cmd_mode);
0385  3011     MOVLW 0x11
0386  118A     BCF PCLATH, 0x3
0387  2149     CALL 0x149
0388  118A     BCF PCLATH, 0x3
347:                           state = 4;
0389  3004     MOVLW 0x4
038A  00CD     MOVWF 0x4D
038B  084D     MOVF 0x4D, W
038C  00CE     MOVWF state
348:                           break;
038D  2C79     GOTO 0x479
349:                       case 4:
350:                           switch(temp)
0419  084F     MOVF temp, W
041A  3A00     XORLW 0x0
041B  1903     BTFSC STATUS, 0x2
041C  2B8E     GOTO 0x38E
041D  3A01     XORLW 0x1
041E  1903     BTFSC STATUS, 0x2
041F  2B92     GOTO 0x392
0420  3A03     XORLW 0x3
0421  1903     BTFSC STATUS, 0x2
0422  2B96     GOTO 0x396
0423  3A01     XORLW 0x1
0424  1903     BTFSC STATUS, 0x2
0425  2B9A     GOTO 0x39A
0426  3A07     XORLW 0x7
0427  1903     BTFSC STATUS, 0x2
0428  2B9F     GOTO 0x39F
0429  3A01     XORLW 0x1
042A  1903     BTFSC STATUS, 0x2
042B  2BA4     GOTO 0x3A4
042C  3A03     XORLW 0x3
042D  1903     BTFSC STATUS, 0x2
042E  2BA9     GOTO 0x3A9
042F  3A01     XORLW 0x1
0430  1903     BTFSC STATUS, 0x2
0431  2BAD     GOTO 0x3AD
0432  3A0F     XORLW 0xF
0433  1903     BTFSC STATUS, 0x2
0434  2BB1     GOTO 0x3B1
0435  3A01     XORLW 0x1
0436  1903     BTFSC STATUS, 0x2
0437  2BB5     GOTO 0x3B5
0438  3A03     XORLW 0x3
0439  1903     BTFSC STATUS, 0x2
043A  2BB9     GOTO 0x3B9
043B  3A01     XORLW 0x1
043C  1903     BTFSC STATUS, 0x2
043D  2BBD     GOTO 0x3BD
043E  3A07     XORLW 0x7
043F  1903     BTFSC STATUS, 0x2
0440  2BC4     GOTO 0x3C4
0441  3A01     XORLW 0x1
0442  1903     BTFSC STATUS, 0x2
0443  2BC8     GOTO 0x3C8
0444  3A03     XORLW 0x3
0445  1903     BTFSC STATUS, 0x2
0446  2BCC     GOTO 0x3CC
0447  3A01     XORLW 0x1
0448  1903     BTFSC STATUS, 0x2
0449  2BF2     GOTO 0x3F2
044A  3A1F     XORLW 0x1F
044B  1903     BTFSC STATUS, 0x2
044C  2BFB     GOTO 0x3FB
044D  3A02     XORLW 0x2
044E  1903     BTFSC STATUS, 0x2
044F  2BFF     GOTO 0x3FF
0450  3A32     XORLW 0x32
0451  1903     BTFSC STATUS, 0x2
0452  2C03     GOTO 0x403
0453  3A01     XORLW 0x1
0454  1903     BTFSC STATUS, 0x2
0455  2C07     GOTO 0x407
0456  3A03     XORLW 0x3
0457  1903     BTFSC STATUS, 0x2
0458  2C0B     GOTO 0x40B
0459  3A01     XORLW 0x1
045A  1903     BTFSC STATUS, 0x2
045B  2C0F     GOTO 0x40F
045C  3A07     XORLW 0x7
045D  1903     BTFSC STATUS, 0x2
045E  2C13     GOTO 0x413
045F  2C60     GOTO 0x460
351:                           {
352:                               case 0x00:
353:                                   usb_reset_all();
038E  118A     BCF PCLATH, 0x3
038F  2620     CALL 0x620
0390  118A     BCF PCLATH, 0x3
354:                                   break;
0391  2C60     GOTO 0x460
355:                               case 0x01:
356:                                   usb_autoconfig();
0392  118A     BCF PCLATH, 0x3
0393  22D6     CALL 0x2D6
0394  118A     BCF PCLATH, 0x3
357:                                   break;
0395  2C60     GOTO 0x460
358:                               case 0x02:
359:                                   temp = usb_get_version();
0396  118A     BCF PCLATH, 0x3
0397  26AA     CALL 0x6AA
0398  118A     BCF PCLATH, 0x3
0399  2BF5     GOTO 0x3F5
360:                                   break;
361:                               case 0x03:
362:                                   usb_set_mode(0x05);
039A  3005     MOVLW 0x5
039B  118A     BCF PCLATH, 0x3
039C  26A2     CALL 0x6A2
039D  118A     BCF PCLATH, 0x3
363:                                   break;
039E  2C60     GOTO 0x460
364:                               case 0x04:
365:                                   usb_set_mode(0x06);
039F  3006     MOVLW 0x6
03A0  118A     BCF PCLATH, 0x3
03A1  26A2     CALL 0x6A2
03A2  118A     BCF PCLATH, 0x3
366:                                   break;
03A3  2C60     GOTO 0x460
367:                               case 0x05:
368:                                   usb_set_mode(0x07);
03A4  3007     MOVLW 0x7
03A5  118A     BCF PCLATH, 0x3
03A6  26A2     CALL 0x6A2
03A7  118A     BCF PCLATH, 0x3
369:                                   break;
03A8  2C60     GOTO 0x460
370:                               case 0x06:
371:                                   usb_disk_connect();
03A9  118A     BCF PCLATH, 0x3
03AA  269D     CALL 0x69D
03AB  118A     BCF PCLATH, 0x3
372:                                   break;
03AC  2C60     GOTO 0x460
373:                               case 0x07:
374:                                   usb_disk_mount();
03AD  118A     BCF PCLATH, 0x3
03AE  2698     CALL 0x698
03AF  118A     BCF PCLATH, 0x3
375:                                   break;
03B0  2C60     GOTO 0x460
376:                               case 0x08:
377:                                   temp = usb_get_status();
03B1  118A     BCF PCLATH, 0x3
03B2  2691     CALL 0x691
03B3  118A     BCF PCLATH, 0x3
03B4  2BF5     GOTO 0x3F5
378:                                   break;
379:                               case 0x09:
380:                                   print_query();
03B5  118A     BCF PCLATH, 0x3
03B6  2262     CALL 0x262
03B7  118A     BCF PCLATH, 0x3
381:                                   break;
03B8  2C60     GOTO 0x460
382:                               case 0x0A:
383:                                   print_capacity();
03B9  118A     BCF PCLATH, 0x3
03BA  21A6     CALL 0x1A6
03BB  118A     BCF PCLATH, 0x3
384:                                   break;
03BC  2C60     GOTO 0x460
385:                               case 0x0B:
386:                                   usb_set_file_name();
03BD  118A     BCF PCLATH, 0x3
03BE  2625     CALL 0x625
03BF  118A     BCF PCLATH, 0x3
387:                                   print_name();
03C0  118A     BCF PCLATH, 0x3
03C1  25CB     CALL 0x5CB
03C2  118A     BCF PCLATH, 0x3
388:                                   break;
03C3  2C60     GOTO 0x460
389:                               case 0x0C:
390:                                   usb_file_open();
03C4  118A     BCF PCLATH, 0x3
03C5  2638     CALL 0x638
03C6  118A     BCF PCLATH, 0x3
391:                                   break;
03C7  2C60     GOTO 0x460
392:                               case 0x0D:
393:                                   usb_file_close();
03C8  118A     BCF PCLATH, 0x3
03C9  263D     CALL 0x63D
03CA  118A     BCF PCLATH, 0x3
394:                                   break;
03CB  2C60     GOTO 0x460
395:                               case 0x0E:
396:                                   usb_get_file_size();
03CC  118A     BCF PCLATH, 0x3
03CD  2663     CALL 0x663
03CE  118A     BCF PCLATH, 0x3
397:                                   print_string_serial("File size: ");
03CF  3068     MOVLW 0x68
03D0  118A     BCF PCLATH, 0x3
03D1  2149     CALL 0x149
03D2  118A     BCF PCLATH, 0x3
398:                                   byte_to_hex(usb_file_size_high);
03D3  0833     MOVF usb_file_size_high, W
03D4  118A     BCF PCLATH, 0x3
03D5  2183     CALL 0x183
03D6  118A     BCF PCLATH, 0x3
399:                                   uart_send(hex_char_high);
03D7  0876     MOVF hex_char_high, W
03D8  118A     BCF PCLATH, 0x3
03D9  2501     CALL 0x501
03DA  118A     BCF PCLATH, 0x3
400:                                   uart_send(hex_char_low);
03DB  0875     MOVF hex_char_low, W
03DC  118A     BCF PCLATH, 0x3
03DD  2501     CALL 0x501
03DE  118A     BCF PCLATH, 0x3
401:                                   byte_to_hex(usb_file_size_low);
03DF  1283     BCF STATUS, 0x5
03E0  1303     BCF STATUS, 0x6
03E1  0832     MOVF usb_file_size_low, W
03E2  118A     BCF PCLATH, 0x3
03E3  2183     CALL 0x183
03E4  118A     BCF PCLATH, 0x3
402:                                   uart_send(hex_char_high);
03E5  0876     MOVF hex_char_high, W
03E6  118A     BCF PCLATH, 0x3
03E7  2501     CALL 0x501
03E8  118A     BCF PCLATH, 0x3
403:                                   uart_send(hex_char_low);
03E9  0875     MOVF hex_char_low, W
03EA  118A     BCF PCLATH, 0x3
03EB  2501     CALL 0x501
03EC  118A     BCF PCLATH, 0x3
404:                                   uart_send('\n');
03ED  300A     MOVLW 0xA
03EE  118A     BCF PCLATH, 0x3
03EF  2501     CALL 0x501
03F0  118A     BCF PCLATH, 0x3
405:                                   break;
03F1  2C60     GOTO 0x460
406:                               case 0x0F:
407:                                   temp = usb_file_read();
03F2  118A     BCF PCLATH, 0x3
03F3  277A     CALL 0x77A
03F4  118A     BCF PCLATH, 0x3
03F5  1283     BCF STATUS, 0x5
03F6  1303     BCF STATUS, 0x6
03F7  00CD     MOVWF 0x4D
03F8  084D     MOVF 0x4D, W
03F9  00CF     MOVWF temp
408:                                   break;
03FA  2C60     GOTO 0x460
409:                               case 0x10:
410:                                   usb_file_create();
03FB  118A     BCF PCLATH, 0x3
03FC  267E     CALL 0x67E
03FD  118A     BCF PCLATH, 0x3
411:                                   break;
03FE  2C60     GOTO 0x460
412:                               /*case 0x11:
413:                                   usb_file_write();
414:                                   break;*/
415:                               case 0x12:
416:                                   usb_write_test_data();
03FF  118A     BCF PCLATH, 0x3
0400  2715     CALL 0x715
0401  118A     BCF PCLATH, 0x3
417:                                   break;
0402  2C60     GOTO 0x460
418:                               case 0x20:
419:                                   mem_clear();
0403  118A     BCF PCLATH, 0x3
0404  24CE     CALL 0x4CE
0405  118A     BCF PCLATH, 0x3
420:                                   break;
0406  2C60     GOTO 0x460
421:                               case 0x21:
422:                                   mem_dump();
0407  118A     BCF PCLATH, 0x3
0408  24DC     CALL 0x4DC
0409  118A     BCF PCLATH, 0x3
423:                                   break;
040A  2C60     GOTO 0x460
424:                               case 0x22:
425:                                   file_dump();
040B  118A     BCF PCLATH, 0x3
040C  24EA     CALL 0x4EA
040D  118A     BCF PCLATH, 0x3
426:                                   break;
040E  2C60     GOTO 0x460
427:                               case 0x23:
428:                                   print_test_data();
040F  118A     BCF PCLATH, 0x3
0410  2607     CALL 0x607
0411  118A     BCF PCLATH, 0x3
429:                                   break;
0412  2C60     GOTO 0x460
430:                               case 0x24:
431:                                   usb_file_size_low = 16;
0413  3010     MOVLW 0x10
0414  00CD     MOVWF 0x4D
0415  084D     MOVF 0x4D, W
0416  00B2     MOVWF usb_file_size_low
432:                                   usb_file_size_high = 0;
0417  01B3     CLRF usb_file_size_high
0418  2C0B     GOTO 0x40B
433:                                   file_dump();
434:                           }
435:                           byte_to_hex(temp);
0460  1283     BCF STATUS, 0x5
0461  1303     BCF STATUS, 0x6
0462  084F     MOVF temp, W
0463  118A     BCF PCLATH, 0x3
0464  2183     CALL 0x183
0465  118A     BCF PCLATH, 0x3
436:                           uart_send(hex_char_high);
0466  0876     MOVF hex_char_high, W
0467  118A     BCF PCLATH, 0x3
0468  2501     CALL 0x501
0469  118A     BCF PCLATH, 0x3
437:                           uart_send(hex_char_low);
046A  0875     MOVF hex_char_low, W
046B  118A     BCF PCLATH, 0x3
046C  2501     CALL 0x501
046D  118A     BCF PCLATH, 0x3
438:                           lcd_clear2();
046E  118A     BCF PCLATH, 0x3
046F  25B3     CALL 0x5B3
0470  118A     BCF PCLATH, 0x3
439:                           lcd_putc(hex_char_high);
0471  0876     MOVF hex_char_high, W
0472  118A     BCF PCLATH, 0x3
0473  2567     CALL 0x567
0474  118A     BCF PCLATH, 0x3
440:                           lcd_putc(hex_char_low);
0475  0875     MOVF hex_char_low, W
0476  118A     BCF PCLATH, 0x3
0477  2567     CALL 0x567
0478  118A     BCF PCLATH, 0x3
0479  118A     BCF PCLATH, 0x3
047A  24FD     CALL 0x4FD
047B  118A     BCF PCLATH, 0x3
047C  1283     BCF STATUS, 0x5
047D  1303     BCF STATUS, 0x6
047E  00CD     MOVWF 0x4D
047F  084D     MOVF 0x4D, W
0480  00CF     MOVWF temp
0481  084E     MOVF state, W
0482  3A00     XORLW 0x0
0483  1903     BTFSC STATUS, 0x2
0484  2B6C     GOTO 0x36C
0485  3A01     XORLW 0x1
0486  1903     BTFSC STATUS, 0x2
0487  2B73     GOTO 0x373
0488  3A03     XORLW 0x3
0489  1903     BTFSC STATUS, 0x2
048A  2B7B     GOTO 0x37B
048B  3A01     XORLW 0x1
048C  1903     BTFSC STATUS, 0x2
048D  2B81     GOTO 0x381
048E  3A07     XORLW 0x7
048F  1903     BTFSC STATUS, 0x2
0490  2C19     GOTO 0x419
0491  2C79     GOTO 0x479
0492  118A     BCF PCLATH, 0x3
0493  2800     GOTO 0x0
441:                           break;
442:                   }
443:               }
444:               return;
445:           }
---  /home/dragomir/repos/MC-10_Tape_Emulator/MC10_Tape_Drive_C.X/core.asm  -----------------------------
                                                  1:     #include <xc.inc>
                                                  2:     #define IRP 7
                                                  3:         
                                                  4:     #define DISP_E PORTA, 2
                                                  5:     #define DISP_RS PORTA, 3
                                                  6:     #define USB_INT PORTB, 0
                                                  7:     #define TAPE_IN PORTB, 1
                                                  8:     #define TAPE_OUT PORTB, 2
                                                  9:     #define SW0 PORTB, 3
                                                  10:    #define SW1 PORTB, 4
                                                  11:    #define SW2 PORTB, 5
                                                  12:    #define SW3 PORTB, 6
                                                  13:    #define RAM_CS PORTB, 7
                                                  14:    #define USB_CS PORTD, 2
                                                  15:    #define USB_RST PORTD, 3
                                                  16:    #define DISP_CLK PORTD, 6
                                                  17:    #define DISP_DATA PORTD, 7
                                                  18:        
                                                  19:    #define F_SRL_VALID _flag_reg, 0
                                                  20:    #define F_BB_FIRST _flag_reg, 1
                                                  21:    #define F_TIMEOUT _flag_reg, 2
                                                  22:    #define F_SPACE_OK _flag_reg, 3
                                                  23:        
                                                  24:    ;PIN USAGE:
                                                  25:    ; PORTA,0 UNUSED OUTPUT
                                                  26:    ; PORTA,1 UNUSED OUTPUT
                                                  27:    ; PORTA,2 DISPLAY CE OUTPUT
                                                  28:    ; PORTA,3 DISPLAY RS OUTPUT
                                                  29:    ; PORTA,4 UNUSED (OPEN DRAIN) OUTPUT
                                                  30:    ; PORTA,5 UNUSED OUTPUT
                                                  31:    ; PORTA,6 CLOCK INPUT
                                                  32:    ; PORTA,7 CLOCK INPUT
                                                  33:    ; PORTB,0 CH376S INTERRUPT INPUT
                                                  34:    ; PORTB,1 TAPE INPUT
                                                  35:    ; PORTB,2 TAPE OUTPUT
                                                  36:    ; PORTB,3 BUTTON 1 INPUT
                                                  37:    ; PORTB,4 BUTTON 2 INPUT
                                                  38:    ; PORTB,5 BUTTON 3 INPUT
                                                  39:    ; PORTB,6 BUTTON 4 INPUT    ICSP CLOCK
                                                  40:    ; PORTB,7 RAM CE OUTPUT     ICSP DATA
                                                  41:    ; PORTC,0 UNUSED OUTPUT
                                                  42:    ; PORTC,1 UNUSED OUTPUT
                                                  43:    ; PORTC,2 UNUSED OUTPUT
                                                  44:    ; PORTC,3 SCK (HARDWARE SPI) OUTPUT
                                                  45:    ; PORTC,4 SDI (HARDWARE SPI) INPUT
                                                  46:    ; PORTC,5 SDO (HARDWARE SPI) OUTPUT
                                                  47:    ; PORTC,6 TXD (HARDWARE UART) INPUT (MUST BE CONFIGURED AS INPUT FOR UART MODULE TO WORK. THIS IS ACTUALLY AN OUTPUT)
                                                  48:    ; PORTC,7 RXD (HARDWARE UART) INPUT
                                                  49:    ; PORTD,0 UNUSED OUTPUT
                                                  50:    ; PORTD,1 UNUSED OUTPUT
                                                  51:    ; PORTD,2 CH376S CE OUTPUT
                                                  52:    ; PORTD,3 CH376S RESET OUTPUT
                                                  53:    ; PORTD,4 TEST OUTPUT
                                                  54:    ; PORTD,5 UNUSED OUTPUT
                                                  55:    ; PORTD,6 DISPLAY CLOCK OUTPUT
                                                  56:    ; PORTD,7 DISPLAY DATA OUTPUT
                                                  57:    ; PORTE,0 UNUSED OUTPUT
                                                  58:    ; PORTE,1 UNUSED OUTPUT
                                                  59:    ; PORTE,2 UNUSED OUTPUT
                                                  60:        
                                                  61:    ;FLAG REG USAGE:
                                                  62:    ;BIT0 SET IF S_REG_LOW CONTAINS VALID DATA
                                                  63:    ;BIT1 SET IF BUILD_BYTE IS WAITING FOR THE FIRST BYTE OF A TRANSMISSION (PREVENTS RESET IF TRANSMISSION FAILS)
                                                  64:    ;BIT2 SET IF TIMEOUT OCCURED WHILE WAITING FOR USB STATUS
                                                  65:    ;BIT3 SET IF FREE SPACE EXCEEDS TAPE SIZE
                                                  66:    ;BIT4 SET IF FREE SPACE EXCEEDS 0x20000
                                                  67:    ;BIT5 UNUSED
                                                  68:    ;BIT6 UNUSED
                                                  69:    ;BIT7 UNUSED
                                                  70:    
                                                  71:    ; When assembly code is placed in a psect, it can be manipulated as a
                                                  72:    ; whole by the linker and placed in memory.  
                                                  73:    ;
                                                  74:    ; In this example, barfunc is the program section (psect) name, 'local' means
                                                  75:    ; that the section will not be combined with other sections even if they have
                                                  76:    ; the same name.  class=CODE means the barfunc must go in the CODE container.
                                                  77:    ; PIC18s should have a delta (addressible unit size) of 1 (default) since they
                                                  78:    ; are byte addressible.  PIC10/12/16s have a delta of 2 since they are word
                                                  79:    ; addressible.  PIC18s should have a reloc (alignment) flag of 2 for any
                                                  80:    ; psect which contains executable code.  PIC10/12/16s can use the default
                                                  81:    ; reloc value of 1.  Use one of the psects below for the device you use:
                                                  82:    
                                                  83:    psect   barfunc,local,class=CODE,delta=2 ; PIC10/12/16
                                                  84:    ; psect   barfunc,local,class=CODE,reloc=2 ; PIC18
                                                  85:        
                                                  86:    global _temp3
                                                  87:    global _temp4
                                                  88:    global _temp5
                                                  89:    global _ram_address_h
                                                  90:    global _ram_address_l
                                                  91:    global _sdel_count
                                                  92:    global _ldel_count
                                                  93:    global _gen_count
                                                  94:    global _gen_count2
                                                  95:    global _gen_count3
                                                  96:    global _gen_count4
                                                  97:    global _gen_count5
                                                  98:    global _gen_count6
                                                  99:    global _tape_size_high
                                                  100:   global _tape_size_low
                                                  101:   global _hex_char_high
                                                  102:   global _hex_char_low
                                                  103:   global _usb_bytes_sent_high
                                                  104:   global _usb_bytes_sent_low
                                                  105:   global _usb_file_size_high
                                                  106:   global _usb_file_size_low
                                                  107:   global _usb_bytes_read_high
                                                  108:   global _usb_bytes_read_low
                                                  109:   global _usb_drive_size1
                                                  110:   global _usb_drive_size2
                                                  111:   global _usb_drive_size3
                                                  112:   global _usb_free_space1
                                                  113:   global _usb_free_space2
                                                  114:   global _usb_free_space3
                                                  115:   global _usb_logical_bytes1
                                                  116:   global _usb_logical_bytes2
                                                  117:   global _usb_logical_bytes3
                                                  118:   global _usb_target_status
                                                  119:   global _s_reg_high
                                                  120:   global _s_reg_low
                                                  121:   global _timeout_high
                                                  122:   global _timeout_low
                                                  123:   global _delay_counter
                                                  124:   global _flag_reg
                                                  125:   global _fifo_read_idx
                                                  126:   global _fifo_read_bank
                                                  127:   global _fifo_write_idx
                                                  128:   global _fifo_write_bank
                                                  129:   global _fifo_num_bytes
                                                  130:   
                                                  131:   global _tape_name
                                                  132:   
                                                  133:   
                                                  134:   ;extern entry__byte_to_hex
                                                  135:   global _byte_to_hex
                                                  136:   global _fifo_push
                                                  137:   global _fifo_pop
                                                  138:   
                                                  139:    
                                                  140:   global _initialize
                                                  141:   _initialize
0494  1303     BCF STATUS, 0x6                    142:       BANKSEL PORTA
0496  0185     CLRF PORTA                         143:       CLRF PORTA
0497  0186     CLRF PORTB                         144:       CLRF PORTB
0498  0187     CLRF PORTC                         145:       CLRF PORTC
0499  0188     CLRF PORTD                         146:       CLRF PORTD
049A  0986     COMF PORTB, F                      147:       COMF PORTB, F
049B  0987     COMF PORTC, F                      148:       COMF PORTC, F
049C  0988     COMF PORTD, F                      149:       COMF PORTD, F
049D  1303     BCF STATUS, 0x6                    150:       BANKSEL TRISA  ;SWITCH TO BANK 1
049F  30C0     MOVLW 0xC0                         151:       MOVLW 0b11000000
04A0  0085     MOVWF PORTA                        152:       MOVWF TRISA	;CONFIGURE PORTA
04A1  307B     MOVLW 0x7B                         153:       MOVLW 0b01111011
04A2  0086     MOVWF PORTB                        154:       MOVWF TRISB ;CONFIGURE PORTB
04A3  30D0     MOVLW 0xD0                         155:       MOVLW 0b11010000
04A4  0087     MOVWF PORTC                        156:       MOVWF TRISC ;CONFIGURE PORTC
04A5  3000     MOVLW 0x0                          157:       MOVLW 0b00000000
04A6  0088     MOVWF PORTD                        158:       MOVWF TRISD	;CONFIGURE PORTD
04A7  30F8     MOVLW 0xF8                         159:       MOVLW 0b11111000
04A8  0089     MOVWF PORTE                        160:       MOVWF TRISE	;CONFIGURE PORTE
04A9  3000     MOVLW 0x0                          161:       MOVLW 0b00000000	    ;SMP=0, CKE=0, DA=0, P=0, S=0, RW=0, UA=0, BF=0
04AA  0094     MOVWF SSPCON                       162:       MOVWF SSPSTAT ;CONFIGURE SPI
04AB  300F     MOVLW 0xF                          163:       MOVLW 0b00001111	    ;PCFG=1111
04AC  009F     MOVWF ADCON0                       164:       MOVWF ADCON1 ;DISABLE ANALOG INPUTS
04AD  3026     MOVLW 0x26                         165:       MOVLW 0b00100110	;CSRC=0, TX9=0, TXEN=1, SYNC=0, UNIMPLEMENTED=0, BRGH=1, TRMT=1, TX9D=0
04AE  0098     MOVWF RCSTA                        166:       MOVWF TXSTA ;CONFIGURE UART
04AF  3019     MOVLW 0x19                         167:       MOVLW 25
04B0  0099     MOVWF TXREG                        168:       MOVWF SPBRG ;CONFIGURE BAUD RATE
04B1  30D8     MOVLW 0xD8                         169:       MOVLW 0b11011000	;RBPU = 1, INTEDG = 1, T0CS = 0, T0SE = 1, PSA = 1, PS2 = 0, PS1 = 0, PS0 = 0
04B2  0081     MOVWF TMR0                         170:       MOVWF OPTION_REG	;CONFIGURE TIMER
04B3  1303     BCF STATUS, 0x6                    171:       BANKSEL SSPCON
04B5  3030     MOVLW 0x30                         172:       MOVLW 0b00110000	;WCOL=0, SSPOV=0, SSPEN=1, CKP=1, SSPM=0000
04B6  0094     MOVWF SSPCON                       173:       MOVWF SSPCON ;CONFIGURE SPI
04B7  3090     MOVLW 0x90                         174:       MOVLW 0b10010000	;SPEN=1, RX9=0,SREN=0, CREN=1, ADDEN=0, FERR=0, OERR=0, RX9D=0
04B8  0098     MOVWF RCSTA                        175:       MOVWF RCSTA ;CONFIGURE UART
04B9  3020     MOVLW 0x20                         176:       MOVLW 0b00100000
04BA  008B     MOVWF INTCON                       177:       MOVWF INTCON    ;ENABLE TIMER 0 INTERRUPT
04BB  01A3     CLRF 0x23                          178:       CLRF _flag_reg
04BC  01A8     CLRF 0x28                          179:       CLRF _s_reg_high
04BD  01A7     CLRF 0x27                          180:       CLRF _s_reg_low
04BE  1188     BCF PORTD, 0x3                     181:       BCF USB_RST
04BF  3032     MOVLW 0x32                         182:       MOVLW 50
04C0  25FB     CALL 0x5FB                         183:       CALL _delay_millis   ;50 MS DELAY AT STARTUP
04C1  27AC     CALL 0x7AC                         184:       CALL _fifo_init
04C2  2553     CALL 0x553                         185:       CALL RAM_CONFIG
04C3  01C1     CLRF 0x41                          186:       CLRF _ram_address_h
04C4  01C0     CLRF 0x40                          187:       CLRF _ram_address_l
04C5  3055     MOVLW 0x55                         188:       MOVLW 0x55
04C6  252E     CALL 0x52E                         189:       CALL RAM_WRITE
04C7  30AA     MOVLW 0xAA                         190:       MOVLW 0xAA
04C8  252B     CALL 0x52B                         191:       CALL RAM_WRITE_AUTO
                                                  192:       ;CALL _mem_clear
04C9  257C     CALL 0x57C                         193:       CALL FUNCTIONSET_LCD    ;INITIALIZE DISPLAY
04CA  2585     CALL 0x585                         194:       CALL DISPLAYON  ;POWER ON THE DISPLAY
04CB  258C     CALL 0x58C                         195:       CALL CLEARDISPLAY	;CLEAR THE DISPLAY
04CC  2593     CALL 0x593                         196:       CALL SETHOME_LCD	;SET CURSOR TO THE START OF LINE 1
04CD  0008     RETURN                             197:       RETURN
                                                  198:   
                                                  199:   global _mem_clear
                                                  200:   _mem_clear
04CE  30FF     MOVLW 0xFF                         201:       MOVLW 0xFF
04CF  00C0     MOVWF 0x40                         202:       MOVWF _ram_address_l
04D0  00C1     MOVWF 0x41                         203:       MOVWF _ram_address_h
                                                  204:   MEM_CLEAR_LOOP
                                                  205:       ;BSF PORTD, 4
04D1  30FF     MOVLW 0xFF                         206:       MOVLW 0xFF
04D2  252B     CALL 0x52B                         207:       CALL RAM_WRITE_AUTO
                                                  208:       ;BCF PORTD, 4    ;PORTD 4 IS A DEBUG OUTPUT TO MEASURE THE DURATION OF RAM_WRITE
04D3  0840     MOVF 0x40, W                       209:       MOVF _ram_address_l, W
04D4  3AFF     XORLW 0xFF                         210:       XORLW 0xFF
04D5  1D03     BTFSS STATUS, 0x2                  211:       BTFSS ZERO
04D6  2CD1     GOTO 0x4D1                         212:       GOTO MEM_CLEAR_LOOP
04D7  0841     MOVF 0x41, W                       213:       MOVF _ram_address_h, W
04D8  3AFF     XORLW 0xFF                         214:       XORLW 0xFF
04D9  1D03     BTFSS STATUS, 0x2                  215:       BTFSS ZERO
04DA  2CD1     GOTO 0x4D1                         216:       GOTO MEM_CLEAR_LOOP
04DB  0008     RETURN                             217:       RETURN
                                                  218:   
                                                  219:   global _mem_dump
                                                  220:   _mem_dump
04DC  30FF     MOVLW 0xFF                         221:       MOVLW 0xFF
04DD  00C0     MOVWF 0x40                         222:       MOVWF _ram_address_l
04DE  00C1     MOVWF 0x41                         223:       MOVWF _ram_address_h
                                                  224:   MEM_DUMP_LOOP
04DF  2505     CALL 0x505                         225:       CALL RAM_READ_AUTO
04E0  2501     CALL 0x501                         226:       CALL _uart_send
04E1  0840     MOVF 0x40, W                       227:       MOVF _ram_address_l, W
04E2  3AFF     XORLW 0xFF                         228:       XORLW 0xFF
04E3  1D03     BTFSS STATUS, 0x2                  229:       BTFSS ZERO
04E4  2CDF     GOTO 0x4DF                         230:       GOTO MEM_DUMP_LOOP
04E5  0841     MOVF 0x41, W                       231:       MOVF _ram_address_h, W
04E6  3AFF     XORLW 0xFF                         232:       XORLW 0xFF
04E7  1D03     BTFSS STATUS, 0x2                  233:       BTFSS ZERO
04E8  2CDF     GOTO 0x4DF                         234:       GOTO MEM_DUMP_LOOP
04E9  0008     RETURN                             235:       RETURN
                                                  236:   
                                                  237:   global _file_dump
                                                  238:   _file_dump
04EA  0833     MOVF 0x33, W                       239:       MOVF _usb_file_size_high, W
04EB  0432     IORWF 0x32, W                      240:       IORWF _usb_file_size_low, W
04EC  1903     BTFSC STATUS, 0x2                  241:       BTFSC ZERO
04ED  0008     RETURN                             242:       RETURN
04EE  0833     MOVF 0x33, W                       243:       MOVF _usb_file_size_high, W
04EF  00BD     MOVWF 0x3D                         244:       MOVWF _gen_count
04F0  0832     MOVF 0x32, W                       245:       MOVF _usb_file_size_low, W
04F1  00BC     MOVWF 0x3C                         246:       MOVWF _gen_count2
04F2  30FF     MOVLW 0xFF                         247:       MOVLW 0xFF
04F3  00C0     MOVWF 0x40                         248:       MOVWF _ram_address_l
04F4  00C1     MOVWF 0x41                         249:       MOVWF _ram_address_h
04F5  0ABD     INCF 0x3D, F                       250:       INCF _gen_count, F
                                                  251:   FD_INNER
04F6  2505     CALL 0x505                         252:       CALL RAM_READ_AUTO
04F7  2501     CALL 0x501                         253:       CALL _uart_send
04F8  0BBC     DECFSZ 0x3C, F                     254:       DECFSZ _gen_count2, F
04F9  2CF6     GOTO 0x4F6                         255:       GOTO FD_INNER
04FA  0BBD     DECFSZ 0x3D, F                     256:       DECFSZ _gen_count, F
04FB  2CF6     GOTO 0x4F6                         257:       GOTO FD_INNER
04FC  0008     RETURN                             258:       RETURN
                                                  259:   
                                                  260:   global _uart_read
                                                  261:   _uart_read
04FD  1E8C     BTFSS PIR1, 0x5                    262:       BTFSS RCIF    ;CHECK IF UART RECEIVE BUFFER IS FULL
04FE  2CFD     GOTO 0x4FD                         263:       GOTO _uart_read  ;IF NOT WAIT UNTIL ITS FULL
04FF  081A     MOVF RCREG, W                      264:       MOVF RCREG, W   ;COPY DATA TO W
0500  0008     RETURN                             265:       RETURN
                                                  266:   
                                                  267:   global _uart_send
                                                  268:   _uart_send
0501  1E0C     BTFSS PIR1, 0x4                    269:       BTFSS TXIF    ;CHECK IF UART TRANSMIT BUFFER IS EMPTY
0502  2D01     GOTO 0x501                         270:       GOTO _uart_send  ;IF NOT WAIT UNTIL IT IS
0503  0099     MOVWF TXREG                        271:       MOVWF TXREG	    ;COPY DATA TO TXREG
0504  0008     RETURN                             272:       RETURN
                                                  273:   
                                                  274:   RAM_READ_AUTO
0505  0FC0     INCFSZ 0x40, F                     275:       INCFSZ _ram_address_l, F    ;INCREMENT LOW ADDRESS
0506  03C1     DECF 0x41, F                       276:       DECF _ram_address_h, F
0507  0AC1     INCF 0x41, F                       277:       INCF _ram_address_h, F	;IF LOW ADDRESS IS ZERO INCREMENT THE HIGH ADDRESS TOO
                                                  278:   RAM_READ
0508  1386     BCF PORTB, 0x7                     279:       BCF RAM_CS    ;CHIP ENABLE
0509  3003     MOVLW 0x3                          280:       MOVLW 0x03	;PUT WRITE COMMAND IN W
050A  0093     MOVWF SSPBUF                       281:       MOVWF SSPBUF    ;SEND COMMAND
050B  0841     MOVF 0x41, W                       282:       MOVF _ram_address_h, W   ;COPY ADDRESS TO W
050C  1303     BCF STATUS, 0x6                    283:       BANKSEL SSPSTAT
                                                  284:   RAM_WAIT_AH
050E  1C14     BTFSS SSPCON, 0x0                  285:       BTFSS BF	;IS THE TRANSMISSION READY
050F  2D0E     GOTO 0x50E                         286:       GOTO RAM_WAIT_AH	;IF NOT WAIT UNTIL IT IS
0510  1303     BCF STATUS, 0x6                    287:       BANKSEL SSPBUF
0512  0093     MOVWF SSPBUF                       288:       MOVWF SSPBUF    ;SEND ADDRESS HIGH BYTE
0513  0840     MOVF 0x40, W                       289:       MOVF _ram_address_l, W   ;COPY ADDRESS TO W
0514  1303     BCF STATUS, 0x6                    290:       BANKSEL SSPSTAT
                                                  291:   RAM_WAIT_AL
0516  1C14     BTFSS SSPCON, 0x0                  292:       BTFSS BF
0517  2D16     GOTO 0x516                         293:       GOTO RAM_WAIT_AL
0518  1303     BCF STATUS, 0x6                    294:       BANKSEL SSPBUF
051A  0093     MOVWF SSPBUF                       295:       MOVWF SSPBUF    ;SEND ADDRESS LOW BYTE
051B  1303     BCF STATUS, 0x6                    296:       BANKSEL SSPSTAT
                                                  297:   RAM_WAIT_D
051D  1C14     BTFSS SSPCON, 0x0                  298:       BTFSS BF
051E  2D1D     GOTO 0x51D                         299:       GOTO RAM_WAIT_D
051F  1303     BCF STATUS, 0x6                    300:       BANKSEL SSPBUF
0521  0193     CLRF SSPBUF                        301:       CLRF SSPBUF
0522  1303     BCF STATUS, 0x6                    302:       BANKSEL SSPSTAT
                                                  303:   RAM_WAIT_R
0524  1C14     BTFSS SSPCON, 0x0                  304:       BTFSS BF
0525  2D24     GOTO 0x524                         305:       GOTO RAM_WAIT_R
0526  1303     BCF STATUS, 0x6                    306:       BANKSEL SSPBUF
0528  0813     MOVF SSPBUF, W                     307:       MOVF SSPBUF, W  ;COPY DATA TO W
0529  1786     BSF PORTB, 0x7                     308:       BSF RAM_CS
052A  0008     RETURN                             309:       RETURN
                                                  310:   
                                                  311:   RAM_WRITE_AUTO
052B  0FC0     INCFSZ 0x40, F                     312:       INCFSZ _ram_address_l, F    ;INCREMENT LOW ADDRESS
052C  03C1     DECF 0x41, F                       313:       DECF _ram_address_h, F
052D  0AC1     INCF 0x41, F                       314:       INCF _ram_address_h, F	;IF LOW ADDRESS IS ZERO INCREMENT THE HIGH ADDRESS TOO
                                                  315:   RAM_WRITE
052E  00C2     MOVWF 0x42                         316:       MOVWF _temp5
052F  1386     BCF PORTB, 0x7                     317:       BCF RAM_CS    ;CHIP ENABLE
0530  3002     MOVLW 0x2                          318:       MOVLW 0x02	;PUT WRITE COMMAND IN W
0531  0093     MOVWF SSPBUF                       319:       MOVWF SSPBUF    ;SEND COMMAND
0532  0841     MOVF 0x41, W                       320:       MOVF _ram_address_h, W   ;COPY ADDRESS TO W
0533  1303     BCF STATUS, 0x6                    321:       BANKSEL SSPSTAT
                                                  322:   RAM_WRITE_AH
0535  1C14     BTFSS SSPCON, 0x0                  323:       BTFSS BF	;IS THE TRANSMISSION READY
0536  2D35     GOTO 0x535                         324:       GOTO RAM_WRITE_AH	;IF NOT WAIT UNTIL IT IS
0537  1303     BCF STATUS, 0x6                    325:       BANKSEL SSPBUF
0539  0093     MOVWF SSPBUF                       326:       MOVWF SSPBUF    ;SEND ADDRESS HIGH BYTE
053A  0840     MOVF 0x40, W                       327:       MOVF _ram_address_l, W   ;COPY ADDRESS TO W
053B  1303     BCF STATUS, 0x6                    328:       BANKSEL SSPSTAT
                                                  329:   RAM_WRITE_AL
053D  1C14     BTFSS SSPCON, 0x0                  330:       BTFSS BF
053E  2D3D     GOTO 0x53D                         331:       GOTO RAM_WRITE_AL
053F  1303     BCF STATUS, 0x6                    332:       BANKSEL SSPBUF
0541  0093     MOVWF SSPBUF                       333:       MOVWF SSPBUF    ;SEND ADDRESS LOW BYTE
0542  0842     MOVF 0x42, W                       334:       MOVF _temp5, W    ;COPY DATA TO W
0543  1303     BCF STATUS, 0x6                    335:       BANKSEL SSPSTAT
                                                  336:   RAM_WRITE_D
0545  1C14     BTFSS SSPCON, 0x0                  337:       BTFSS BF
0546  2D45     GOTO 0x545                         338:       GOTO RAM_WRITE_D
0547  1303     BCF STATUS, 0x6                    339:       BANKSEL SSPBUF
0549  0093     MOVWF SSPBUF                       340:       MOVWF SSPBUF    ;SEND DATA
054A  1303     BCF STATUS, 0x6                    341:       BANKSEL SSPSTAT
                                                  342:   RAM_WRITE_R
054C  1C14     BTFSS SSPCON, 0x0                  343:       BTFSS BF
054D  2D4C     GOTO 0x54C                         344:       GOTO RAM_WRITE_R
054E  1303     BCF STATUS, 0x6                    345:       BANKSEL SSPBUF
0550  0813     MOVF SSPBUF, W                     346:       MOVF SSPBUF, W  ;COPY DUMMY DATA TO W
0551  1786     BSF PORTB, 0x7                     347:       BSF RAM_CS
0552  0008     RETURN                             348:       RETURN
                                                  349:       
                                                  350:   RAM_CONFIG
0553  1386     BCF PORTB, 0x7                     351:       BCF RAM_CS    ;CHIP ENABLE
0554  3001     MOVLW 0x1                          352:       MOVLW 0x01	;PUT WRITE COMMAND IN W
0555  0093     MOVWF SSPBUF                       353:       MOVWF SSPBUF    ;SEND COMMAND
0556  3000     MOVLW 0x0                          354:       MOVLW 0x00	;CONFIGURE FOR BYTE MODE
0557  1303     BCF STATUS, 0x6                    355:       BANKSEL SSPSTAT
                                                  356:   RAM_CONFIG_C
0559  1C14     BTFSS SSPCON, 0x0                  357:       BTFSS BF	;IS THE TRANSMISSION READY
055A  2D59     GOTO 0x559                         358:       GOTO RAM_CONFIG_C	;IF NOT WAIT UNTIL IT IS
055B  1303     BCF STATUS, 0x6                    359:       BANKSEL SSPBUF
055D  0093     MOVWF SSPBUF                       360:       MOVWF SSPBUF    ;SEND CONFIG DATA
055E  1303     BCF STATUS, 0x6                    361:       BANKSEL SSPSTAT
                                                  362:   RAM_CONFIG_D
0560  1C14     BTFSS SSPCON, 0x0                  363:       BTFSS BF
0561  2D60     GOTO 0x560                         364:       GOTO RAM_CONFIG_D
0562  1303     BCF STATUS, 0x6                    365:       BANKSEL SSPBUF
0564  0813     MOVF SSPBUF, W                     366:       MOVF SSPBUF, W  ;COPY DUMMY DATA TO W
0565  1786     BSF PORTB, 0x7                     367:       BSF RAM_CS
0566  0008     RETURN                             368:       RETURN
                                                  369:   
                                                  370:   global _lcd_putc
                                                  371:   _lcd_putc
0567  1585     BSF PORTA, 0x3                     372:       BSF DISP_RS	;RS LINE TO 1 (PORT A BIT 3)
0568  256D     CALL 0x56D                         373:       CALL _lcd_send
0569  25C0     CALL 0x5C0                         374:       CALL _pulse_e
056A  3002     MOVLW 0x2                          375:       MOVLW 0x02
056B  25FB     CALL 0x5FB                         376:       CALL _delay_millis
056C  0008     RETURN                             377:       RETURN
                                                  378:       
                                                  379:   global _lcd_send
                                                  380:   _lcd_send    ;SENDS DATA OR COMMAND TO LCD SHIFT REGISTER
056D  00C4     MOVWF 0x44                         381:       MOVWF _temp3	;COPY DATA TO TEMP VARIABLE
056E  3008     MOVLW 0x8                          382:       MOVLW 0x08
056F  00BB     MOVWF 0x3B                         383:       MOVWF _gen_count3	;COUNT 8 BITS
                                                  384:   LCD_SEND_LOOP
0570  1BC4     BTFSC 0x44, 0x7                    385:       BTFSC _temp3,7
0571  1788     BSF PORTD, 0x7                     386:       BSF DISP_DATA
0572  1FC4     BTFSS 0x44, 0x7                    387:       BTFSS _temp3,7
0573  1388     BCF PORTD, 0x7                     388:       BCF DISP_DATA
0574  0DC4     RLF 0x44, F                        389:       RLF _temp3,F
0575  1708     BSF PORTD, 0x6                     390:       BSF DISP_CLK
0576  0000     NOP                                391:       NOP
0577  0000     NOP                                392:       NOP
0578  1308     BCF PORTD, 0x6                     393:       BCF DISP_CLK
0579  0BBB     DECFSZ 0x3B, F                     394:       DECFSZ _gen_count3,F
057A  2D70     GOTO 0x570                         395:       GOTO LCD_SEND_LOOP
057B  0008     RETURN                             396:       RETURN
                                                  397:   
                                                  398:   FUNCTIONSET_LCD
057C  1105     BCF PORTA, 0x2                     399:       BCF DISP_E	;MAKE SURE THAT E STARTS LOW
057D  1308     BCF PORTD, 0x6                     400:       BCF DISP_CLK     ;MAKE SURE DISPLAY CLOCK STARTS LOW
057E  1185     BCF PORTA, 0x3                     401:       BCF DISP_RS	;RS LINE TO 0 (PORT A BIT 3)
057F  3038     MOVLW 0x38                         402:       MOVLW 0b00111000	;FUNCTION SET COMMAND
0580  256D     CALL 0x56D                         403:       CALL _lcd_send
0581  25C0     CALL 0x5C0                         404:       CALL _pulse_e    ;PULSE E LINE HIGH (PORT A BIT 2)
0582  300A     MOVLW 0xA                          405:       MOVLW 10
0583  25FB     CALL 0x5FB                         406:       CALL _delay_millis
0584  0008     RETURN                             407:       RETURN
                                                  408:   
                                                  409:   DISPLAYON
0585  1185     BCF PORTA, 0x3                     410:       BCF DISP_RS   ;RS LINE TO 0 (PORT A BIT 3)
0586  300F     MOVLW 0xF                          411:       MOVLW 0x0F  ;DISPLAY ON/OFF AND CURSOR COMMAND
0587  256D     CALL 0x56D                         412:       CALL _lcd_send
0588  25C0     CALL 0x5C0                         413:       CALL _pulse_e
0589  300A     MOVLW 0xA                          414:       MOVLW 10
058A  25FB     CALL 0x5FB                         415:       CALL _delay_millis
058B  0008     RETURN                             416:       RETURN
                                                  417:   
                                                  418:   CLEARDISPLAY
058C  1185     BCF PORTA, 0x3                     419:       BCF DISP_RS	;RS LINE LOW
058D  3001     MOVLW 0x1                          420:       MOVLW 0x01	;CLEAR DISPLAY COMMAND
058E  256D     CALL 0x56D                         421:       CALL _lcd_send	;WRITE TO DATA LINES
058F  25C0     CALL 0x5C0                         422:       CALL _pulse_e
0590  300A     MOVLW 0xA                          423:       MOVLW 10
0591  25FB     CALL 0x5FB                         424:       CALL _delay_millis
0592  0008     RETURN                             425:       RETURN
                                                  426:   
                                                  427:   SETHOME_LCD
0593  1185     BCF PORTA, 0x3                     428:       BCF DISP_RS ;RS LINE LOW
0594  3003     MOVLW 0x3                          429:       MOVLW 0x03   ;DISPLAY AND CURSOR HOME COMMAND
0595  256D     CALL 0x56D                         430:       CALL _lcd_send ;WRITE TO DATA LINES
0596  25C0     CALL 0x5C0                         431:       CALL _pulse_e
0597  3005     MOVLW 0x5                          432:       MOVLW 5
0598  25FB     CALL 0x5FB                         433:       CALL _delay_millis
0599  0008     RETURN                             434:       RETURN
                                                  435:   
                                                  436:   global _lcd_line2
                                                  437:   _lcd_line2
059A  2593     CALL 0x593                         438:       CALL SETHOME_LCD
059B  3028     MOVLW 0x28                         439:       MOVLW 28H   ;SET COUNTER TO 40
059C  00BC     MOVWF 0x3C                         440:       MOVWF _gen_count2
059D  3010     MOVLW 0x10                         441:       MOVLW 0b00010000   ;CURSOR LEFT COMMAND
059E  256D     CALL 0x56D                         442:       CALL _lcd_send ;WRITE COMMAND TO DATA LINES
                                                  443:   CLLOOP40
059F  1185     BCF PORTA, 0x3                     444:       BCF DISP_RS	;RS LINE LOW (COMMAND MODE)
05A0  25C0     CALL 0x5C0                         445:       CALL _pulse_e
05A1  3002     MOVLW 0x2                          446:       MOVLW 2
05A2  25FB     CALL 0x5FB                         447:       CALL _delay_millis
05A3  0BBC     DECFSZ 0x3C, F                     448:       DECFSZ _gen_count2, F
05A4  2D9F     GOTO 0x59F                         449:       GOTO CLLOOP40
05A5  0008     RETURN                             450:       RETURN
                                                  451:   
                                                  452:   LCD_CLEAR1
05A6  2593     CALL 0x593                         453:       CALL SETHOME_LCD
05A7  3020     MOVLW 0x20                         454:       MOVLW 0x20 ;SPACE CHAR
05A8  1585     BSF PORTA, 0x3                     455:       BSF DISP_RS ;RS LINE HIGH FOR DATA
05A9  256D     CALL 0x56D                         456:       CALL _lcd_send	;PUT CHAR ON THE DATA LINES
05AA  3014     MOVLW 0x14                         457:       MOVLW 20 ;COUNT 20 SPACE CHARS
05AB  00BC     MOVWF 0x3C                         458:       MOVWF _gen_count2
                                                  459:   LCD_CLEAR12
05AC  25C0     CALL 0x5C0                         460:       CALL _pulse_e
05AD  3002     MOVLW 0x2                          461:       MOVLW 2
05AE  25FB     CALL 0x5FB                         462:       CALL _delay_millis
05AF  0BBC     DECFSZ 0x3C, F                     463:       DECFSZ _gen_count2, F
05B0  2DAC     GOTO 0x5AC                         464:       GOTO LCD_CLEAR12
05B1  2593     CALL 0x593                         465:       CALL SETHOME_LCD
05B2  0008     RETURN                             466:       RETURN
                                                  467:   
                                                  468:   global _lcd_clear2
                                                  469:   _lcd_clear2
05B3  259A     CALL 0x59A                         470:       CALL _lcd_line2
05B4  3020     MOVLW 0x20                         471:       MOVLW 0x20 ;SPACE CHAR
05B5  1585     BSF PORTA, 0x3                     472:       BSF DISP_RS ;RS LINE HIGH FOR DATA
05B6  256D     CALL 0x56D                         473:       CALL _lcd_send	;PUT CHAR ON THE DATA LINES
05B7  3014     MOVLW 0x14                         474:       MOVLW 20 ;COUNT 20 SPACE CHARS
05B8  00BC     MOVWF 0x3C                         475:       MOVWF _gen_count2
                                                  476:   LCD_CLEAR22
05B9  25C0     CALL 0x5C0                         477:       CALL _pulse_e
05BA  3002     MOVLW 0x2                          478:       MOVLW 2
05BB  25FB     CALL 0x5FB                         479:       CALL _delay_millis
05BC  0BBC     DECFSZ 0x3C, F                     480:       DECFSZ _gen_count2, F
05BD  2DB9     GOTO 0x5B9                         481:       GOTO LCD_CLEAR22
05BE  259A     CALL 0x59A                         482:       CALL _lcd_line2
05BF  0008     RETURN                             483:       RETURN
                                                  484:   
                                                  485:   global _pulse_e
                                                  486:   _pulse_e
05C0  1505     BSF PORTA, 0x2                     487:       BSF DISP_E   ;SET E LINE HIGH
05C1  0000     NOP                                488:       NOP
05C2  0000     NOP                                489:       NOP
05C3  0000     NOP                                490:       NOP
05C4  0000     NOP                                491:       NOP
05C5  0000     NOP                                492:       NOP ;MODIFIED FOR 4MHZ CLOCK
05C6  0000     NOP                                493:       NOP
05C7  0000     NOP                                494:       NOP
05C8  0000     NOP                                495:       NOP
05C9  1105     BCF PORTA, 0x2                     496:       BCF DISP_E   ;SET E LINE LOW
05CA  0008     RETURN                             497:       RETURN
                                                  498:   
                                                  499:   global _print_name
                                                  500:   _print_name
05CB  1383     BCF STATUS, 0x7                    501:       BCF STATUS, IRP ;SET BANK 0 AND 1
05CC  3050     MOVLW 0x50                         502:       MOVLW _tape_name
05CD  0084     MOVWF FSR                          503:       MOVWF FSR
05CE  3008     MOVLW 0x8                          504:       MOVLW 8  ;COUNT 8 CHARS
05CF  00BC     MOVWF 0x3C                         505:       MOVWF _gen_count2
05D0  1585     BSF PORTA, 0x3                     506:       BSF DISP_RS ;RS LINE HIGH FOR DATA
                                                  507:   PN_LOOP
05D1  0800     MOVF INDF, W                       508:       MOVF INDF, W
05D2  256D     CALL 0x56D                         509:       CALL _lcd_send
05D3  25C0     CALL 0x5C0                         510:       CALL _pulse_e
05D4  3002     MOVLW 0x2                          511:       MOVLW 2
05D5  25FB     CALL 0x5FB                         512:       CALL _delay_millis
05D6  0A84     INCF FSR, F                        513:       INCF FSR, F
05D7  0BBC     DECFSZ 0x3C, F                     514:       DECFSZ _gen_count2, F
05D8  2DD1     GOTO 0x5D1                         515:       GOTO PN_LOOP
05D9  0008     RETURN                             516:       RETURN
                                                  517:   
                                                  518:   ;TAPE_IN
                                                  519:   ;    MOVLW H'FF'
                                                  520:   ;    MOVWF RAM_ADDRESS_H
                                                  521:   ;    MOVWF RAM_ADDRESS_L
                                                  522:   ;    BSF FLAG_REG,1 ;DISSABLE RESET IF TRANSMISSION FAILS
                                                  523:   ;    CALL GET_LEADER
                                                  524:   ;    BCF FLAG_REG,1 ;ENABLE RESET IF TRANSMISSION FAILS
                                                  525:   ;    CALL SAVE_FIRST_BLOCK
                                                  526:   ;    INCFSZ RAM_ADDRESS_L, F    ;INCREMENT LOW ADDRESS
                                                  527:   ;    DECF RAM_ADDRESS_H, F
                                                  528:   ;    INCF RAM_ADDRESS_H, F	;IF LOW ADDRESS IS ZERO INCREMENT THE HIGH ADDRESS TOO
                                                  529:   ;    MOVF RAM_ADDRESS_H, W
                                                  530:   ;    MOVWF TAPE_SIZE_HIGH
                                                  531:   ;    MOVF RAM_ADDRESS_L, W
                                                  532:   ;    MOVWF TAPE_SIZE_LOW
                                                  533:   ;    CLRF RAM_ADDRESS_H
                                                  534:   ;    MOVLW H'03'
                                                  535:   ;    MOVWF RAM_ADDRESS_L
                                                  536:   ;    BCF STATUS, IRP ;SET BANKS 0 AND 1
                                                  537:   ;    MOVLW TAPE_NAME
                                                  538:   ;    MOVWF FSR
                                                  539:   ;    MOVLW D'08'
                                                  540:   ;    MOVWF GEN_COUNT
                                                  541:   ;NAME_COPY
                                                  542:   ;    CALL RAM_READ_AUTO
                                                  543:   ;    MOVF DREG, W
                                                  544:   ;    MOVWF INDF
                                                  545:   ;    INCF FSR, F
                                                  546:   ;    DECFSZ GEN_COUNT, F
                                                  547:   ;    GOTO NAME_COPY
                                                  548:   ;    RETURN
                                                  549:   
                                                  550:   ;GET_LEADER
                                                  551:   ;    MOVLW D'128'    ;LENGTH OF LEADER
                                                  552:   ;    MOVWF GEN_COUNT2
                                                  553:   ;LEADER_LOOP
                                                  554:   ;    CALL BUILD_BYTE
                                                  555:   ;    MOVF DREG,W
                                                  556:   ;    XORLW H'55'
                                                  557:   ;    BTFSS STATUS, Z
                                                  558:   ;    GOTO GL_FIX
                                                  559:   ;    DECFSZ GEN_COUNT2, F
                                                  560:   ;    GOTO LEADER_LOOP
                                                  561:   ;    RETURN
                                                  562:   ;GL_FIX
                                                  563:   ;    DECFSZ GEN_COUNT2, F
                                                  564:   ;    GOTO GL_FIX2
                                                  565:   ;    GOTO BUILD_PANIC
                                                  566:   ;GL_FIX2
                                                  567:   ;    CALL BUILD_ALIGN
                                                  568:   ;    MOVF DREG,W
                                                  569:   ;    XORLW H'55'
                                                  570:   ;    BTFSS STATUS,Z
                                                  571:   ;    GOTO BUILD_PANIC
                                                  572:   ;    DECFSZ GEN_COUNT2, F
                                                  573:   ;    GOTO LEADER_LOOP
                                                  574:   ;    GOTO BUILD_PANIC
                                                  575:   
                                                  576:   ;SAVE_FIRST_BLOCK
                                                  577:   ;    CALL BUILD_BYTE
                                                  578:   ;    BTFSS DREG,0    ;CHECK IF BIT 0 IS SET (IF IT IS CLEARED THERE HAS BEEN AN ALIGNMENT ERROR)
                                                  579:   ;    GOTO BUILD_PANIC
                                                  580:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  581:   ;    CALL BUILD_BYTE
                                                  582:   ;    CALL RAM_WRITE_AUTO	;SAVE SYNC BYTE
                                                  583:   ;    CALL BUILD_BYTE
                                                  584:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK TYPE BYTE
                                                  585:   ;    CALL BUILD_BYTE
                                                  586:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK LENGTH
                                                  587:   ;    MOVF DREG, W
                                                  588:   ;    MOVWF GEN_COUNT2
                                                  589:   ;FIRST_BLOCK_LOOP
                                                  590:   ;    CALL BUILD_BYTE
                                                  591:   ;    CALL RAM_WRITE_AUTO
                                                  592:   ;    DECFSZ GEN_COUNT2, F
                                                  593:   ;    GOTO FIRST_BLOCK_LOOP
                                                  594:   ;    CALL BUILD_BYTE
                                                  595:   ;    CALL RAM_WRITE_AUTO	;SAVE CHECKSUM
                                                  596:   ;    CALL BUILD_BYTE
                                                  597:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  598:   ;    CALL GET_LEADER ;GETS THE SECOND LEADER
                                                  599:   ;SAVE_BLOCKS
                                                  600:   ;    CALL BUILD_BYTE
                                                  601:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  602:   ;    CALL BUILD_BYTE
                                                  603:   ;    CALL RAM_WRITE_AUTO	;SAVE SYNC BYTE
                                                  604:   ;    CALL BUILD_BYTE
                                                  605:   ;    INCFSZ DREG, W  ;CHECK IF BLOCK IS END OF FILE
                                                  606:   ;    GOTO NOT_EOF_BLOCK
                                                  607:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK TYPE
                                                  608:   ;    CALL BUILD_BYTE
                                                  609:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK LENGTH
                                                  610:   ;    CALL BUILD_BYTE
                                                  611:   ;    CALL RAM_WRITE_AUTO	;SAVE CHECKSUM
                                                  612:   ;    CALL BUILD_BYTE
                                                  613:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  614:   ;    RETURN
                                                  615:   ;NOT_EOF_BLOCK
                                                  616:   ;    CALL RAM_WRITE_AUTO	;SAVE BLOCK TYPE
                                                  617:   ;    CALL BUILD_BYTE
                                                  618:   ;    CALL RAM_WRITE_AUTO	;SAVE LENGTH BYTE
                                                  619:   ;    MOVF DREG, W
                                                  620:   ;    MOVWF GEN_COUNT2 ;COPY LENGTH TO GEN_COUNT2
                                                  621:   ;BLOCK_DATA_LOOP
                                                  622:   ;    CALL BUILD_BYTE
                                                  623:   ;    CALL RAM_WRITE_AUTO
                                                  624:   ;    DECFSZ GEN_COUNT2, F
                                                  625:   ;    GOTO BLOCK_DATA_LOOP
                                                  626:   ;    CALL BUILD_BYTE
                                                  627:   ;    CALL RAM_WRITE_AUTO	;SAVE CHECKSUM
                                                  628:   ;    CALL BUILD_BYTE
                                                  629:   ;    CALL RAM_WRITE_AUTO	;SAVE LEADER BYTE
                                                  630:   ;    GOTO SAVE_BLOCKS
                                                  631:   
                                                  632:   ;BUILD_ALIGN ;SKIPS INITIAL WAIT IN AN ATTEMPT TO FIX ALIGNMENT. BUILD_BYTE IS THE NORMAL ENTRY POINT
                                                  633:   ;    MOVLW H'08'
                                                  634:   ;    MOVWF GEN_COUNT ;INITIALIZE COUNTER TO 8
                                                  635:   ;    MOVF PORTB, W
                                                  636:   ;    XORLW H'02' ;INVERT TAPE BIT
                                                  637:   ;    MOVWF TEMP1	    ;COPY PORTB TO TEMP1
                                                  638:   ;    GOTO WAIT_STOP
                                                  639:   ;BUILD_BYTE
                                                  640:   ;    MOVLW H'08'
                                                  641:   ;    MOVWF GEN_COUNT ;INITIALIZE COUNTER TO 8
                                                  642:   ;BUILD_LOOP
                                                  643:   ;    MOVF PORTB, W
                                                  644:   ;    MOVWF TEMP1	    ;COPY PORTB TO TEMP1
                                                  645:   ;    CLRF PULSE_LENGTH
                                                  646:   ;    RRF DREG, F
                                                  647:   ;    BCF DREG, 7
                                                  648:   ;WAIT_START
                                                  649:   ;    MOVF PORTB, W
                                                  650:   ;    XORWF TEMP1, W  ;COMPARE PORTB WITH PREVIOUS STATE
                                                  651:   ;    MOVWF TEMP2	    ;STORE RESULT IN TEMP2
                                                  652:   ;    BTFSS TEMP2, 1
                                                  653:   ;    GOTO WAIT_START ;IF STATE HAS NOT CHANGED KEEP WAITING
                                                  654:   ;WAIT_STOP
                                                  655:   ;    CALL TAPE_DELAY
                                                  656:   ;    INCF PULSE_LENGTH, F	;#1
                                                  657:   ;    MOVF PULSE_LENGTH, W    ;#2
                                                  658:   ;    SUBLW D'22'	    ;#3
                                                  659:   ;    BTFSC STATUS, C ;CHECK IF LENGTH IS GREATER THAN 22 #4
                                                  660:   ;    GOTO BUILD_NO_ERROR	;IF NOT CONTINUE NORMALLY #6
                                                  661:   ;BUILD_ERROR
                                                  662:   ;    BTFSS FLAG_REG, 1 ;IF ERROR IS IN FIRST BYTE TRY TO RECOVER
                                                  663:   ;    GOTO BUILD_PANIC   ;IF NOT RESET TO AVOID INFINITE LOOP
                                                  664:   ;    ;MOVF GEN_COUNT, W
                                                  665:   ;    ;SUBLW H'08'
                                                  666:   ;    ;BTFSS STATUS, Z ;CHECK IF ERROR IS IN FIRST BIT
                                                  667:   ;    ;GOTO BUILD_PANIC   ; IF NOT RESET TO AVOID INFINITE LOOP
                                                  668:   ;    GOTO BUILD_BYTE ;IF IT IS IN FIRST BIT OF FIRST BYTE RESTART SUBROUTINE
                                                  669:   ;BUILD_NO_ERROR
                                                  670:   ;    MOVF PORTB, W   ;#7
                                                  671:   ;    XORWF TEMP1, W  ;#8
                                                  672:   ;    MOVWF TEMP2	    ;#9
                                                  673:   ;    BTFSC TEMP2, 1  ;#10
                                                  674:   ;    GOTO WAIT_STOP  ;WAIT UNTIL TAPE INPUT RETURNS TO ORIGINAL STATE #12
                                                  675:   ;    MOVF PULSE_LENGTH, W
                                                  676:   ;    SUBLW D'08'
                                                  677:   ;    BTFSC STATUS, C ;CHECK IF LENGTH IS LESS THAN 8
                                                  678:   ;    GOTO BUILD_ERROR	;IF IT IS GO TO LOCAL ERROR HANDLER
                                                  679:   ;    MOVLW D'15'
                                                  680:   ;    SUBWF PULSE_LENGTH, F   ;SUBTRACT THRESHOLD FROM PULSE LENGTH
                                                  681:   ;    BTFSC PULSE_LENGTH, 7   ;CHECK IF PULSE LENGHT IS NEGATIVE
                                                  682:   ;    BSF DREG, 7		    ;IF IT IS SET BIT IN DREG
                                                  683:   ;    DECFSZ GEN_COUNT, F
                                                  684:   ;    GOTO BUILD_LOOP
                                                  685:   ;    RETLW H'00'	;RETURN ZERO TO INDICATE SUCCESS
                                                  686:   
                                                  687:   ;BUILD_PANIC ;ENABLES THE WATCHDOG TO CAUSE A RESET
                                                  688:   ;    BANKSEL WDTCON
                                                  689:   ;    BSF WDTCON, SWDTEN  ;ENABLE WATCHDOG
                                                  690:   ;BP_HALT
                                                  691:   ;    GOTO BP_HALT    ;WAIT FOR THE WATCHDOG TO DO THE THING
                                                  692:   
                                                  693:   ;TAPE_DELAY
                                                  694:   ;    NOP
                                                  695:   ;    NOP
                                                  696:   ;    NOP
                                                  697:   ;    NOP
                                                  698:   ;    NOP	;5 CYCLE DELAY
                                                  699:   ;    RETURN
                                                  700:   
                                                  701:   ;TAPE_OUT
                                                  702:   ;    CLRF TEMP1
                                                  703:   ;    CLRF BIT_COUNT
                                                  704:   ;    MOVLW H'FF'
                                                  705:   ;    MOVWF RAM_ADDRESS_H
                                                  706:   ;    MOVWF RAM_ADDRESS_L	;RAM READ FUNCTION WILL AUTO INCREMENT ADDRESS, SO IT SHOULD OVERFLOW WHEN IT IS FIRST CALLED
                                                  707:   ;    MOVLW H'55'
                                                  708:   ;    MOVWF DREG	;TAPE LEADER VALUE
                                                  709:   ;    MOVLW D'127'
                                                  710:   ;    MOVWF GEN_COUNT ;128 LEADER BYTES
                                                  711:   ;    CLRF TMR0
                                                  712:   ;    NOP
                                                  713:   ;    BCF INTCON, T0IF
                                                  714:   ;    BSF INTCON, GIE	;ENABLE INTERRUPT
                                                  715:   ;LEADER_OUT
                                                  716:   ;    BTFSS BIT_COUNT, 2
                                                  717:   ;    GOTO LEADER_OUT	;WAIT UNTIL BIT COUNT IS NOT ZERO
                                                  718:   ;LEADER_WAIT
                                                  719:   ;    BTFSC BIT_COUNT, 2
                                                  720:   ;    GOTO LEADER_WAIT	;WAIT UNTIL BIT_COUNT IS ZERO
                                                  721:   ;    DECFSZ GEN_COUNT, F
                                                  722:   ;    GOTO LEADER_OUT	;LOOP UNTIL 128 LEADER BYTES HAVE BEEN SENT
                                                  723:   ;    MOVLW D'22'
                                                  724:   ;    MOVWF GEN_COUNT	;ONE PAST THE END OF THE NAME FILE
                                                  725:   ;TAPE_NAMEBLOCK
                                                  726:   ;    CALL RAM_READ_AUTO	;GET FIRST BYTE
                                                  727:   ;TAPE_W1
                                                  728:   ;    BTFSS BIT_COUNT, 2
                                                  729:   ;    GOTO TAPE_W1    ;WAIT UNTIL BIT COUNT IS NOT ZERO
                                                  730:   ;TAPE_W2
                                                  731:   ;    BTFSC BIT_COUNT, 2
                                                  732:   ;    GOTO TAPE_W2
                                                  733:   ;    DECFSZ GEN_COUNT, F
                                                  734:   ;    GOTO TAPE_NAMEBLOCK
                                                  735:   ;    BCF INTCON, GIE ;STOP INTERRUPT
                                                  736:   ;    CALL TAPE_PAUSE ;1/2 SECOND SILENCE
                                                  737:   ;    MOVLW D'127'
                                                  738:   ;    MOVWF GEN_COUNT ;128 LEADER BYTES
                                                  739:   ;    CLRF TMR0
                                                  740:   ;    CLRF TEMP1
                                                  741:   ;    NOP
                                                  742:   ;    BCF INTCON, T0IF
                                                  743:   ;    BSF INTCON, GIE	;ENABLE INTERRUPT
                                                  744:   ;LEADER_OUT2
                                                  745:   ;    BTFSS BIT_COUNT, 2
                                                  746:   ;    GOTO LEADER_OUT2	;WAIT UNTIL BIT COUNT IS NOT ZERO
                                                  747:   ;LEADER_WAIT2
                                                  748:   ;    BTFSC BIT_COUNT, 2
                                                  749:   ;    GOTO LEADER_WAIT2	;WAIT UNTIL BIT_COUNT IS ZERO
                                                  750:   ;    DECFSZ GEN_COUNT, F
                                                  751:   ;    GOTO LEADER_OUT2	;LOOP UNTIL 128 LEADER BYTES HAVE BEEN SENT
                                                  752:   ;TAPE_NE
                                                  753:   ;    CALL RAM_READ_AUTO
                                                  754:   ;TAPE_W3
                                                  755:   ;    BTFSS BIT_COUNT, 2
                                                  756:   ;    GOTO TAPE_W3    ;WAIT UNTIL BIT_COUNT IS NOT ZERO
                                                  757:   ;TAPE_W4
                                                  758:   ;    BTFSC BIT_COUNT, 2
                                                  759:   ;    GOTO TAPE_W4
                                                  760:   ;    MOVF TAPE_SIZE_HIGH, W
                                                  761:   ;    XORWF RAM_ADDRESS_H, W
                                                  762:   ;    MOVWF TEMP3	;STORE RESULT IN TEMP3
                                                  763:   ;    INCF TEMP3, F   ;INCREMENT RESULT
                                                  764:   ;    DECFSZ TEMP3, F
                                                  765:   ;    GOTO TAPE_NE
                                                  766:   ;    MOVF TAPE_SIZE_LOW, W
                                                  767:   ;    XORWF RAM_ADDRESS_L, W
                                                  768:   ;    MOVWF TEMP3	;STORE RESULT IN TEMP3
                                                  769:   ;    INCF TEMP3, F
                                                  770:   ;    DECFSZ TEMP3, F
                                                  771:   ;    GOTO TAPE_NE
                                                  772:   ;    BCF INTCON, GIE
                                                  773:   ;    RETURN
                                                  774:   
                                                  775:   ;TAPE_INT
                                                  776:   ;    MOVWF TEMP4	;SAVE W REG
                                                  777:   ;    BCF INTCON, T0IF
                                                  778:   ;    MOVLW D'59'	;USED TO BE 58, CHANGED IT BECAUSE I ADDED THE SAVE W INSTRUCTION
                                                  779:   ;    MOVWF TMR0	;PRELOAD TIMER
                                                  780:   ;    BTFSC TEMP1, 0  ;IDENTIFY PHASE
                                                  781:   ;    GOTO PHASE1
                                                  782:   ;    BTFSC TEMP1, 1
                                                  783:   ;    GOTO PHASE2
                                                  784:   ;    BTFSC TEMP1, 2
                                                  785:   ;    GOTO PHASE3
                                                  786:   ;    BTFSC TEMP1, 3
                                                  787:   ;    GOTO PHASE4
                                                  788:   ;    MOVLW B'00000100'	;DEFAULT PHASE - LOAD NEW DATA AND INITIALIZE VARIABLES
                                                  789:   ;    XORWF PORTB, F  ;TOGGLE TAPE OUT
                                                  790:   ;    MOVF DREG, W
                                                  791:   ;    MOVWF TEMP2	    ;COPY NEW DATA TO BUFFER
                                                  792:   ;    CLRF BIT_COUNT
                                                  793:   ;    MOVLW H'01'
                                                  794:   ;    MOVWF TEMP1	;SET PHASE TO 1
                                                  795:   ;    MOVF TEMP4, W   ;RESTORE W
                                                  796:   ;    RETFIE
                                                  797:   ;PHASE1	;TOGGLE IF BIT IS 1
                                                  798:   ;	MOVLW B'00000100'	;WILL USE THIS TO TOGGLE OUTPUT
                                                  799:   ;	BTFSC TEMP2, 0	;CHECK IF BIT IS 1 OR 0
                                                  800:   ;	XORWF PORTB, F	;IF BIT IS 1 TOGGLE OUTPUT
                                                  801:   ;	MOVLW H'02'
                                                  802:   ;	MOVWF TEMP1	;SET PHASE TO 2
                                                  803:   ;	MOVF TEMP4, W   ;RESTORE W
                                                  804:   ;	RETFIE
                                                  805:   ;PHASE2	;ALWAYS TOGGLE
                                                  806:   ;	MOVLW B'00000100'
                                                  807:   ;	XORWF PORTB, F	;TOGGLE OUTPUT
                                                  808:   ;	BTFSC TEMP2, 0	;CHECK IF BIT IS 1 OR 0
                                                  809:   ;	GOTO PHASE2_NEXT	;IF BIT IS SET THEN LOAD NEXT BIT AND RESET PHASE
                                                  810:   ;	MOVLW H'04'
                                                  811:   ;	MOVWF TEMP1	;SET PHASE TO 3
                                                  812:   ;	MOVF TEMP4, W	;RESTORE W
                                                  813:   ;	RETFIE
                                                  814:   ;PHASE3	;NEVER TOGGLE
                                                  815:   ;	MOVLW H'08'
                                                  816:   ;	MOVWF TEMP1	;SET PHASE TO 4
                                                  817:   ;	MOVF TEMP4, W
                                                  818:   ;	RETFIE
                                                  819:   ;PHASE4	;ALWAYS TOGGLE
                                                  820:   ;	MOVLW B'00000100'
                                                  821:   ;	XORWF PORTB, F	;TOGGLE OUTPUT
                                                  822:   ;PHASE2_NEXT
                                                  823:   ;    MOVLW H'01'
                                                  824:   ;    MOVWF TEMP1	;SET PHASE TO 1
                                                  825:   ;    RRF TEMP2, F	;SHIFT TO NEXT BIT
                                                  826:   ;    INCF BIT_COUNT, F	;NEXT BIT COUNT
                                                  827:   ;    BTFSS BIT_COUNT, 3	;CHECK IF BIT COUNT HAS REACHED 8
                                                  828:   ;    GOTO PHASE_DONE	;IF NOT, RETURN
                                                  829:   ;    CLRF BIT_COUNT	;CLEAR BIT COUNT
                                                  830:   ;    MOVF DREG, W
                                                  831:   ;    MOVWF TEMP2	;COPY NEW DATA TO BUFFER
                                                  832:   ;PHASE_DONE
                                                  833:   ;    MOVF TEMP4, W
                                                  834:   ;    RETFIE
                                                  835:   
                                                  836:   ;TAPE_PAUSE
                                                  837:   ;    MOVLW D'32'
                                                  838:   ;    MOVWF GEN_COUNT
                                                  839:   ;TP1
                                                  840:   ;    MOVLW D'54'
                                                  841:   ;    MOVWF GEN_COUNT2
                                                  842:   ;TP2
                                                  843:   ;    MOVLW D'95'
                                                  844:   ;    MOVWF LDEL_COUNT
                                                  845:   ;TP3
                                                  846:   ;    DECFSZ LDEL_COUNT, F
                                                  847:   ;    GOTO TP3
                                                  848:   ;    DECFSZ GEN_COUNT2, F
                                                  849:   ;    GOTO TP2
                                                  850:   ;    DECFSZ GEN_COUNT, F
                                                  851:   ;    GOTO TP1
                                                  852:   ;    RETURN
                                                  853:       
                                                  854:   SPI_TRANSFER
05DA  0093     MOVWF SSPBUF                       855:       MOVWF SSPBUF    ;SEND DATA
05DB  1303     BCF STATUS, 0x6                    856:       BANKSEL SSPSTAT
                                                  857:   SPI_WAIT
05DD  1C14     BTFSS SSPCON, 0x0                  858:       BTFSS BF	;IS THE TRANSMISSION READY
05DE  2DDD     GOTO 0x5DD                         859:       GOTO SPI_WAIT	;IF NOT WAIT UNTIL IT IS
05DF  1303     BCF STATUS, 0x6                    860:       BANKSEL SSPBUF
05E1  0813     MOVF SSPBUF, W                     861:       MOVF SSPBUF, W  ;COPY DATA TO W
05E2  0008     RETURN                             862:       RETURN
                                                  863:   
                                                  864:   BUILD_WORD  ;GENERATES PSEUDO-RANDOM TEST DATA
05E3  3010     MOVLW 0x10                         865:       MOVLW 16
05E4  00BA     MOVWF 0x3A                         866:       MOVWF _gen_count4
                                                  867:   BUILD_WORD_LOOP
                                                  868:       ;GET WORD HERE
05E5  01C4     CLRF 0x44                          869:       CLRF _temp3  ;THIS WILL CONTAIN BIT 7 OF S_REG_LOW
05E6  1BA7     BTFSC 0x27, 0x7                    870:       BTFSC _s_reg_low, 7
05E7  1444     BSF 0x44, 0x0                      871:       BSF _temp3, 0
05E8  0827     MOVF 0x27, W                       872:       MOVF _s_reg_low, W
05E9  3901     ANDLW 0x1                          873:       ANDLW 0x01	    ;GET BIT 0
05EA  3A01     XORLW 0x1                          874:       XORLW 0x01	    ;FLIP BIT 0
05EB  06C4     XORWF 0x44, F                      875:       XORWF _temp3, F   ;TEMP3 NOW CONTAINS BIT0 ^ BIT7 ^ 1
05EC  0CC4     RRF 0x44, F                        876:       RRF _temp3, F
05ED  0CA8     RRF 0x28, F                        877:       RRF _s_reg_high, F
05EE  0CA7     RRF 0x27, F                        878:       RRF _s_reg_low, F
05EF  0BBA     DECFSZ 0x3A, F                     879:       DECFSZ _gen_count4, F
05F0  2DE5     GOTO 0x5E5                         880:       GOTO BUILD_WORD_LOOP
05F1  0008     RETURN                             881:       RETURN
                                                  882:   
                                                  883:   GET_TEST_BYTE   ;SPLITS PSEUDO-RANDOM TEST DATA INTO SINGLE BYTES
05F2  1C23     BTFSS 0x23, 0x0                    884:       BTFSS F_SRL_VALID
05F3  2DF7     GOTO 0x5F7                         885:       GOTO GTB_UPDATE
05F4  0827     MOVF 0x27, W                       886:       MOVF _s_reg_low, W
05F5  1023     BCF 0x23, 0x0                      887:       BCF F_SRL_VALID
05F6  0008     RETURN                             888:       RETURN
                                                  889:   GTB_UPDATE
05F7  25E3     CALL 0x5E3                         890:       CALL BUILD_WORD
05F8  1423     BSF 0x23, 0x0                      891:       BSF F_SRL_VALID
05F9  0828     MOVF 0x28, W                       892:       MOVF _s_reg_high, W
05FA  0008     RETURN                             893:       RETURN
                                                  894:   
                                                  895:   global _delay_millis
                                                  896:   _delay_millis    ;DESIGNED FOR 4MHZ CLOCK
05FB  00A4     MOVWF 0x24                         897:       MOVWF _delay_counter
                                                  898:   DM_MILLIS
05FC  3014     MOVLW 0x14                         899:       MOVLW 20
05FD  00BE     MOVWF 0x3E                         900:       MOVWF _ldel_count
                                                  901:   DM_OUTER
05FE  3010     MOVLW 0x10                         902:       MOVLW 16
05FF  00BF     MOVWF 0x3F                         903:       MOVWF _sdel_count
                                                  904:   DM_INNER
0600  0BBF     DECFSZ 0x3F, F                     905:       DECFSZ _sdel_count,F
0601  2E00     GOTO 0x600                         906:       GOTO DM_INNER
0602  0BBE     DECFSZ 0x3E, F                     907:       DECFSZ _ldel_count,F
0603  2DFE     GOTO 0x5FE                         908:       GOTO DM_OUTER
0604  0BA4     DECFSZ 0x24, F                     909:       DECFSZ _delay_counter,F
0605  2DFC     GOTO 0x5FC                         910:       GOTO DM_MILLIS
0606  0008     RETURN                             911:       RETURN
                                                  912:   
                                                  913:   global _print_test_data
                                                  914:   _print_test_data
0607  01BD     CLRF 0x3D                          915:       CLRF _gen_count
                                                  916:   PTD_OUTER
0608  01BC     CLRF 0x3C                          917:       CLRF _gen_count2
                                                  918:   PTD_INNER
0609  083C     MOVF 0x3C, W                       919:       MOVF _gen_count2, W
060A  390F     ANDLW 0xF                          920:       ANDLW 0x0F
060B  1D03     BTFSS STATUS, 0x2                  921:       BTFSS ZERO  ;EVERY 16 WORDS PRINT A NEWLINE
060C  2E0F     GOTO 0x60F                         922:       GOTO PTD_NO_NEWLINE
060D  300A     MOVLW 0xA                          923:       MOVLW 0x0A ;NEWLINE CHAR
060E  2501     CALL 0x501                         924:       CALL _uart_send
                                                  925:   PTD_NO_NEWLINE
060F  25F2     CALL 0x5F2                         926:       CALL GET_TEST_BYTE  ;GET MSB
0610  2183     CALL 0x183                         927:       CALL _byte_to_hex
0611  0876     MOVF 0x76, W                       928:       MOVF _hex_char_high, W
0612  2501     CALL 0x501                         929:       CALL _uart_send  ;HIGH NIBBLE HIGH BYTE
0613  0875     MOVF 0x75, W                       930:       MOVF _hex_char_low ,W
0614  2501     CALL 0x501                         931:       CALL _uart_send  ;LOW NIBBLE HIGH BYTE
0615  25F2     CALL 0x5F2                         932:       CALL GET_TEST_BYTE  ;GET LSB
0616  2183     CALL 0x183                         933:       CALL _byte_to_hex
0617  0876     MOVF 0x76, W                       934:       MOVF _hex_char_high, W
0618  2501     CALL 0x501                         935:       CALL _uart_send  ;HIGH NIBBLE LOW BYTE
0619  0875     MOVF 0x75, W                       936:       MOVF _hex_char_low, W
061A  2501     CALL 0x501                         937:       CALL _uart_send  ;LOW NIBBLE LOW BYTE
061B  0BBC     DECFSZ 0x3C, F                     938:       DECFSZ _gen_count2, F
061C  2E09     GOTO 0x609                         939:       GOTO PTD_INNER
061D  0BBD     DECFSZ 0x3D, F                     940:       DECFSZ _gen_count, F
061E  2E08     GOTO 0x608                         941:       GOTO PTD_OUTER
061F  0008     RETURN                             942:       RETURN
                                                  943:   
                                                  944:   ;CHECK_FREE_SPACE
                                                  945:   ;    BCF FLAG_REG, 3
                                                  946:   ;    BCF FLAG_REG, 4
                                                  947:   ;    MOVF USB_FREE_SPACE3, F
                                                  948:   ;    BTFSS STATUS, Z
                                                  949:   ;    GOTO CFS2
                                                  950:   ;    BSF FLAG_REG, 3
                                                  951:   ;    BSF FLAG_REG, 4
                                                  952:   ;    RETURN
                                                  953:   ;CFS2
                                                  954:   ;    MOVF USB_FREE_SPACE2, W
                                                  955:   ;    SUBLW H'02'
                                                  956:   ;    BTFSS STATUS, C
                                                  957:   ;    GOTO CFS3
                                                  958:   ;    BSF FLAG_REG, 3
                                                  959:   ;    BSF FLAG_REG, 4
                                                  960:   ;    RETURN
                                                  961:   ;CFS3
                                                  962:   ;    MOVF USB_FREE_SPACE1, W
                                                  963:   ;    XORWF TAPE_SIZE_HIGH, W
                                                  964:   ;    BTFSC STATUS, Z
                                                  965:   ;    GOTO CFS4
                                                  966:   ;    MOVF TAPE_SIZE_HIGH, W
                                                  967:   ;    SUBWF USB_FREE_SPACE1, W
                                                  968:   ;    BTFSC STATUS, C
                                                  969:   ;    BSF FLAG_REG, 3
                                                  970:   ;    RETURN
                                                  971:   ;CFS4
                                                  972:   ;    MOVF TAPE_SIZE_LOW, F
                                                  973:   ;    BTFSC STATUS, Z
                                                  974:   ;    BSF FLAG_REG, 3
                                                  975:   ;    RETURN
                                                  976:   
                                                  977:   global _usb_reset_all
                                                  978:   _usb_reset_all
0620  1108     BCF PORTD, 0x2                     979:       BCF USB_CS ;CH376 CE LINE LOW
0621  3005     MOVLW 0x5                          980:       MOVLW 0x05 ;RESET ALL COMMAND
0622  25DA     CALL 0x5DA                         981:       CALL SPI_TRANSFER
0623  1508     BSF PORTD, 0x2                     982:       BSF USB_CS ;CH376S CE LINE HIGH
0624  0008     RETURN                             983:       RETURN
                                                  984:   
                                                  985:   global _usb_set_file_name
                                                  986:   _usb_set_file_name
0625  1383     BCF STATUS, 0x7                    987:       BCF STATUS, IRP
0626  3050     MOVLW 0x50                         988:       MOVLW _tape_name ;NAME ADDRESS
0627  0084     MOVWF FSR                          989:       MOVWF FSR
0628  3008     MOVLW 0x8                          990:       MOVLW 0x08 ;NAME LENGTH
0629  00BA     MOVWF 0x3A                         991:       MOVWF _gen_count4
062A  1108     BCF PORTD, 0x2                     992:       BCF USB_CS
062B  302F     MOVLW 0x2F                         993:       MOVLW 0x2F ;SET FILE NAME COMMAND
062C  25DA     CALL 0x5DA                         994:       CALL SPI_TRANSFER
062D  302F     MOVLW 0x2F                         995:       MOVLW 0x2F ;'\' CHAR NEEDED AT START OF NAME
062E  25DA     CALL 0x5DA                         996:       CALL SPI_TRANSFER
                                                  997:   USFN_LOOP
062F  0800     MOVF INDF, W                       998:       MOVF INDF, W
0630  25DA     CALL 0x5DA                         999:       CALL SPI_TRANSFER
0631  0A84     INCF FSR, F                        1000:      INCF FSR, F
0632  0BBA     DECFSZ 0x3A, F                     1001:      DECFSZ _gen_count4, F
0633  2E2F     GOTO 0x62F                         1002:      GOTO USFN_LOOP
0634  0100     CLRW                               1003:      CLRW   ;NULL CHAR AT END OF NAME
0635  25DA     CALL 0x5DA                         1004:      CALL SPI_TRANSFER
0636  1508     BSF PORTD, 0x2                     1005:      BSF USB_CS ;CE LINE HIGH
0637  0008     RETURN                             1006:      RETURN
                                                  1007:  
                                                  1008:  global _usb_file_open
                                                  1009:  _usb_file_open
0638  1108     BCF PORTD, 0x2                     1010:      BCF USB_CS
0639  3032     MOVLW 0x32                         1011:      MOVLW 0x32 ;FILE OPEN COMMAND
063A  25DA     CALL 0x5DA                         1012:      CALL SPI_TRANSFER
063B  1508     BSF PORTD, 0x2                     1013:      BSF USB_CS
063C  0008     RETURN                             1014:      RETURN
                                                  1015:  
                                                  1016:  global _usb_file_close
                                                  1017:  _usb_file_close
063D  1108     BCF PORTD, 0x2                     1018:      BCF USB_CS
063E  3036     MOVLW 0x36                         1019:      MOVLW 0x36 ;FILE CLOSE COMMAND
063F  25DA     CALL 0x5DA                         1020:      CALL SPI_TRANSFER
0640  3001     MOVLW 0x1                          1021:      MOVLW 0x01 ;UPDATE FILE LENGTH
0641  25DA     CALL 0x5DA                         1022:      CALL SPI_TRANSFER
0642  1508     BSF PORTD, 0x2                     1023:      BSF USB_CS
0643  0008     RETURN                             1024:      RETURN
                                                  1025:  
                                                  1026:  USB_BYTE_READ
0644  1108     BCF PORTD, 0x2                     1027:      BCF USB_CS
0645  303A     MOVLW 0x3A                         1028:      MOVLW 0x3A ;BYTE READ COMMAND
0646  25DA     CALL 0x5DA                         1029:      CALL SPI_TRANSFER
0647  0832     MOVF 0x32, W                       1030:      MOVF _usb_file_size_low, W
0648  25DA     CALL 0x5DA                         1031:      CALL SPI_TRANSFER
0649  0833     MOVF 0x33, W                       1032:      MOVF _usb_file_size_high, W
064A  25DA     CALL 0x5DA                         1033:      CALL SPI_TRANSFER
064B  1508     BSF PORTD, 0x2                     1034:      BSF USB_CS
064C  0008     RETURN                             1035:      RETURN
                                                  1036:  
                                                  1037:  USB_BYTE_READ_GO
064D  1108     BCF PORTD, 0x2                     1038:      BCF USB_CS
064E  303B     MOVLW 0x3B                         1039:      MOVLW 0x3B ;BYTE READ GO COMMAND
064F  25DA     CALL 0x5DA                         1040:      CALL SPI_TRANSFER
0650  1508     BSF PORTD, 0x2                     1041:      BSF USB_CS
0651  0008     RETURN                             1042:      RETURN
                                                  1043:  
                                                  1044:  USB_READ_DATA0
0652  1108     BCF PORTD, 0x2                     1045:      BCF USB_CS
0653  3027     MOVLW 0x27                         1046:      MOVLW 0x27 ;READ DATA0 COMMAND
0654  25DA     CALL 0x5DA                         1047:      CALL SPI_TRANSFER
0655  0100     CLRW                               1048:      CLRW
0656  25DA     CALL 0x5DA                         1049:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO READ
0657  07B0     ADDWF 0x30, F                      1050:      ADDWF _usb_bytes_read_low, F
0658  1803     BTFSC STATUS, 0x0                  1051:      BTFSC CARRY
0659  0AB1     INCF 0x31, F                       1052:      INCF _usb_bytes_read_high, F
065A  00BA     MOVWF 0x3A                         1053:      MOVWF _gen_count4
                                                  1054:  URD_LOOP
065B  0100     CLRW                               1055:      CLRW
065C  25DA     CALL 0x5DA                         1056:      CALL SPI_TRANSFER
                                                  1057:      ;CALL RAM_WRITE_AUTO	;this is a problem, two active spi devices
065D  221C     CALL 0x21C                         1058:      CALL _fifo_push
065E  0BBA     DECFSZ 0x3A, F                     1059:      DECFSZ _gen_count4, F
065F  2E5B     GOTO 0x65B                         1060:      GOTO URD_LOOP
0660  1508     BSF PORTD, 0x2                     1061:      BSF USB_CS
0661  27B2     CALL 0x7B2                         1062:      CALL _fifo_tf_to_mem
0662  0008     RETURN                             1063:      RETURN
                                                  1064:  
                                                  1065:  global _usb_get_file_size
                                                  1066:  _usb_get_file_size
0663  1108     BCF PORTD, 0x2                     1067:      BCF USB_CS
0664  300C     MOVLW 0xC                          1068:      MOVLW 0x0C ;GET FILE SIZE COMMAND
0665  25DA     CALL 0x5DA                         1069:      CALL SPI_TRANSFER
0666  3068     MOVLW 0x68                         1070:      MOVLW 0x68 ;COMMAND DATA
0667  25DA     CALL 0x5DA                         1071:      CALL SPI_TRANSFER
0668  0100     CLRW                               1072:      CLRW
0669  25DA     CALL 0x5DA                         1073:      CALL SPI_TRANSFER
066A  00B2     MOVWF 0x32                         1074:      MOVWF _usb_file_size_low
066B  0100     CLRW                               1075:      CLRW
066C  25DA     CALL 0x5DA                         1076:      CALL SPI_TRANSFER
066D  00B3     MOVWF 0x33                         1077:      MOVWF _usb_file_size_high
066E  0100     CLRW                               1078:      CLRW
066F  25DA     CALL 0x5DA                         1079:      CALL SPI_TRANSFER
0670  0100     CLRW                               1080:      CLRW
0671  25DA     CALL 0x5DA                         1081:      CALL SPI_TRANSFER   ;DISCARD UPPER BYTES OF FILE SIZE
0672  1508     BSF PORTD, 0x2                     1082:      BSF USB_CS
0673  0008     RETURN                             1083:      RETURN
                                                  1084:  
                                                  1085:  global _usb_check_exists
                                                  1086:  _usb_check_exists
0674  1108     BCF PORTD, 0x2                     1087:      BCF USB_CS
0675  00C3     MOVWF 0x43                         1088:      MOVWF _temp4
0676  3006     MOVLW 0x6                          1089:      MOVLW 0x06
0677  25DA     CALL 0x5DA                         1090:      CALL SPI_TRANSFER   ;SEND CHECK_EXISTS COMMAND
0678  0843     MOVF 0x43, W                       1091:      MOVF _temp4, W
0679  25DA     CALL 0x5DA                         1092:      CALL SPI_TRANSFER   ;SEND TEST DATA
067A  0100     CLRW                               1093:      CLRW
067B  25DA     CALL 0x5DA                         1094:      CALL SPI_TRANSFER   ;GET RESULT
067C  1508     BSF PORTD, 0x2                     1095:      BSF USB_CS
067D  0008     RETURN                             1096:      RETURN
                                                  1097:  
                                                  1098:  global _usb_file_create
                                                  1099:  _usb_file_create
067E  1108     BCF PORTD, 0x2                     1100:      BCF USB_CS
067F  3034     MOVLW 0x34                         1101:      MOVLW 0x34
0680  25DA     CALL 0x5DA                         1102:      CALL SPI_TRANSFER
0681  1508     BSF PORTD, 0x2                     1103:      BSF USB_CS
0682  0008     RETURN                             1104:      RETURN
                                                  1105:  
                                                  1106:  USB_BYTE_WRITE
0683  1108     BCF PORTD, 0x2                     1107:      BCF USB_CS
0684  303C     MOVLW 0x3C                         1108:      MOVLW 0x3C
0685  25DA     CALL 0x5DA                         1109:      CALL SPI_TRANSFER
0686  0832     MOVF 0x32, W                       1110:      MOVF _usb_file_size_low, W
0687  25DA     CALL 0x5DA                         1111:      CALL SPI_TRANSFER
0688  0833     MOVF 0x33, W                       1112:      MOVF _usb_file_size_high, W
0689  25DA     CALL 0x5DA                         1113:      CALL SPI_TRANSFER
068A  1508     BSF PORTD, 0x2                     1114:      BSF USB_CS
068B  0008     RETURN                             1115:      RETURN
                                                  1116:  
                                                  1117:  USB_BYTE_WR_GO
068C  1108     BCF PORTD, 0x2                     1118:      BCF USB_CS
068D  303D     MOVLW 0x3D                         1119:      MOVLW 0x3D
068E  25DA     CALL 0x5DA                         1120:      CALL SPI_TRANSFER
068F  1508     BSF PORTD, 0x2                     1121:      BSF USB_CS
0690  0008     RETURN                             1122:      RETURN
                                                  1123:  
                                                  1124:  global _usb_get_status
                                                  1125:  _usb_get_status
0691  1108     BCF PORTD, 0x2                     1126:      BCF USB_CS
0692  3022     MOVLW 0x22                         1127:      MOVLW 0x22
0693  25DA     CALL 0x5DA                         1128:      CALL SPI_TRANSFER
0694  0100     CLRW                               1129:      CLRW
0695  25DA     CALL 0x5DA                         1130:      CALL SPI_TRANSFER
0696  1508     BSF PORTD, 0x2                     1131:      BSF USB_CS
0697  0008     RETURN                             1132:      RETURN
                                                  1133:  
                                                  1134:  global _usb_disk_mount
                                                  1135:  _usb_disk_mount
0698  1108     BCF PORTD, 0x2                     1136:      BCF USB_CS
0699  3031     MOVLW 0x31                         1137:      MOVLW 0x31
069A  25DA     CALL 0x5DA                         1138:      CALL SPI_TRANSFER
069B  1508     BSF PORTD, 0x2                     1139:      BSF USB_CS
069C  0008     RETURN                             1140:      RETURN
                                                  1141:  
                                                  1142:  global _usb_disk_connect
                                                  1143:  _usb_disk_connect
069D  1108     BCF PORTD, 0x2                     1144:      BCF USB_CS
069E  3030     MOVLW 0x30                         1145:      MOVLW 0x30
069F  25DA     CALL 0x5DA                         1146:      CALL SPI_TRANSFER
06A0  1508     BSF PORTD, 0x2                     1147:      BSF USB_CS
06A1  0008     RETURN                             1148:      RETURN
                                                  1149:      
                                                  1150:  global _usb_set_mode
                                                  1151:  _usb_set_mode
06A2  00C2     MOVWF 0x42                         1152:      MOVWF _temp5
06A3  1108     BCF PORTD, 0x2                     1153:      BCF USB_CS
06A4  3015     MOVLW 0x15                         1154:      MOVLW 0X15
06A5  25DA     CALL 0x5DA                         1155:      CALL SPI_TRANSFER
06A6  0842     MOVF 0x42, W                       1156:      MOVF _temp5, W
06A7  25DA     CALL 0x5DA                         1157:      CALL SPI_TRANSFER
06A8  1508     BSF PORTD, 0x2                     1158:      BSF USB_CS
06A9  0008     RETURN                             1159:      RETURN
                                                  1160:  
                                                  1161:  global _usb_get_version
                                                  1162:  _usb_get_version
06AA  1108     BCF PORTD, 0x2                     1163:      BCF USB_CS
06AB  3001     MOVLW 0x1                          1164:      MOVLW 0x01
06AC  25DA     CALL 0x5DA                         1165:      CALL SPI_TRANSFER
06AD  0100     CLRW                               1166:      CLRW
06AE  25DA     CALL 0x5DA                         1167:      CALL SPI_TRANSFER
06AF  1508     BSF PORTD, 0x2                     1168:      BSF USB_CS
06B0  0008     RETURN                             1169:      RETURN
                                                  1170:  
                                                  1171:  USB_WAIT_STATUS
06B1  1123     BCF 0x23, 0x2                      1172:      BCF F_TIMEOUT
06B2  0AA6     INCF 0x26, F                       1173:      INCF _timeout_high, F
06B3  0AA5     INCF 0x25, F                       1174:      INCF _timeout_low, F
                                                  1175:  UWS_LOOP
06B4  3001     MOVLW 0x1                          1176:      MOVLW 0x01
06B5  25FB     CALL 0x5FB                         1177:      CALL _delay_millis   ;DELAY 1 MILLISECOND
06B6  2691     CALL 0x691                         1178:      CALL _usb_get_status
06B7  00C2     MOVWF 0x42                         1179:      MOVWF _temp5
06B8  0629     XORWF 0x29, W                      1180:      XORWF _usb_target_status, W
06B9  1903     BTFSC STATUS, 0x2                  1181:      BTFSC ZERO
06BA  3400     RETLW 0x0                          1182:      RETLW 0x00
06BB  0BA5     DECFSZ 0x25, F                     1183:      DECFSZ _timeout_low, F
06BC  2EB4     GOTO 0x6B4                         1184:      GOTO UWS_LOOP
06BD  0BA6     DECFSZ 0x26, F                     1185:      DECFSZ _timeout_high, F
06BE  2EB4     GOTO 0x6B4                         1186:      GOTO UWS_LOOP
06BF  1523     BSF 0x23, 0x2                      1187:      BSF F_TIMEOUT    ;SET FLAG TO INDICATE A TIMEOUT
06C0  0842     MOVF 0x42, W                       1188:      MOVF _temp5, W
06C1  0008     RETURN                             1189:      RETURN
                                                  1190:  
                                                  1191:  global _usb_disk_capacity
                                                  1192:  _usb_disk_capacity
06C2  1108     BCF PORTD, 0x2                     1193:      BCF USB_CS
06C3  303E     MOVLW 0x3E                         1194:      MOVLW 0x3E
06C4  25DA     CALL 0x5DA                         1195:      CALL SPI_TRANSFER   ;SEND DISK CAPACITY COMMAND
06C5  1508     BSF PORTD, 0x2                     1196:      BSF USB_CS
06C6  3014     MOVLW 0x14                         1197:      MOVLW 0x14
06C7  00A9     MOVWF 0x29                         1198:      MOVWF _usb_target_status ;SET TARGET STATUS TO 14 (DEVICE READY)
06C8  01A6     CLRF 0x26                          1199:      CLRF _timeout_high
06C9  3064     MOVLW 0x64                         1200:      MOVLW 100
06CA  00A5     MOVWF 0x25                         1201:      MOVWF _timeout_low   ;SET TIMEOUT TO 16 MILLISECONDS
06CB  26B1     CALL 0x6B1                         1202:      CALL USB_WAIT_STATUS
06CC  1923     BTFSC 0x23, 0x2                    1203:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
06CD  0008     RETURN                             1204:      RETURN
06CE  1108     BCF PORTD, 0x2                     1205:      BCF USB_CS
06CF  3027     MOVLW 0x27                         1206:      MOVLW 0x27
06D0  25DA     CALL 0x5DA                         1207:      CALL SPI_TRANSFER   ;SEND READ DATA0 COMMAND
06D1  0100     CLRW                               1208:      CLRW
06D2  25DA     CALL 0x5DA                         1209:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO READ (ALWAYS 4)
06D3  0100     CLRW                               1210:      CLRW
06D4  25DA     CALL 0x5DA                         1211:      CALL SPI_TRANSFER   ;GET LSB OF DISK SIZE
                                                  1212:  ;THE DISK SIZE IS GIVEN IN SECTORS, SO TO GET THE NUMBER OF BYTES WE MULTIPLY BY 512 WHICH IS THE SAME AS SHIFTING BY 9
                                                  1213:  ;THIS MEANS THE LSB IS ALWAYS ZERO AND THERE IS NO NEED TO HAVE A REGISTER FOR IT.
                                                  1214:  ;INSTEAD WE PUT THE LSB IN USB_DRIVE_SIZE1 WHICH CORRESPONDS TO SHIFTING BY 8.
06D5  00F4     MOVWF 0x74                         1215:      MOVWF _usb_drive_size1
06D6  0100     CLRW                               1216:      CLRW
06D7  25DA     CALL 0x5DA                         1217:      CALL SPI_TRANSFER
06D8  00F3     MOVWF 0x73                         1218:      MOVWF _usb_drive_size2
06D9  0100     CLRW                               1219:      CLRW
06DA  25DA     CALL 0x5DA                         1220:      CALL SPI_TRANSFER
06DB  00F2     MOVWF 0x72                         1221:      MOVWF _usb_drive_size3
06DC  0100     CLRW                               1222:      CLRW
06DD  25DA     CALL 0x5DA                         1223:      CALL SPI_TRANSFER
06DE  1508     BSF PORTD, 0x2                     1224:      BSF USB_CS
06DF  1003     BCF STATUS, 0x0                    1225:      BCF CARRY   ;CLEAR CARRY FLAG
06E0  0DF4     RLF 0x74, F                        1226:      RLF _usb_drive_size1, F
06E1  0DF3     RLF 0x73, F                        1227:      RLF _usb_drive_size2, F
06E2  0DF2     RLF 0x72, F                        1228:      RLF _usb_drive_size3, F
06E3  0008     RETURN                             1229:      RETURN
                                                  1230:  
                                                  1231:  global _usb_disk_query
                                                  1232:  _usb_disk_query
06E4  1108     BCF PORTD, 0x2                     1233:      BCF USB_CS
06E5  303F     MOVLW 0x3F                         1234:      MOVLW 0x3F
06E6  25DA     CALL 0x5DA                         1235:      CALL SPI_TRANSFER   ;SEND DISK QUERY COMMAND
06E7  1508     BSF PORTD, 0x2                     1236:      BSF USB_CS
06E8  3014     MOVLW 0x14                         1237:      MOVLW 0x14
06E9  00A9     MOVWF 0x29                         1238:      MOVWF _usb_target_status ;SET TARGET STATUS TO 14 (DEVICE READY)
06EA  01A6     CLRF 0x26                          1239:      CLRF _timeout_high
06EB  3064     MOVLW 0x64                         1240:      MOVLW 100
06EC  00A5     MOVWF 0x25                         1241:      MOVWF _timeout_low   ;SET TIMEOUT TO 16 MILLISECONDS
06ED  26B1     CALL 0x6B1                         1242:      CALL USB_WAIT_STATUS
06EE  1923     BTFSC 0x23, 0x2                    1243:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
06EF  0008     RETURN                             1244:      RETURN
06F0  1108     BCF PORTD, 0x2                     1245:      BCF USB_CS
06F1  3027     MOVLW 0x27                         1246:      MOVLW 0x27
06F2  25DA     CALL 0x5DA                         1247:      CALL SPI_TRANSFER   ;SEND READ DATA0 COMMAND
06F3  0100     CLRW                               1248:      CLRW
06F4  25DA     CALL 0x5DA                         1249:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO READ (ALWAYS 8)
06F5  0100     CLRW                               1250:      CLRW
06F6  25DA     CALL 0x5DA                         1251:      CALL SPI_TRANSFER   ;GET LSB OF LOGICAL BYTES
06F7  00AC     MOVWF 0x2C                         1252:      MOVWF _usb_logical_bytes1
06F8  0100     CLRW                               1253:      CLRW
06F9  25DA     CALL 0x5DA                         1254:      CALL SPI_TRANSFER
06FA  00AB     MOVWF 0x2B                         1255:      MOVWF _usb_logical_bytes2
06FB  0100     CLRW                               1256:      CLRW
06FC  25DA     CALL 0x5DA                         1257:      CALL SPI_TRANSFER
06FD  00AA     MOVWF 0x2A                         1258:      MOVWF _usb_logical_bytes3
06FE  0100     CLRW                               1259:      CLRW
06FF  25DA     CALL 0x5DA                         1260:      CALL SPI_TRANSFER   ;DISCARD MSB OF LOGICAL BYTES
0700  0100     CLRW                               1261:      CLRW
0701  25DA     CALL 0x5DA                         1262:      CALL SPI_TRANSFER   ;GET LSB OF FREE SPACE
0702  00AF     MOVWF 0x2F                         1263:      MOVWF _usb_free_space1
0703  0100     CLRW                               1264:      CLRW
0704  25DA     CALL 0x5DA                         1265:      CALL SPI_TRANSFER
0705  00AE     MOVWF 0x2E                         1266:      MOVWF _usb_free_space2
0706  0100     CLRW                               1267:      CLRW
0707  25DA     CALL 0x5DA                         1268:      CALL SPI_TRANSFER
0708  00AD     MOVWF 0x2D                         1269:      MOVWF _usb_free_space3
0709  0100     CLRW                               1270:      CLRW
070A  25DA     CALL 0x5DA                         1271:      CALL SPI_TRANSFER   ;DISCARD MSB OF FREE SPACE
070B  1508     BSF PORTD, 0x2                     1272:      BSF USB_CS
070C  1003     BCF STATUS, 0x0                    1273:      BCF CARRY
070D  0DAC     RLF 0x2C, F                        1274:      RLF _usb_logical_bytes1, F
070E  0DAB     RLF 0x2B, F                        1275:      RLF _usb_logical_bytes2, F
070F  0DAA     RLF 0x2A, F                        1276:      RLF _usb_logical_bytes3, F
0710  1003     BCF STATUS, 0x0                    1277:      BCF CARRY
0711  0DAF     RLF 0x2F, F                        1278:      RLF _usb_free_space1, F
0712  0DAE     RLF 0x2E, F                        1279:      RLF _usb_free_space2, F
0713  0DAD     RLF 0x2D, F                        1280:      RLF _usb_free_space3, F
0714  0008     RETURN                             1281:      RETURN
                                                  1282:  
                                                  1283:  global _usb_write_test_data
                                                  1284:  _usb_write_test_data
0715  01A7     CLRF 0x27                          1285:      CLRF _s_reg_low
0716  01A8     CLRF 0x28                          1286:      CLRF _s_reg_high
0717  1023     BCF 0x23, 0x0                      1287:      BCF F_SRL_VALID ;INITIALIZE PSUEDO-RANDOM DATA GENERATOR
0718  267E     CALL 0x67E                         1288:      CALL _usb_file_create
0719  30B8     MOVLW 0xB8                         1289:      MOVLW 0xB8
071A  00A5     MOVWF 0x25                         1290:      MOVWF _timeout_low
071B  300B     MOVLW 0xB                          1291:      MOVLW 0x0B
071C  00A6     MOVWF 0x26                         1292:      MOVWF _timeout_high  ;SET TIMEOUT TO 3 SECONDS
071D  3014     MOVLW 0x14                         1293:      MOVLW 0x14
071E  00A9     MOVWF 0x29                         1294:      MOVWF _usb_target_status ;SET TARGET STATUS TO 0x14
071F  26B1     CALL 0x6B1                         1295:      CALL USB_WAIT_STATUS
0720  1923     BTFSC 0x23, 0x2                    1296:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0721  0008     RETURN                             1297:      RETURN
0722  3004     MOVLW 0x4                          1298:      MOVLW 0x04	;WE WILL WRITE 4 BLOCKS OF 32KB
0723  00B8     MOVWF 0x38                         1299:      MOVWF _gen_count6
                                                  1300:  UWTD_L4
0724  01B5     CLRF 0x35                          1301:      CLRF _usb_bytes_sent_high
0725  01B4     CLRF 0x34                          1302:      CLRF _usb_bytes_sent_low
0726  3080     MOVLW 0x80                         1303:      MOVLW 0x80	;SET FILE SIZE TO 32KB
0727  00B3     MOVWF 0x33                         1304:      MOVWF _usb_file_size_high
0728  01B2     CLRF 0x32                          1305:      CLRF _usb_file_size_low
0729  2683     CALL 0x683                         1306:      CALL USB_BYTE_WRITE
072A  300B     MOVLW 0xB                          1307:      MOVLW 0x0B
072B  00A6     MOVWF 0x26                         1308:      MOVWF _timeout_high
072C  30B8     MOVLW 0xB8                         1309:      MOVLW 0xB8
072D  00A5     MOVWF 0x25                         1310:      MOVWF _timeout_low	;3 SECOND TIMEOUT
072E  301E     MOVLW 0x1E                         1311:      MOVLW 0x1E
072F  00A9     MOVWF 0x29                         1312:      MOVWF _usb_target_status
0730  26B1     CALL 0x6B1                         1313:      CALL USB_WAIT_STATUS
0731  1923     BTFSC 0x23, 0x2                    1314:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0732  0008     RETURN                             1315:      RETURN
                                                  1316:  UWTD_ND_LOOP
0733  1108     BCF PORTD, 0x2                     1317:      BCF USB_CS
0734  302D     MOVLW 0x2D                         1318:      MOVLW 0x2D
0735  25DA     CALL 0x5DA                         1319:      CALL SPI_TRANSFER   ;SEND WR_REQ_DATA
0736  0100     CLRW                               1320:      CLRW
0737  25DA     CALL 0x5DA                         1321:      CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO SEND
0738  00B9     MOVWF 0x39                         1322:      MOVWF _gen_count5
                                                  1323:  UWTD_WR_LOOP
0739  25F2     CALL 0x5F2                         1324:      CALL GET_TEST_BYTE
073A  25DA     CALL 0x5DA                         1325:      CALL SPI_TRANSFER
073B  0FB4     INCFSZ 0x34, F                     1326:      INCFSZ _usb_bytes_sent_low, F
073C  03B5     DECF 0x35, F                       1327:      DECF _usb_bytes_sent_high, F
073D  0AB5     INCF 0x35, F                       1328:      INCF _usb_bytes_sent_high, F
073E  0835     MOVF 0x35, W                       1329:      MOVF _usb_bytes_sent_high, W
073F  0633     XORWF 0x33, W                      1330:      XORWF _usb_file_size_high, W
0740  1D03     BTFSS STATUS, 0x2                  1331:      BTFSS ZERO
0741  2F46     GOTO 0x746                         1332:      GOTO UWTD_NB
0742  0834     MOVF 0x34, W                       1333:      MOVF _usb_bytes_sent_low, W
0743  0632     XORWF 0x32, W                      1334:      XORWF _usb_file_size_low, W
0744  1903     BTFSC STATUS, 0x2                  1335:      BTFSC ZERO
0745  2F48     GOTO 0x748                         1336:      GOTO UWTD_BREAK
                                                  1337:  UWTD_NB	;GO HERE IF BYTES SENT != FILE SIZE
0746  0BB9     DECFSZ 0x39, F                     1338:      DECFSZ _gen_count5, F
0747  2F39     GOTO 0x739                         1339:      GOTO UWTD_WR_LOOP
                                                  1340:  UWTD_BREAK  ;GO HERE IF BYTES SENT == FILE SIZE
0748  1508     BSF PORTD, 0x2                     1341:      BSF USB_CS
0749  300B     MOVLW 0xB                          1342:      MOVLW 0x0B
074A  00A6     MOVWF 0x26                         1343:      MOVWF _timeout_high
074B  30B8     MOVLW 0xB8                         1344:      MOVLW 0xB8
074C  00A5     MOVWF 0x25                         1345:      MOVWF _timeout_low	;3 SECOND TIMEOUT
074D  301E     MOVLW 0x1E                         1346:      MOVLW 0x1E
074E  00A9     MOVWF 0x29                         1347:      MOVWF _usb_target_status
074F  26B1     CALL 0x6B1                         1348:      CALL USB_WAIT_STATUS
0750  1923     BTFSC 0x23, 0x2                    1349:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0751  0008     RETURN                             1350:      RETURN
0752  0835     MOVF 0x35, W                       1351:      MOVF _usb_bytes_sent_high, W
0753  0633     XORWF 0x33, W                      1352:      XORWF _usb_file_size_high, W
0754  1D03     BTFSS STATUS, 0x2                  1353:      BTFSS ZERO
0755  2F5A     GOTO 0x75A                         1354:      GOTO UWTD_NE
0756  0834     MOVF 0x34, W                       1355:      MOVF _usb_bytes_sent_low, W
0757  0632     XORWF 0x32, W                      1356:      XORWF _usb_file_size_low, W
0758  1903     BTFSC STATUS, 0x2                  1357:      BTFSC ZERO
0759  2F65     GOTO 0x765                         1358:      GOTO UWTD_EQUAL
                                                  1359:  UWTD_NE
075A  268C     CALL 0x68C                         1360:      CALL USB_BYTE_WR_GO
075B  300B     MOVLW 0xB                          1361:      MOVLW 0x0B
075C  00A6     MOVWF 0x26                         1362:      MOVWF _timeout_high
075D  30B8     MOVLW 0xB8                         1363:      MOVLW 0xB8
075E  00A5     MOVWF 0x25                         1364:      MOVWF _timeout_low	;3 SECOND TIMEOUT
075F  301E     MOVLW 0x1E                         1365:      MOVLW 0x1E
0760  00A9     MOVWF 0x29                         1366:      MOVWF _usb_target_status
0761  26B1     CALL 0x6B1                         1367:      CALL USB_WAIT_STATUS
0762  1923     BTFSC 0x23, 0x2                    1368:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0763  0008     RETURN                             1369:      RETURN
0764  2F33     GOTO 0x733                         1370:      GOTO UWTD_ND_LOOP
                                                  1371:  UWTD_EQUAL
0765  268C     CALL 0x68C                         1372:      CALL USB_BYTE_WR_GO
0766  300B     MOVLW 0xB                          1373:      MOVLW 0x0B
0767  00A6     MOVWF 0x26                         1374:      MOVWF _timeout_high
0768  30B8     MOVLW 0xB8                         1375:      MOVLW 0xB8
0769  00A5     MOVWF 0x25                         1376:      MOVWF _timeout_low	;3 SECOND TIMEOUT
076A  3014     MOVLW 0x14                         1377:      MOVLW 0x14
076B  00A9     MOVWF 0x29                         1378:      MOVWF _usb_target_status
076C  26B1     CALL 0x6B1                         1379:      CALL USB_WAIT_STATUS
076D  1923     BTFSC 0x23, 0x2                    1380:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
076E  0008     RETURN                             1381:      RETURN
076F  0BB8     DECFSZ 0x38, F                     1382:      DECFSZ _gen_count6, F
0770  2F24     GOTO 0x724                         1383:      GOTO UWTD_L4
0771  263D     CALL 0x63D                         1384:      CALL _usb_file_close
0772  300B     MOVLW 0xB                          1385:      MOVLW 0x0B
0773  00A6     MOVWF 0x26                         1386:      MOVWF _timeout_high
0774  30B8     MOVLW 0xB8                         1387:      MOVLW 0xB8
0775  00A5     MOVWF 0x25                         1388:      MOVWF _timeout_low	;3 SECOND TIMEOUT
0776  3014     MOVLW 0x14                         1389:      MOVLW 0x14
0777  00A9     MOVWF 0x29                         1390:      MOVWF _usb_target_status
0778  26B1     CALL 0x6B1                         1391:      CALL USB_WAIT_STATUS
0779  0008     RETURN                             1392:      RETURN
                                                  1393:  
                                                  1394:  ;USB_FILE_WRITE
                                                  1395:  ;    CALL USB_SET_FILE_NAME
                                                  1396:  ;    MOVLW H'10'
                                                  1397:  ;    MOVWF TIMEOUT_LOW
                                                  1398:  ;    CLRF TIMEOUT_HIGH
                                                  1399:  ;    MOVLW H'14'
                                                  1400:  ;    MOVWF USB_TARGET_STATUS
                                                  1401:  ;    CALL USB_WAIT_STATUS
                                                  1402:  ;    CALL USB_FILE_CREATE
                                                  1403:  ;    MOVLW H'B8'
                                                  1404:  ;    MOVWF TIMEOUT_LOW
                                                  1405:  ;    MOVLW H'0B'
                                                  1406:  ;    MOVWF TIMEOUT_HIGH  ;SET TIMEOUT TO 3 SECONDS
                                                  1407:  ;    MOVLW H'14'
                                                  1408:  ;    MOVWF USB_TARGET_STATUS ;SET TARGET STATUS TO 0x14
                                                  1409:  ;    CALL USB_WAIT_STATUS
                                                  1410:  ;    CLRF USB_BYTES_SENT_HIGH
                                                  1411:  ;    CLRF USB_BYTES_SENT_LOW
                                                  1412:  ;    MOVF TAPE_SIZE_HIGH, W
                                                  1413:  ;    MOVWF USB_FILE_SIZE_HIGH
                                                  1414:  ;    MOVF TAPE_SIZE_LOW, W
                                                  1415:  ;    MOVWF USB_FILE_SIZE_LOW
                                                  1416:  ;    CALL USB_BYTE_WRITE
                                                  1417:  ;    MOVLW H'0B'
                                                  1418:  ;    MOVWF TIMEOUT_HIGH
                                                  1419:  ;    MOVLW H'B8'
                                                  1420:  ;    MOVWF TIMEOUT_LOW
                                                  1421:  ;    MOVLW H'1E'
                                                  1422:  ;    MOVWF USB_TARGET_STATUS
                                                  1423:  ;    CALL USB_WAIT_STATUS
                                                  1424:  ;UFW_ND_LOOP
                                                  1425:  ;    CALL BUFF_INIT
                                                  1426:  ;    MOVF USB_BYTES_SENT_LOW, W
                                                  1427:  ;    MOVWF RAM_ADDRESS_L
                                                  1428:  ;    MOVF USB_BYTES_SENT_HIGH, W
                                                  1429:  ;    MOVWF RAM_ADDRESS_H
                                                  1430:  ;    DECF RAM_ADDRESS_L, F
                                                  1431:  ;    BTFSS STATUS, C
                                                  1432:  ;    DECF RAM_ADDRESS_H, F
                                                  1433:  ;    CALL BUFF_FILL
                                                  1434:  ;    BCF USB_CS
                                                  1435:  ;    MOVLW H'2D'
                                                  1436:  ;    MOVWF DREG
                                                  1437:  ;    CALL SPI_TRANSFER   ;SEND WR_REQ_DATA
                                                  1438:  ;    CLRF DREG
                                                  1439:  ;    CALL SPI_TRANSFER   ;GET NUMBER OF BYTES TO SEND
                                                  1440:  ;    MOVF DREG, W
                                                  1441:  ;    MOVWF GEN_COUNT5
                                                  1442:  ;UFW_WR_LOOP
                                                  1443:  ;    CALL BUFF_READ_AUTO
                                                  1444:  ;    CALL SPI_TRANSFER
                                                  1445:  ;    INCFSZ USB_BYTES_SENT_LOW, F
                                                  1446:  ;    DECF USB_BYTES_SENT_HIGH, F
                                                  1447:  ;    INCF USB_BYTES_SENT_HIGH, F
                                                  1448:  ;    MOVF USB_BYTES_SENT_HIGH, W
                                                  1449:  ;    XORWF USB_FILE_SIZE_HIGH, W
                                                  1450:  ;    BTFSS STATUS, Z
                                                  1451:  ;    GOTO UFW_NB
                                                  1452:  ;    MOVF USB_BYTES_SENT_LOW, W
                                                  1453:  ;    XORWF USB_FILE_SIZE_LOW, W
                                                  1454:  ;    BTFSC STATUS, Z
                                                  1455:  ;    GOTO UFW_BREAK
                                                  1456:  ;UFW_NB
                                                  1457:  ;    DECFSZ GEN_COUNT5, F
                                                  1458:  ;    GOTO UFW_WR_LOOP
                                                  1459:  ;UFW_BREAK
                                                  1460:  ;    BSF USB_CS
                                                  1461:  ;    MOVLW H'0B'
                                                  1462:  ;    MOVWF TIMEOUT_HIGH
                                                  1463:  ;    MOVLW H'B8'
                                                  1464:  ;    MOVWF TIMEOUT_LOW
                                                  1465:  ;    MOVLW H'1E'
                                                  1466:  ;    MOVWF USB_TARGET_STATUS
                                                  1467:  ;    CALL USB_WAIT_STATUS
                                                  1468:  ;    MOVF USB_BYTES_SENT_HIGH, W
                                                  1469:  ;    XORWF USB_FILE_SIZE_HIGH, W
                                                  1470:  ;    BTFSS STATUS, Z
                                                  1471:  ;    GOTO UFW_NE
                                                  1472:  ;    MOVF USB_BYTES_SENT_LOW, W
                                                  1473:  ;    XORWF USB_FILE_SIZE_LOW, W
                                                  1474:  ;    BTFSC STATUS, Z
                                                  1475:  ;    GOTO UFW_EQUAL
                                                  1476:  ;UFW_NE
                                                  1477:  ;    CALL USB_BYTE_WR_GO
                                                  1478:  ;    MOVLW H'0B'
                                                  1479:  ;    MOVWF TIMEOUT_HIGH
                                                  1480:  ;    MOVLW H'B8'
                                                  1481:  ;    MOVWF TIMEOUT_LOW
                                                  1482:  ;    MOVLW H'1E'
                                                  1483:  ;    MOVWF USB_TARGET_STATUS
                                                  1484:  ;    CALL USB_WAIT_STATUS
                                                  1485:  ;    GOTO UFW_ND_LOOP
                                                  1486:  ;UFW_EQUAL
                                                  1487:  ;    CALL USB_BYTE_WR_GO
                                                  1488:  ;    MOVLW H'0B'
                                                  1489:  ;    MOVWF TIMEOUT_HIGH
                                                  1490:  ;    MOVLW H'B8'
                                                  1491:  ;    MOVWF TIMEOUT_LOW
                                                  1492:  ;    MOVLW H'14'
                                                  1493:  ;    MOVWF USB_TARGET_STATUS
                                                  1494:  ;    CALL USB_WAIT_STATUS
                                                  1495:  ;    CALL USB_FILE_CLOSE
                                                  1496:  ;    MOVLW H'0B'
                                                  1497:  ;    MOVWF TIMEOUT_HIGH
                                                  1498:  ;    MOVLW H'B8'
                                                  1499:  ;    MOVWF TIMEOUT_LOW
                                                  1500:  ;    MOVLW H'14'
                                                  1501:  ;    MOVWF USB_TARGET_STATUS
                                                  1502:  ;    CALL USB_WAIT_STATUS
                                                  1503:  ;    RETURN
                                                  1504:  
                                                  1505:  global _usb_file_read
                                                  1506:  _usb_file_read
077A  30FF     MOVLW 0xFF                         1507:      MOVLW 0xFF
077B  00C1     MOVWF 0x41                         1508:      MOVWF _ram_address_h
077C  00C0     MOVWF 0x40                         1509:      MOVWF _ram_address_l ;RAM ADDRESS WILL OVERFLOW BEFORE FIRST WRITE
077D  2644     CALL 0x644                         1510:      CALL USB_BYTE_READ
077E  01A6     CLRF 0x26                          1511:      CLRF _timeout_high
077F  3080     MOVLW 0x80                         1512:      MOVLW 0x80
0780  00A5     MOVWF 0x25                         1513:      MOVWF _timeout_low
0781  301D     MOVLW 0x1D                         1514:      MOVLW 0x1D
0782  00A9     MOVWF 0x29                         1515:      MOVWF _usb_target_status
0783  26B1     CALL 0x6B1                         1516:      CALL USB_WAIT_STATUS
0784  1923     BTFSC 0x23, 0x2                    1517:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0785  0008     RETURN                             1518:      RETURN
                                                  1519:  UFR_LOOP
0786  2652     CALL 0x652                         1520:      CALL USB_READ_DATA0
0787  3001     MOVLW 0x1                          1521:      MOVLW 0x01
0788  25FB     CALL 0x5FB                         1522:      CALL _delay_millis
0789  0832     MOVF 0x32, W                       1523:      MOVF _usb_file_size_low, W
078A  0630     XORWF 0x30, W                      1524:      XORWF _usb_bytes_read_low, W
078B  1D03     BTFSS STATUS, 0x2                  1525:      BTFSS ZERO
078C  2F91     GOTO 0x791                         1526:      GOTO UFR_GO
078D  0833     MOVF 0x33, W                       1527:      MOVF _usb_file_size_high, W
078E  0631     XORWF 0x31, W                      1528:      XORWF _usb_bytes_read_high, W
078F  1903     BTFSC STATUS, 0x2                  1529:      BTFSC ZERO
0790  2F9B     GOTO 0x79B                         1530:      GOTO UFR_DONE
                                                  1531:  UFR_GO
0791  264D     CALL 0x64D                         1532:      CALL USB_BYTE_READ_GO
0792  01A6     CLRF 0x26                          1533:      CLRF _timeout_high
0793  30FF     MOVLW 0xFF                         1534:      MOVLW 0xFF
0794  00A5     MOVWF 0x25                         1535:      MOVWF _timeout_low
0795  301D     MOVLW 0x1D                         1536:      MOVLW 0x1D
0796  00A9     MOVWF 0x29                         1537:      MOVWF _usb_target_status
0797  26B1     CALL 0x6B1                         1538:      CALL USB_WAIT_STATUS
0798  1923     BTFSC 0x23, 0x2                    1539:      BTFSC F_TIMEOUT   ;CHECK TIMEOUT FLAG
0799  0008     RETURN                             1540:      RETURN
079A  2F86     GOTO 0x786                         1541:      GOTO UFR_LOOP
                                                  1542:  UFR_DONE
079B  0832     MOVF 0x32, W                       1543:      MOVF _usb_file_size_low, W
079C  00B6     MOVWF 0x36                         1544:      MOVWF _tape_size_low
079D  0833     MOVF 0x33, W                       1545:      MOVF _usb_file_size_high, W
079E  00B7     MOVWF 0x37                         1546:      MOVWF _tape_size_high
079F  1108     BCF PORTD, 0x2                     1547:      BCF USB_CS
07A0  3036     MOVLW 0x36                         1548:      MOVLW 0x36
07A1  25DA     CALL 0x5DA                         1549:      CALL SPI_TRANSFER   ;SEND FILE CLOSE COMMAND
07A2  0100     CLRW                               1550:      CLRW
07A3  25DA     CALL 0x5DA                         1551:      CALL SPI_TRANSFER   ;FILE CLOSE PARAMETER IS 0 (DO NOT UPDATE FILE SIZE)
07A4  1508     BSF PORTD, 0x2                     1552:      BSF USB_CS
07A5  01A6     CLRF 0x26                          1553:      CLRF _timeout_high
07A6  3080     MOVLW 0x80                         1554:      MOVLW 0x80
07A7  00A5     MOVWF 0x25                         1555:      MOVWF _timeout_low
07A8  3014     MOVLW 0x14                         1556:      MOVLW 0x14
07A9  00A9     MOVWF 0x29                         1557:      MOVWF _usb_target_status
07AA  26B1     CALL 0x6B1                         1558:      CALL USB_WAIT_STATUS
07AB  0008     RETURN                             1559:      RETURN
                                                  1560:      
                                                  1561:  _fifo_init
07AC  01F0     CLRF 0x70                          1562:      CLRF _fifo_write_idx
07AD  01A1     CLRF 0x21                          1563:      CLRF _fifo_write_bank
07AE  01F1     CLRF 0x71                          1564:      CLRF _fifo_read_idx
07AF  01A2     CLRF 0x22                          1565:      CLRF _fifo_read_bank
07B0  01A0     CLRF 0x20                          1566:      CLRF _fifo_num_bytes
07B1  0008     RETURN                             1567:      RETURN
                                                  1568:      
                                                  1569:  _fifo_tf_to_mem
07B2  08A0     MOVF 0x20, F                       1570:      MOVF _fifo_num_bytes, F
07B3  1903     BTFSC STATUS, 0x2                  1571:      BTFSC ZERO
07B4  0008     RETURN                             1572:      RETURN
07B5  21DE     CALL 0x1DE                         1573:      CALL _fifo_pop
07B6  252B     CALL 0x52B                         1574:      CALL RAM_WRITE_AUTO
07B7  2FB2     GOTO 0x7B2                         1575:      GOTO _fifo_tf_to_mem
                                                  1576:  
                                                  1577:  _fifo_tf_from_mem
07B8  0920     COMF 0x20, W                       1578:      COMF _fifo_num_bytes, W
07B9  1903     BTFSC STATUS, 0x2                  1579:      BTFSC ZERO
07BA  0008     RETURN                             1580:      RETURN
07BB  2505     CALL 0x505                         1581:      CALL RAM_READ_AUTO
07BC  221C     CALL 0x21C                         1582:      CALL _fifo_push
07BD  2FB8     GOTO 0x7B8                         1583:      GOTO _fifo_tf_from_mem

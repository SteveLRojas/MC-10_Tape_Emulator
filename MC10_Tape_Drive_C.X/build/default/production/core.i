
# 1 "core.asm"

# 46 "/opt/microchip/xc8/v2.05/pic/include/pic16f747.inc"
INDF equ 0000h


TMR0 equ 0001h


PCL equ 0002h


STATUS equ 0003h

STATUS_C_POSN equ 0000h
STATUS_C_POSITION equ 0000h
STATUS_C_SIZE equ 0001h
STATUS_C_LENGTH equ 0001h
STATUS_C_MASK equ 0001h
STATUS_DC_POSN equ 0001h
STATUS_DC_POSITION equ 0001h
STATUS_DC_SIZE equ 0001h
STATUS_DC_LENGTH equ 0001h
STATUS_DC_MASK equ 0002h
STATUS_Z_POSN equ 0002h
STATUS_Z_POSITION equ 0002h
STATUS_Z_SIZE equ 0001h
STATUS_Z_LENGTH equ 0001h
STATUS_Z_MASK equ 0004h
STATUS_nPD_POSN equ 0003h
STATUS_nPD_POSITION equ 0003h
STATUS_nPD_SIZE equ 0001h
STATUS_nPD_LENGTH equ 0001h
STATUS_nPD_MASK equ 0008h
STATUS_nTO_POSN equ 0004h
STATUS_nTO_POSITION equ 0004h
STATUS_nTO_SIZE equ 0001h
STATUS_nTO_LENGTH equ 0001h
STATUS_nTO_MASK equ 0010h
STATUS_RP_POSN equ 0005h
STATUS_RP_POSITION equ 0005h
STATUS_RP_SIZE equ 0002h
STATUS_RP_LENGTH equ 0002h
STATUS_RP_MASK equ 0060h
STATUS_IRP_POSN equ 0007h
STATUS_IRP_POSITION equ 0007h
STATUS_IRP_SIZE equ 0001h
STATUS_IRP_LENGTH equ 0001h
STATUS_IRP_MASK equ 0080h
STATUS_RP0_POSN equ 0005h
STATUS_RP0_POSITION equ 0005h
STATUS_RP0_SIZE equ 0001h
STATUS_RP0_LENGTH equ 0001h
STATUS_RP0_MASK equ 0020h
STATUS_RP1_POSN equ 0006h
STATUS_RP1_POSITION equ 0006h
STATUS_RP1_SIZE equ 0001h
STATUS_RP1_LENGTH equ 0001h
STATUS_RP1_MASK equ 0040h
STATUS_CARRY_POSN equ 0000h
STATUS_CARRY_POSITION equ 0000h
STATUS_CARRY_SIZE equ 0001h
STATUS_CARRY_LENGTH equ 0001h
STATUS_CARRY_MASK equ 0001h
STATUS_ZERO_POSN equ 0002h
STATUS_ZERO_POSITION equ 0002h
STATUS_ZERO_SIZE equ 0001h
STATUS_ZERO_LENGTH equ 0001h
STATUS_ZERO_MASK equ 0004h


FSR equ 0004h


PORTA equ 0005h

PORTA_RA0_POSN equ 0000h
PORTA_RA0_POSITION equ 0000h
PORTA_RA0_SIZE equ 0001h
PORTA_RA0_LENGTH equ 0001h
PORTA_RA0_MASK equ 0001h
PORTA_RA1_POSN equ 0001h
PORTA_RA1_POSITION equ 0001h
PORTA_RA1_SIZE equ 0001h
PORTA_RA1_LENGTH equ 0001h
PORTA_RA1_MASK equ 0002h
PORTA_RA2_POSN equ 0002h
PORTA_RA2_POSITION equ 0002h
PORTA_RA2_SIZE equ 0001h
PORTA_RA2_LENGTH equ 0001h
PORTA_RA2_MASK equ 0004h
PORTA_RA3_POSN equ 0003h
PORTA_RA3_POSITION equ 0003h
PORTA_RA3_SIZE equ 0001h
PORTA_RA3_LENGTH equ 0001h
PORTA_RA3_MASK equ 0008h
PORTA_RA4_POSN equ 0004h
PORTA_RA4_POSITION equ 0004h
PORTA_RA4_SIZE equ 0001h
PORTA_RA4_LENGTH equ 0001h
PORTA_RA4_MASK equ 0010h
PORTA_RA5_POSN equ 0005h
PORTA_RA5_POSITION equ 0005h
PORTA_RA5_SIZE equ 0001h
PORTA_RA5_LENGTH equ 0001h
PORTA_RA5_MASK equ 0020h
PORTA_RA6_POSN equ 0006h
PORTA_RA6_POSITION equ 0006h
PORTA_RA6_SIZE equ 0001h
PORTA_RA6_LENGTH equ 0001h
PORTA_RA6_MASK equ 0040h
PORTA_RA7_POSN equ 0007h
PORTA_RA7_POSITION equ 0007h
PORTA_RA7_SIZE equ 0001h
PORTA_RA7_LENGTH equ 0001h
PORTA_RA7_MASK equ 0080h


PORTB equ 0006h

PORTB_RB0_POSN equ 0000h
PORTB_RB0_POSITION equ 0000h
PORTB_RB0_SIZE equ 0001h
PORTB_RB0_LENGTH equ 0001h
PORTB_RB0_MASK equ 0001h
PORTB_RB1_POSN equ 0001h
PORTB_RB1_POSITION equ 0001h
PORTB_RB1_SIZE equ 0001h
PORTB_RB1_LENGTH equ 0001h
PORTB_RB1_MASK equ 0002h
PORTB_RB2_POSN equ 0002h
PORTB_RB2_POSITION equ 0002h
PORTB_RB2_SIZE equ 0001h
PORTB_RB2_LENGTH equ 0001h
PORTB_RB2_MASK equ 0004h
PORTB_RB3_POSN equ 0003h
PORTB_RB3_POSITION equ 0003h
PORTB_RB3_SIZE equ 0001h
PORTB_RB3_LENGTH equ 0001h
PORTB_RB3_MASK equ 0008h
PORTB_RB4_POSN equ 0004h
PORTB_RB4_POSITION equ 0004h
PORTB_RB4_SIZE equ 0001h
PORTB_RB4_LENGTH equ 0001h
PORTB_RB4_MASK equ 0010h
PORTB_RB5_POSN equ 0005h
PORTB_RB5_POSITION equ 0005h
PORTB_RB5_SIZE equ 0001h
PORTB_RB5_LENGTH equ 0001h
PORTB_RB5_MASK equ 0020h
PORTB_RB6_POSN equ 0006h
PORTB_RB6_POSITION equ 0006h
PORTB_RB6_SIZE equ 0001h
PORTB_RB6_LENGTH equ 0001h
PORTB_RB6_MASK equ 0040h
PORTB_RB7_POSN equ 0007h
PORTB_RB7_POSITION equ 0007h
PORTB_RB7_SIZE equ 0001h
PORTB_RB7_LENGTH equ 0001h
PORTB_RB7_MASK equ 0080h


PORTC equ 0007h

PORTC_RC0_POSN equ 0000h
PORTC_RC0_POSITION equ 0000h
PORTC_RC0_SIZE equ 0001h
PORTC_RC0_LENGTH equ 0001h
PORTC_RC0_MASK equ 0001h
PORTC_RC1_POSN equ 0001h
PORTC_RC1_POSITION equ 0001h
PORTC_RC1_SIZE equ 0001h
PORTC_RC1_LENGTH equ 0001h
PORTC_RC1_MASK equ 0002h
PORTC_RC2_POSN equ 0002h
PORTC_RC2_POSITION equ 0002h
PORTC_RC2_SIZE equ 0001h
PORTC_RC2_LENGTH equ 0001h
PORTC_RC2_MASK equ 0004h
PORTC_RC3_POSN equ 0003h
PORTC_RC3_POSITION equ 0003h
PORTC_RC3_SIZE equ 0001h
PORTC_RC3_LENGTH equ 0001h
PORTC_RC3_MASK equ 0008h
PORTC_RC4_POSN equ 0004h
PORTC_RC4_POSITION equ 0004h
PORTC_RC4_SIZE equ 0001h
PORTC_RC4_LENGTH equ 0001h
PORTC_RC4_MASK equ 0010h
PORTC_RC5_POSN equ 0005h
PORTC_RC5_POSITION equ 0005h
PORTC_RC5_SIZE equ 0001h
PORTC_RC5_LENGTH equ 0001h
PORTC_RC5_MASK equ 0020h
PORTC_RC6_POSN equ 0006h
PORTC_RC6_POSITION equ 0006h
PORTC_RC6_SIZE equ 0001h
PORTC_RC6_LENGTH equ 0001h
PORTC_RC6_MASK equ 0040h
PORTC_RC7_POSN equ 0007h
PORTC_RC7_POSITION equ 0007h
PORTC_RC7_SIZE equ 0001h
PORTC_RC7_LENGTH equ 0001h
PORTC_RC7_MASK equ 0080h


PORTD equ 0008h

PORTD_RD0_POSN equ 0000h
PORTD_RD0_POSITION equ 0000h
PORTD_RD0_SIZE equ 0001h
PORTD_RD0_LENGTH equ 0001h
PORTD_RD0_MASK equ 0001h
PORTD_RD1_POSN equ 0001h
PORTD_RD1_POSITION equ 0001h
PORTD_RD1_SIZE equ 0001h
PORTD_RD1_LENGTH equ 0001h
PORTD_RD1_MASK equ 0002h
PORTD_RD2_POSN equ 0002h
PORTD_RD2_POSITION equ 0002h
PORTD_RD2_SIZE equ 0001h
PORTD_RD2_LENGTH equ 0001h
PORTD_RD2_MASK equ 0004h
PORTD_RD3_POSN equ 0003h
PORTD_RD3_POSITION equ 0003h
PORTD_RD3_SIZE equ 0001h
PORTD_RD3_LENGTH equ 0001h
PORTD_RD3_MASK equ 0008h
PORTD_RD4_POSN equ 0004h
PORTD_RD4_POSITION equ 0004h
PORTD_RD4_SIZE equ 0001h
PORTD_RD4_LENGTH equ 0001h
PORTD_RD4_MASK equ 0010h
PORTD_RD5_POSN equ 0005h
PORTD_RD5_POSITION equ 0005h
PORTD_RD5_SIZE equ 0001h
PORTD_RD5_LENGTH equ 0001h
PORTD_RD5_MASK equ 0020h
PORTD_RD6_POSN equ 0006h
PORTD_RD6_POSITION equ 0006h
PORTD_RD6_SIZE equ 0001h
PORTD_RD6_LENGTH equ 0001h
PORTD_RD6_MASK equ 0040h
PORTD_RD7_POSN equ 0007h
PORTD_RD7_POSITION equ 0007h
PORTD_RD7_SIZE equ 0001h
PORTD_RD7_LENGTH equ 0001h
PORTD_RD7_MASK equ 0080h


PORTE equ 0009h

PORTE_RE0_POSN equ 0000h
PORTE_RE0_POSITION equ 0000h
PORTE_RE0_SIZE equ 0001h
PORTE_RE0_LENGTH equ 0001h
PORTE_RE0_MASK equ 0001h
PORTE_RE1_POSN equ 0001h
PORTE_RE1_POSITION equ 0001h
PORTE_RE1_SIZE equ 0001h
PORTE_RE1_LENGTH equ 0001h
PORTE_RE1_MASK equ 0002h
PORTE_RE2_POSN equ 0002h
PORTE_RE2_POSITION equ 0002h
PORTE_RE2_SIZE equ 0001h
PORTE_RE2_LENGTH equ 0001h
PORTE_RE2_MASK equ 0004h
PORTE_RE3_POSN equ 0003h
PORTE_RE3_POSITION equ 0003h
PORTE_RE3_SIZE equ 0001h
PORTE_RE3_LENGTH equ 0001h
PORTE_RE3_MASK equ 0008h


PCLATH equ 000Ah

PCLATH_PCLATH_POSN equ 0000h
PCLATH_PCLATH_POSITION equ 0000h
PCLATH_PCLATH_SIZE equ 0005h
PCLATH_PCLATH_LENGTH equ 0005h
PCLATH_PCLATH_MASK equ 001Fh


INTCON equ 000Bh

INTCON_RBIF_POSN equ 0000h
INTCON_RBIF_POSITION equ 0000h
INTCON_RBIF_SIZE equ 0001h
INTCON_RBIF_LENGTH equ 0001h
INTCON_RBIF_MASK equ 0001h
INTCON_INTF_POSN equ 0001h
INTCON_INTF_POSITION equ 0001h
INTCON_INTF_SIZE equ 0001h
INTCON_INTF_LENGTH equ 0001h
INTCON_INTF_MASK equ 0002h
INTCON_TMR0IF_POSN equ 0002h
INTCON_TMR0IF_POSITION equ 0002h
INTCON_TMR0IF_SIZE equ 0001h
INTCON_TMR0IF_LENGTH equ 0001h
INTCON_TMR0IF_MASK equ 0004h
INTCON_RBIE_POSN equ 0003h
INTCON_RBIE_POSITION equ 0003h
INTCON_RBIE_SIZE equ 0001h
INTCON_RBIE_LENGTH equ 0001h
INTCON_RBIE_MASK equ 0008h
INTCON_INTE_POSN equ 0004h
INTCON_INTE_POSITION equ 0004h
INTCON_INTE_SIZE equ 0001h
INTCON_INTE_LENGTH equ 0001h
INTCON_INTE_MASK equ 0010h
INTCON_TMR0IE_POSN equ 0005h
INTCON_TMR0IE_POSITION equ 0005h
INTCON_TMR0IE_SIZE equ 0001h
INTCON_TMR0IE_LENGTH equ 0001h
INTCON_TMR0IE_MASK equ 0020h
INTCON_PEIE_POSN equ 0006h
INTCON_PEIE_POSITION equ 0006h
INTCON_PEIE_SIZE equ 0001h
INTCON_PEIE_LENGTH equ 0001h
INTCON_PEIE_MASK equ 0040h
INTCON_GIE_POSN equ 0007h
INTCON_GIE_POSITION equ 0007h
INTCON_GIE_SIZE equ 0001h
INTCON_GIE_LENGTH equ 0001h
INTCON_GIE_MASK equ 0080h
INTCON_INT0IF_POSN equ 0001h
INTCON_INT0IF_POSITION equ 0001h
INTCON_INT0IF_SIZE equ 0001h
INTCON_INT0IF_LENGTH equ 0001h
INTCON_INT0IF_MASK equ 0002h
INTCON_T0IF_POSN equ 0002h
INTCON_T0IF_POSITION equ 0002h
INTCON_T0IF_SIZE equ 0001h
INTCON_T0IF_LENGTH equ 0001h
INTCON_T0IF_MASK equ 0004h
INTCON_INT0IE_POSN equ 0004h
INTCON_INT0IE_POSITION equ 0004h
INTCON_INT0IE_SIZE equ 0001h
INTCON_INT0IE_LENGTH equ 0001h
INTCON_INT0IE_MASK equ 0010h
INTCON_T0IE_POSN equ 0005h
INTCON_T0IE_POSITION equ 0005h
INTCON_T0IE_SIZE equ 0001h
INTCON_T0IE_LENGTH equ 0001h
INTCON_T0IE_MASK equ 0020h


PIR1 equ 000Ch

PIR1_TMR1IF_POSN equ 0000h
PIR1_TMR1IF_POSITION equ 0000h
PIR1_TMR1IF_SIZE equ 0001h
PIR1_TMR1IF_LENGTH equ 0001h
PIR1_TMR1IF_MASK equ 0001h
PIR1_TMR2IF_POSN equ 0001h
PIR1_TMR2IF_POSITION equ 0001h
PIR1_TMR2IF_SIZE equ 0001h
PIR1_TMR2IF_LENGTH equ 0001h
PIR1_TMR2IF_MASK equ 0002h
PIR1_CCP1IF_POSN equ 0002h
PIR1_CCP1IF_POSITION equ 0002h
PIR1_CCP1IF_SIZE equ 0001h
PIR1_CCP1IF_LENGTH equ 0001h
PIR1_CCP1IF_MASK equ 0004h
PIR1_SSPIF_POSN equ 0003h
PIR1_SSPIF_POSITION equ 0003h
PIR1_SSPIF_SIZE equ 0001h
PIR1_SSPIF_LENGTH equ 0001h
PIR1_SSPIF_MASK equ 0008h
PIR1_TXIF_POSN equ 0004h
PIR1_TXIF_POSITION equ 0004h
PIR1_TXIF_SIZE equ 0001h
PIR1_TXIF_LENGTH equ 0001h
PIR1_TXIF_MASK equ 0010h
PIR1_RCIF_POSN equ 0005h
PIR1_RCIF_POSITION equ 0005h
PIR1_RCIF_SIZE equ 0001h
PIR1_RCIF_LENGTH equ 0001h
PIR1_RCIF_MASK equ 0020h
PIR1_ADIF_POSN equ 0006h
PIR1_ADIF_POSITION equ 0006h
PIR1_ADIF_SIZE equ 0001h
PIR1_ADIF_LENGTH equ 0001h
PIR1_ADIF_MASK equ 0040h
PIR1_PSPIF_POSN equ 0007h
PIR1_PSPIF_POSITION equ 0007h
PIR1_PSPIF_SIZE equ 0001h
PIR1_PSPIF_LENGTH equ 0001h
PIR1_PSPIF_MASK equ 0080h


PIR2 equ 000Dh

PIR2_CCP2IF_POSN equ 0000h
PIR2_CCP2IF_POSITION equ 0000h
PIR2_CCP2IF_SIZE equ 0001h
PIR2_CCP2IF_LENGTH equ 0001h
PIR2_CCP2IF_MASK equ 0001h
PIR2_CCP3IF_POSN equ 0001h
PIR2_CCP3IF_POSITION equ 0001h
PIR2_CCP3IF_SIZE equ 0001h
PIR2_CCP3IF_LENGTH equ 0001h
PIR2_CCP3IF_MASK equ 0002h
PIR2_BCLIF_POSN equ 0003h
PIR2_BCLIF_POSITION equ 0003h
PIR2_BCLIF_SIZE equ 0001h
PIR2_BCLIF_LENGTH equ 0001h
PIR2_BCLIF_MASK equ 0008h
PIR2_LVDIF_POSN equ 0005h
PIR2_LVDIF_POSITION equ 0005h
PIR2_LVDIF_SIZE equ 0001h
PIR2_LVDIF_LENGTH equ 0001h
PIR2_LVDIF_MASK equ 0020h
PIR2_CMIF_POSN equ 0006h
PIR2_CMIF_POSITION equ 0006h
PIR2_CMIF_SIZE equ 0001h
PIR2_CMIF_LENGTH equ 0001h
PIR2_CMIF_MASK equ 0040h
PIR2_OSFIF_POSN equ 0007h
PIR2_OSFIF_POSITION equ 0007h
PIR2_OSFIF_SIZE equ 0001h
PIR2_OSFIF_LENGTH equ 0001h
PIR2_OSFIF_MASK equ 0080h


TMR1L equ 000Eh


TMR1H equ 000Fh


T1CON equ 0010h

T1CON_TMR1ON_POSN equ 0000h
T1CON_TMR1ON_POSITION equ 0000h
T1CON_TMR1ON_SIZE equ 0001h
T1CON_TMR1ON_LENGTH equ 0001h
T1CON_TMR1ON_MASK equ 0001h
T1CON_TMR1CS_POSN equ 0001h
T1CON_TMR1CS_POSITION equ 0001h
T1CON_TMR1CS_SIZE equ 0001h
T1CON_TMR1CS_LENGTH equ 0001h
T1CON_TMR1CS_MASK equ 0002h
T1CON_nT1SYNC_POSN equ 0002h
T1CON_nT1SYNC_POSITION equ 0002h
T1CON_nT1SYNC_SIZE equ 0001h
T1CON_nT1SYNC_LENGTH equ 0001h
T1CON_nT1SYNC_MASK equ 0004h
T1CON_T1OSCEN_POSN equ 0003h
T1CON_T1OSCEN_POSITION equ 0003h
T1CON_T1OSCEN_SIZE equ 0001h
T1CON_T1OSCEN_LENGTH equ 0001h
T1CON_T1OSCEN_MASK equ 0008h
T1CON_T1CKPS_POSN equ 0004h
T1CON_T1CKPS_POSITION equ 0004h
T1CON_T1CKPS_SIZE equ 0002h
T1CON_T1CKPS_LENGTH equ 0002h
T1CON_T1CKPS_MASK equ 0030h
T1CON_T1RUN_POSN equ 0006h
T1CON_T1RUN_POSITION equ 0006h
T1CON_T1RUN_SIZE equ 0001h
T1CON_T1RUN_LENGTH equ 0001h
T1CON_T1RUN_MASK equ 0040h
T1CON_T1SYNC_POSN equ 0002h
T1CON_T1SYNC_POSITION equ 0002h
T1CON_T1SYNC_SIZE equ 0001h
T1CON_T1SYNC_LENGTH equ 0001h
T1CON_T1SYNC_MASK equ 0004h
T1CON_T1CKPS0_POSN equ 0004h
T1CON_T1CKPS0_POSITION equ 0004h
T1CON_T1CKPS0_SIZE equ 0001h
T1CON_T1CKPS0_LENGTH equ 0001h
T1CON_T1CKPS0_MASK equ 0010h
T1CON_T1CKPS1_POSN equ 0005h
T1CON_T1CKPS1_POSITION equ 0005h
T1CON_T1CKPS1_SIZE equ 0001h
T1CON_T1CKPS1_LENGTH equ 0001h
T1CON_T1CKPS1_MASK equ 0020h
T1CON_T1INSYNC_POSN equ 0002h
T1CON_T1INSYNC_POSITION equ 0002h
T1CON_T1INSYNC_SIZE equ 0001h
T1CON_T1INSYNC_LENGTH equ 0001h
T1CON_T1INSYNC_MASK equ 0004h


TMR2 equ 0011h


T2CON equ 0012h

T2CON_T2CKPS_POSN equ 0000h
T2CON_T2CKPS_POSITION equ 0000h
T2CON_T2CKPS_SIZE equ 0002h
T2CON_T2CKPS_LENGTH equ 0002h
T2CON_T2CKPS_MASK equ 0003h
T2CON_TMR2ON_POSN equ 0002h
T2CON_TMR2ON_POSITION equ 0002h
T2CON_TMR2ON_SIZE equ 0001h
T2CON_TMR2ON_LENGTH equ 0001h
T2CON_TMR2ON_MASK equ 0004h
T2CON_TOUTPS_POSN equ 0003h
T2CON_TOUTPS_POSITION equ 0003h
T2CON_TOUTPS_SIZE equ 0004h
T2CON_TOUTPS_LENGTH equ 0004h
T2CON_TOUTPS_MASK equ 0078h
T2CON_T2CKPS0_POSN equ 0000h
T2CON_T2CKPS0_POSITION equ 0000h
T2CON_T2CKPS0_SIZE equ 0001h
T2CON_T2CKPS0_LENGTH equ 0001h
T2CON_T2CKPS0_MASK equ 0001h
T2CON_T2CKPS1_POSN equ 0001h
T2CON_T2CKPS1_POSITION equ 0001h
T2CON_T2CKPS1_SIZE equ 0001h
T2CON_T2CKPS1_LENGTH equ 0001h
T2CON_T2CKPS1_MASK equ 0002h
T2CON_TOUTPS0_POSN equ 0003h
T2CON_TOUTPS0_POSITION equ 0003h
T2CON_TOUTPS0_SIZE equ 0001h
T2CON_TOUTPS0_LENGTH equ 0001h
T2CON_TOUTPS0_MASK equ 0008h
T2CON_TOUTPS1_POSN equ 0004h
T2CON_TOUTPS1_POSITION equ 0004h
T2CON_TOUTPS1_SIZE equ 0001h
T2CON_TOUTPS1_LENGTH equ 0001h
T2CON_TOUTPS1_MASK equ 0010h
T2CON_TOUTPS2_POSN equ 0005h
T2CON_TOUTPS2_POSITION equ 0005h
T2CON_TOUTPS2_SIZE equ 0001h
T2CON_TOUTPS2_LENGTH equ 0001h
T2CON_TOUTPS2_MASK equ 0020h
T2CON_TOUTPS3_POSN equ 0006h
T2CON_TOUTPS3_POSITION equ 0006h
T2CON_TOUTPS3_SIZE equ 0001h
T2CON_TOUTPS3_LENGTH equ 0001h
T2CON_TOUTPS3_MASK equ 0040h


SSPBUF equ 0013h


SSPCON equ 0014h

SSPCON_SSPM_POSN equ 0000h
SSPCON_SSPM_POSITION equ 0000h
SSPCON_SSPM_SIZE equ 0004h
SSPCON_SSPM_LENGTH equ 0004h
SSPCON_SSPM_MASK equ 000Fh
SSPCON_CKP_POSN equ 0004h
SSPCON_CKP_POSITION equ 0004h
SSPCON_CKP_SIZE equ 0001h
SSPCON_CKP_LENGTH equ 0001h
SSPCON_CKP_MASK equ 0010h
SSPCON_SSPEN_POSN equ 0005h
SSPCON_SSPEN_POSITION equ 0005h
SSPCON_SSPEN_SIZE equ 0001h
SSPCON_SSPEN_LENGTH equ 0001h
SSPCON_SSPEN_MASK equ 0020h
SSPCON_SSPOV_POSN equ 0006h
SSPCON_SSPOV_POSITION equ 0006h
SSPCON_SSPOV_SIZE equ 0001h
SSPCON_SSPOV_LENGTH equ 0001h
SSPCON_SSPOV_MASK equ 0040h
SSPCON_WCOL_POSN equ 0007h
SSPCON_WCOL_POSITION equ 0007h
SSPCON_WCOL_SIZE equ 0001h
SSPCON_WCOL_LENGTH equ 0001h
SSPCON_WCOL_MASK equ 0080h
SSPCON_SSPM0_POSN equ 0000h
SSPCON_SSPM0_POSITION equ 0000h
SSPCON_SSPM0_SIZE equ 0001h
SSPCON_SSPM0_LENGTH equ 0001h
SSPCON_SSPM0_MASK equ 0001h
SSPCON_SSPM1_POSN equ 0001h
SSPCON_SSPM1_POSITION equ 0001h
SSPCON_SSPM1_SIZE equ 0001h
SSPCON_SSPM1_LENGTH equ 0001h
SSPCON_SSPM1_MASK equ 0002h
SSPCON_SSPM2_POSN equ 0002h
SSPCON_SSPM2_POSITION equ 0002h
SSPCON_SSPM2_SIZE equ 0001h
SSPCON_SSPM2_LENGTH equ 0001h
SSPCON_SSPM2_MASK equ 0004h
SSPCON_SSPM3_POSN equ 0003h
SSPCON_SSPM3_POSITION equ 0003h
SSPCON_SSPM3_SIZE equ 0001h
SSPCON_SSPM3_LENGTH equ 0001h
SSPCON_SSPM3_MASK equ 0008h


CCPR1L equ 0015h


CCPR1H equ 0016h


CCP1CON equ 0017h

CCP1CON_CCP1M_POSN equ 0000h
CCP1CON_CCP1M_POSITION equ 0000h
CCP1CON_CCP1M_SIZE equ 0004h
CCP1CON_CCP1M_LENGTH equ 0004h
CCP1CON_CCP1M_MASK equ 000Fh
CCP1CON_CCP1Y_POSN equ 0004h
CCP1CON_CCP1Y_POSITION equ 0004h
CCP1CON_CCP1Y_SIZE equ 0001h
CCP1CON_CCP1Y_LENGTH equ 0001h
CCP1CON_CCP1Y_MASK equ 0010h
CCP1CON_CCP1X_POSN equ 0005h
CCP1CON_CCP1X_POSITION equ 0005h
CCP1CON_CCP1X_SIZE equ 0001h
CCP1CON_CCP1X_LENGTH equ 0001h
CCP1CON_CCP1X_MASK equ 0020h
CCP1CON_CCP1M0_POSN equ 0000h
CCP1CON_CCP1M0_POSITION equ 0000h
CCP1CON_CCP1M0_SIZE equ 0001h
CCP1CON_CCP1M0_LENGTH equ 0001h
CCP1CON_CCP1M0_MASK equ 0001h
CCP1CON_CCP1M1_POSN equ 0001h
CCP1CON_CCP1M1_POSITION equ 0001h
CCP1CON_CCP1M1_SIZE equ 0001h
CCP1CON_CCP1M1_LENGTH equ 0001h
CCP1CON_CCP1M1_MASK equ 0002h
CCP1CON_CCP1M2_POSN equ 0002h
CCP1CON_CCP1M2_POSITION equ 0002h
CCP1CON_CCP1M2_SIZE equ 0001h
CCP1CON_CCP1M2_LENGTH equ 0001h
CCP1CON_CCP1M2_MASK equ 0004h
CCP1CON_CCP1M3_POSN equ 0003h
CCP1CON_CCP1M3_POSITION equ 0003h
CCP1CON_CCP1M3_SIZE equ 0001h
CCP1CON_CCP1M3_LENGTH equ 0001h
CCP1CON_CCP1M3_MASK equ 0008h


RCSTA equ 0018h

RCSTA_RX9D_POSN equ 0000h
RCSTA_RX9D_POSITION equ 0000h
RCSTA_RX9D_SIZE equ 0001h
RCSTA_RX9D_LENGTH equ 0001h
RCSTA_RX9D_MASK equ 0001h
RCSTA_OERR_POSN equ 0001h
RCSTA_OERR_POSITION equ 0001h
RCSTA_OERR_SIZE equ 0001h
RCSTA_OERR_LENGTH equ 0001h
RCSTA_OERR_MASK equ 0002h
RCSTA_FERR_POSN equ 0002h
RCSTA_FERR_POSITION equ 0002h
RCSTA_FERR_SIZE equ 0001h
RCSTA_FERR_LENGTH equ 0001h
RCSTA_FERR_MASK equ 0004h
RCSTA_ADDEN_POSN equ 0003h
RCSTA_ADDEN_POSITION equ 0003h
RCSTA_ADDEN_SIZE equ 0001h
RCSTA_ADDEN_LENGTH equ 0001h
RCSTA_ADDEN_MASK equ 0008h
RCSTA_CREN_POSN equ 0004h
RCSTA_CREN_POSITION equ 0004h
RCSTA_CREN_SIZE equ 0001h
RCSTA_CREN_LENGTH equ 0001h
RCSTA_CREN_MASK equ 0010h
RCSTA_SREN_POSN equ 0005h
RCSTA_SREN_POSITION equ 0005h
RCSTA_SREN_SIZE equ 0001h
RCSTA_SREN_LENGTH equ 0001h
RCSTA_SREN_MASK equ 0020h
RCSTA_RX9_POSN equ 0006h
RCSTA_RX9_POSITION equ 0006h
RCSTA_RX9_SIZE equ 0001h
RCSTA_RX9_LENGTH equ 0001h
RCSTA_RX9_MASK equ 0040h
RCSTA_SPEN_POSN equ 0007h
RCSTA_SPEN_POSITION equ 0007h
RCSTA_SPEN_SIZE equ 0001h
RCSTA_SPEN_LENGTH equ 0001h
RCSTA_SPEN_MASK equ 0080h
RCSTA_RCD8_POSN equ 0000h
RCSTA_RCD8_POSITION equ 0000h
RCSTA_RCD8_SIZE equ 0001h
RCSTA_RCD8_LENGTH equ 0001h
RCSTA_RCD8_MASK equ 0001h
RCSTA_RC9_POSN equ 0006h
RCSTA_RC9_POSITION equ 0006h
RCSTA_RC9_SIZE equ 0001h
RCSTA_RC9_LENGTH equ 0001h
RCSTA_RC9_MASK equ 0040h
RCSTA_nRC8_POSN equ 0006h
RCSTA_nRC8_POSITION equ 0006h
RCSTA_nRC8_SIZE equ 0001h
RCSTA_nRC8_LENGTH equ 0001h
RCSTA_nRC8_MASK equ 0040h
RCSTA_RC8_9_POSN equ 0006h
RCSTA_RC8_9_POSITION equ 0006h
RCSTA_RC8_9_SIZE equ 0001h
RCSTA_RC8_9_LENGTH equ 0001h
RCSTA_RC8_9_MASK equ 0040h


TXREG equ 0019h


RCREG equ 001Ah


CCPR2L equ 001Bh


CCPR2H equ 001Ch


CCP2CON equ 001Dh

CCP2CON_CCP2M_POSN equ 0000h
CCP2CON_CCP2M_POSITION equ 0000h
CCP2CON_CCP2M_SIZE equ 0004h
CCP2CON_CCP2M_LENGTH equ 0004h
CCP2CON_CCP2M_MASK equ 000Fh
CCP2CON_CCP2Y_POSN equ 0004h
CCP2CON_CCP2Y_POSITION equ 0004h
CCP2CON_CCP2Y_SIZE equ 0001h
CCP2CON_CCP2Y_LENGTH equ 0001h
CCP2CON_CCP2Y_MASK equ 0010h
CCP2CON_CCP2X_POSN equ 0005h
CCP2CON_CCP2X_POSITION equ 0005h
CCP2CON_CCP2X_SIZE equ 0001h
CCP2CON_CCP2X_LENGTH equ 0001h
CCP2CON_CCP2X_MASK equ 0020h
CCP2CON_CCP2M0_POSN equ 0000h
CCP2CON_CCP2M0_POSITION equ 0000h
CCP2CON_CCP2M0_SIZE equ 0001h
CCP2CON_CCP2M0_LENGTH equ 0001h
CCP2CON_CCP2M0_MASK equ 0001h
CCP2CON_CCP2M1_POSN equ 0001h
CCP2CON_CCP2M1_POSITION equ 0001h
CCP2CON_CCP2M1_SIZE equ 0001h
CCP2CON_CCP2M1_LENGTH equ 0001h
CCP2CON_CCP2M1_MASK equ 0002h
CCP2CON_CCP2M2_POSN equ 0002h
CCP2CON_CCP2M2_POSITION equ 0002h
CCP2CON_CCP2M2_SIZE equ 0001h
CCP2CON_CCP2M2_LENGTH equ 0001h
CCP2CON_CCP2M2_MASK equ 0004h
CCP2CON_CCP2M3_POSN equ 0003h
CCP2CON_CCP2M3_POSITION equ 0003h
CCP2CON_CCP2M3_SIZE equ 0001h
CCP2CON_CCP2M3_LENGTH equ 0001h
CCP2CON_CCP2M3_MASK equ 0008h


ADRESH equ 001Eh


ADCON0 equ 001Fh

ADCON0_ADON_POSN equ 0000h
ADCON0_ADON_POSITION equ 0000h
ADCON0_ADON_SIZE equ 0001h
ADCON0_ADON_LENGTH equ 0001h
ADCON0_ADON_MASK equ 0001h
ADCON0_CHS3_POSN equ 0001h
ADCON0_CHS3_POSITION equ 0001h
ADCON0_CHS3_SIZE equ 0001h
ADCON0_CHS3_LENGTH equ 0001h
ADCON0_CHS3_MASK equ 0002h
ADCON0_GO_nDONE_POSN equ 0002h
ADCON0_GO_nDONE_POSITION equ 0002h
ADCON0_GO_nDONE_SIZE equ 0001h
ADCON0_GO_nDONE_LENGTH equ 0001h
ADCON0_GO_nDONE_MASK equ 0004h
ADCON0_CHS_POSN equ 0003h
ADCON0_CHS_POSITION equ 0003h
ADCON0_CHS_SIZE equ 0003h
ADCON0_CHS_LENGTH equ 0003h
ADCON0_CHS_MASK equ 0038h
ADCON0_ADCS_POSN equ 0006h
ADCON0_ADCS_POSITION equ 0006h
ADCON0_ADCS_SIZE equ 0002h
ADCON0_ADCS_LENGTH equ 0002h
ADCON0_ADCS_MASK equ 00C0h
ADCON0_GO_POSN equ 0002h
ADCON0_GO_POSITION equ 0002h
ADCON0_GO_SIZE equ 0001h
ADCON0_GO_LENGTH equ 0001h
ADCON0_GO_MASK equ 0004h
ADCON0_CHS0_POSN equ 0003h
ADCON0_CHS0_POSITION equ 0003h
ADCON0_CHS0_SIZE equ 0001h
ADCON0_CHS0_LENGTH equ 0001h
ADCON0_CHS0_MASK equ 0008h
ADCON0_CHS1_POSN equ 0004h
ADCON0_CHS1_POSITION equ 0004h
ADCON0_CHS1_SIZE equ 0001h
ADCON0_CHS1_LENGTH equ 0001h
ADCON0_CHS1_MASK equ 0010h
ADCON0_CHS2_POSN equ 0005h
ADCON0_CHS2_POSITION equ 0005h
ADCON0_CHS2_SIZE equ 0001h
ADCON0_CHS2_LENGTH equ 0001h
ADCON0_CHS2_MASK equ 0020h
ADCON0_ADCS0_POSN equ 0006h
ADCON0_ADCS0_POSITION equ 0006h
ADCON0_ADCS0_SIZE equ 0001h
ADCON0_ADCS0_LENGTH equ 0001h
ADCON0_ADCS0_MASK equ 0040h
ADCON0_ADCS1_POSN equ 0007h
ADCON0_ADCS1_POSITION equ 0007h
ADCON0_ADCS1_SIZE equ 0001h
ADCON0_ADCS1_LENGTH equ 0001h
ADCON0_ADCS1_MASK equ 0080h
ADCON0_nDONE_POSN equ 0002h
ADCON0_nDONE_POSITION equ 0002h
ADCON0_nDONE_SIZE equ 0001h
ADCON0_nDONE_LENGTH equ 0001h
ADCON0_nDONE_MASK equ 0004h
ADCON0_GO_DONE_POSN equ 0002h
ADCON0_GO_DONE_POSITION equ 0002h
ADCON0_GO_DONE_SIZE equ 0001h
ADCON0_GO_DONE_LENGTH equ 0001h
ADCON0_GO_DONE_MASK equ 0004h


OPTION_REG equ 0081h

OPTION_REG_PS_POSN equ 0000h
OPTION_REG_PS_POSITION equ 0000h
OPTION_REG_PS_SIZE equ 0003h
OPTION_REG_PS_LENGTH equ 0003h
OPTION_REG_PS_MASK equ 0007h
OPTION_REG_PSA_POSN equ 0003h
OPTION_REG_PSA_POSITION equ 0003h
OPTION_REG_PSA_SIZE equ 0001h
OPTION_REG_PSA_LENGTH equ 0001h
OPTION_REG_PSA_MASK equ 0008h
OPTION_REG_T0SE_POSN equ 0004h
OPTION_REG_T0SE_POSITION equ 0004h
OPTION_REG_T0SE_SIZE equ 0001h
OPTION_REG_T0SE_LENGTH equ 0001h
OPTION_REG_T0SE_MASK equ 0010h
OPTION_REG_T0CS_POSN equ 0005h
OPTION_REG_T0CS_POSITION equ 0005h
OPTION_REG_T0CS_SIZE equ 0001h
OPTION_REG_T0CS_LENGTH equ 0001h
OPTION_REG_T0CS_MASK equ 0020h
OPTION_REG_INTEDG_POSN equ 0006h
OPTION_REG_INTEDG_POSITION equ 0006h
OPTION_REG_INTEDG_SIZE equ 0001h
OPTION_REG_INTEDG_LENGTH equ 0001h
OPTION_REG_INTEDG_MASK equ 0040h
OPTION_REG_nRBPU_POSN equ 0007h
OPTION_REG_nRBPU_POSITION equ 0007h
OPTION_REG_nRBPU_SIZE equ 0001h
OPTION_REG_nRBPU_LENGTH equ 0001h
OPTION_REG_nRBPU_MASK equ 0080h
OPTION_REG_PS0_POSN equ 0000h
OPTION_REG_PS0_POSITION equ 0000h
OPTION_REG_PS0_SIZE equ 0001h
OPTION_REG_PS0_LENGTH equ 0001h
OPTION_REG_PS0_MASK equ 0001h
OPTION_REG_PS1_POSN equ 0001h
OPTION_REG_PS1_POSITION equ 0001h
OPTION_REG_PS1_SIZE equ 0001h
OPTION_REG_PS1_LENGTH equ 0001h
OPTION_REG_PS1_MASK equ 0002h
OPTION_REG_PS2_POSN equ 0002h
OPTION_REG_PS2_POSITION equ 0002h
OPTION_REG_PS2_SIZE equ 0001h
OPTION_REG_PS2_LENGTH equ 0001h
OPTION_REG_PS2_MASK equ 0004h


TRISA equ 0085h

TRISA_TRISA0_POSN equ 0000h
TRISA_TRISA0_POSITION equ 0000h
TRISA_TRISA0_SIZE equ 0001h
TRISA_TRISA0_LENGTH equ 0001h
TRISA_TRISA0_MASK equ 0001h
TRISA_TRISA1_POSN equ 0001h
TRISA_TRISA1_POSITION equ 0001h
TRISA_TRISA1_SIZE equ 0001h
TRISA_TRISA1_LENGTH equ 0001h
TRISA_TRISA1_MASK equ 0002h
TRISA_TRISA2_POSN equ 0002h
TRISA_TRISA2_POSITION equ 0002h
TRISA_TRISA2_SIZE equ 0001h
TRISA_TRISA2_LENGTH equ 0001h
TRISA_TRISA2_MASK equ 0004h
TRISA_TRISA3_POSN equ 0003h
TRISA_TRISA3_POSITION equ 0003h
TRISA_TRISA3_SIZE equ 0001h
TRISA_TRISA3_LENGTH equ 0001h
TRISA_TRISA3_MASK equ 0008h
TRISA_TRISA4_POSN equ 0004h
TRISA_TRISA4_POSITION equ 0004h
TRISA_TRISA4_SIZE equ 0001h
TRISA_TRISA4_LENGTH equ 0001h
TRISA_TRISA4_MASK equ 0010h
TRISA_TRISA5_POSN equ 0005h
TRISA_TRISA5_POSITION equ 0005h
TRISA_TRISA5_SIZE equ 0001h
TRISA_TRISA5_LENGTH equ 0001h
TRISA_TRISA5_MASK equ 0020h
TRISA_TRISA6_POSN equ 0006h
TRISA_TRISA6_POSITION equ 0006h
TRISA_TRISA6_SIZE equ 0001h
TRISA_TRISA6_LENGTH equ 0001h
TRISA_TRISA6_MASK equ 0040h
TRISA_TRISA7_POSN equ 0007h
TRISA_TRISA7_POSITION equ 0007h
TRISA_TRISA7_SIZE equ 0001h
TRISA_TRISA7_LENGTH equ 0001h
TRISA_TRISA7_MASK equ 0080h


TRISB equ 0086h

TRISB_TRISB0_POSN equ 0000h
TRISB_TRISB0_POSITION equ 0000h
TRISB_TRISB0_SIZE equ 0001h
TRISB_TRISB0_LENGTH equ 0001h
TRISB_TRISB0_MASK equ 0001h
TRISB_TRISB1_POSN equ 0001h
TRISB_TRISB1_POSITION equ 0001h
TRISB_TRISB1_SIZE equ 0001h
TRISB_TRISB1_LENGTH equ 0001h
TRISB_TRISB1_MASK equ 0002h
TRISB_TRISB2_POSN equ 0002h
TRISB_TRISB2_POSITION equ 0002h
TRISB_TRISB2_SIZE equ 0001h
TRISB_TRISB2_LENGTH equ 0001h
TRISB_TRISB2_MASK equ 0004h
TRISB_TRISB3_POSN equ 0003h
TRISB_TRISB3_POSITION equ 0003h
TRISB_TRISB3_SIZE equ 0001h
TRISB_TRISB3_LENGTH equ 0001h
TRISB_TRISB3_MASK equ 0008h
TRISB_TRISB4_POSN equ 0004h
TRISB_TRISB4_POSITION equ 0004h
TRISB_TRISB4_SIZE equ 0001h
TRISB_TRISB4_LENGTH equ 0001h
TRISB_TRISB4_MASK equ 0010h
TRISB_TRISB5_POSN equ 0005h
TRISB_TRISB5_POSITION equ 0005h
TRISB_TRISB5_SIZE equ 0001h
TRISB_TRISB5_LENGTH equ 0001h
TRISB_TRISB5_MASK equ 0020h
TRISB_TRISB6_POSN equ 0006h
TRISB_TRISB6_POSITION equ 0006h
TRISB_TRISB6_SIZE equ 0001h
TRISB_TRISB6_LENGTH equ 0001h
TRISB_TRISB6_MASK equ 0040h
TRISB_TRISB7_POSN equ 0007h
TRISB_TRISB7_POSITION equ 0007h
TRISB_TRISB7_SIZE equ 0001h
TRISB_TRISB7_LENGTH equ 0001h
TRISB_TRISB7_MASK equ 0080h


TRISC equ 0087h

TRISC_TRISC0_POSN equ 0000h
TRISC_TRISC0_POSITION equ 0000h
TRISC_TRISC0_SIZE equ 0001h
TRISC_TRISC0_LENGTH equ 0001h
TRISC_TRISC0_MASK equ 0001h
TRISC_TRISC1_POSN equ 0001h
TRISC_TRISC1_POSITION equ 0001h
TRISC_TRISC1_SIZE equ 0001h
TRISC_TRISC1_LENGTH equ 0001h
TRISC_TRISC1_MASK equ 0002h
TRISC_TRISC2_POSN equ 0002h
TRISC_TRISC2_POSITION equ 0002h
TRISC_TRISC2_SIZE equ 0001h
TRISC_TRISC2_LENGTH equ 0001h
TRISC_TRISC2_MASK equ 0004h
TRISC_TRISC3_POSN equ 0003h
TRISC_TRISC3_POSITION equ 0003h
TRISC_TRISC3_SIZE equ 0001h
TRISC_TRISC3_LENGTH equ 0001h
TRISC_TRISC3_MASK equ 0008h
TRISC_TRISC4_POSN equ 0004h
TRISC_TRISC4_POSITION equ 0004h
TRISC_TRISC4_SIZE equ 0001h
TRISC_TRISC4_LENGTH equ 0001h
TRISC_TRISC4_MASK equ 0010h
TRISC_TRISC5_POSN equ 0005h
TRISC_TRISC5_POSITION equ 0005h
TRISC_TRISC5_SIZE equ 0001h
TRISC_TRISC5_LENGTH equ 0001h
TRISC_TRISC5_MASK equ 0020h
TRISC_TRISC6_POSN equ 0006h
TRISC_TRISC6_POSITION equ 0006h
TRISC_TRISC6_SIZE equ 0001h
TRISC_TRISC6_LENGTH equ 0001h
TRISC_TRISC6_MASK equ 0040h
TRISC_TRISC7_POSN equ 0007h
TRISC_TRISC7_POSITION equ 0007h
TRISC_TRISC7_SIZE equ 0001h
TRISC_TRISC7_LENGTH equ 0001h
TRISC_TRISC7_MASK equ 0080h


TRISD equ 0088h

TRISD_TRISD0_POSN equ 0000h
TRISD_TRISD0_POSITION equ 0000h
TRISD_TRISD0_SIZE equ 0001h
TRISD_TRISD0_LENGTH equ 0001h
TRISD_TRISD0_MASK equ 0001h
TRISD_TRISD1_POSN equ 0001h
TRISD_TRISD1_POSITION equ 0001h
TRISD_TRISD1_SIZE equ 0001h
TRISD_TRISD1_LENGTH equ 0001h
TRISD_TRISD1_MASK equ 0002h
TRISD_TRISD2_POSN equ 0002h
TRISD_TRISD2_POSITION equ 0002h
TRISD_TRISD2_SIZE equ 0001h
TRISD_TRISD2_LENGTH equ 0001h
TRISD_TRISD2_MASK equ 0004h
TRISD_TRISD3_POSN equ 0003h
TRISD_TRISD3_POSITION equ 0003h
TRISD_TRISD3_SIZE equ 0001h
TRISD_TRISD3_LENGTH equ 0001h
TRISD_TRISD3_MASK equ 0008h
TRISD_TRISD4_POSN equ 0004h
TRISD_TRISD4_POSITION equ 0004h
TRISD_TRISD4_SIZE equ 0001h
TRISD_TRISD4_LENGTH equ 0001h
TRISD_TRISD4_MASK equ 0010h
TRISD_TRISD5_POSN equ 0005h
TRISD_TRISD5_POSITION equ 0005h
TRISD_TRISD5_SIZE equ 0001h
TRISD_TRISD5_LENGTH equ 0001h
TRISD_TRISD5_MASK equ 0020h
TRISD_TRISD6_POSN equ 0006h
TRISD_TRISD6_POSITION equ 0006h
TRISD_TRISD6_SIZE equ 0001h
TRISD_TRISD6_LENGTH equ 0001h
TRISD_TRISD6_MASK equ 0040h
TRISD_TRISD7_POSN equ 0007h
TRISD_TRISD7_POSITION equ 0007h
TRISD_TRISD7_SIZE equ 0001h
TRISD_TRISD7_LENGTH equ 0001h
TRISD_TRISD7_MASK equ 0080h


TRISE equ 0089h

TRISE_TRISE0_POSN equ 0000h
TRISE_TRISE0_POSITION equ 0000h
TRISE_TRISE0_SIZE equ 0001h
TRISE_TRISE0_LENGTH equ 0001h
TRISE_TRISE0_MASK equ 0001h
TRISE_TRISE1_POSN equ 0001h
TRISE_TRISE1_POSITION equ 0001h
TRISE_TRISE1_SIZE equ 0001h
TRISE_TRISE1_LENGTH equ 0001h
TRISE_TRISE1_MASK equ 0002h
TRISE_TRISE2_POSN equ 0002h
TRISE_TRISE2_POSITION equ 0002h
TRISE_TRISE2_SIZE equ 0001h
TRISE_TRISE2_LENGTH equ 0001h
TRISE_TRISE2_MASK equ 0004h
TRISE_TRISE3_POSN equ 0003h
TRISE_TRISE3_POSITION equ 0003h
TRISE_TRISE3_SIZE equ 0001h
TRISE_TRISE3_LENGTH equ 0001h
TRISE_TRISE3_MASK equ 0008h
TRISE_PSPMODE_POSN equ 0004h
TRISE_PSPMODE_POSITION equ 0004h
TRISE_PSPMODE_SIZE equ 0001h
TRISE_PSPMODE_LENGTH equ 0001h
TRISE_PSPMODE_MASK equ 0010h
TRISE_IBOV_POSN equ 0005h
TRISE_IBOV_POSITION equ 0005h
TRISE_IBOV_SIZE equ 0001h
TRISE_IBOV_LENGTH equ 0001h
TRISE_IBOV_MASK equ 0020h
TRISE_OBF_POSN equ 0006h
TRISE_OBF_POSITION equ 0006h
TRISE_OBF_SIZE equ 0001h
TRISE_OBF_LENGTH equ 0001h
TRISE_OBF_MASK equ 0040h
TRISE_IBF_POSN equ 0007h
TRISE_IBF_POSITION equ 0007h
TRISE_IBF_SIZE equ 0001h
TRISE_IBF_LENGTH equ 0001h
TRISE_IBF_MASK equ 0080h


PIE1 equ 008Ch

PIE1_TMR1IE_POSN equ 0000h
PIE1_TMR1IE_POSITION equ 0000h
PIE1_TMR1IE_SIZE equ 0001h
PIE1_TMR1IE_LENGTH equ 0001h
PIE1_TMR1IE_MASK equ 0001h
PIE1_TMR2IE_POSN equ 0001h
PIE1_TMR2IE_POSITION equ 0001h
PIE1_TMR2IE_SIZE equ 0001h
PIE1_TMR2IE_LENGTH equ 0001h
PIE1_TMR2IE_MASK equ 0002h
PIE1_CCP1IE_POSN equ 0002h
PIE1_CCP1IE_POSITION equ 0002h
PIE1_CCP1IE_SIZE equ 0001h
PIE1_CCP1IE_LENGTH equ 0001h
PIE1_CCP1IE_MASK equ 0004h
PIE1_SSPIE_POSN equ 0003h
PIE1_SSPIE_POSITION equ 0003h
PIE1_SSPIE_SIZE equ 0001h
PIE1_SSPIE_LENGTH equ 0001h
PIE1_SSPIE_MASK equ 0008h
PIE1_TXIE_POSN equ 0004h
PIE1_TXIE_POSITION equ 0004h
PIE1_TXIE_SIZE equ 0001h
PIE1_TXIE_LENGTH equ 0001h
PIE1_TXIE_MASK equ 0010h
PIE1_RCIE_POSN equ 0005h
PIE1_RCIE_POSITION equ 0005h
PIE1_RCIE_SIZE equ 0001h
PIE1_RCIE_LENGTH equ 0001h
PIE1_RCIE_MASK equ 0020h
PIE1_ADIE_POSN equ 0006h
PIE1_ADIE_POSITION equ 0006h
PIE1_ADIE_SIZE equ 0001h
PIE1_ADIE_LENGTH equ 0001h
PIE1_ADIE_MASK equ 0040h
PIE1_PSPIE_POSN equ 0007h
PIE1_PSPIE_POSITION equ 0007h
PIE1_PSPIE_SIZE equ 0001h
PIE1_PSPIE_LENGTH equ 0001h
PIE1_PSPIE_MASK equ 0080h


PIE2 equ 008Dh

PIE2_CCP2IE_POSN equ 0000h
PIE2_CCP2IE_POSITION equ 0000h
PIE2_CCP2IE_SIZE equ 0001h
PIE2_CCP2IE_LENGTH equ 0001h
PIE2_CCP2IE_MASK equ 0001h
PIE2_CCP3IE_POSN equ 0001h
PIE2_CCP3IE_POSITION equ 0001h
PIE2_CCP3IE_SIZE equ 0001h
PIE2_CCP3IE_LENGTH equ 0001h
PIE2_CCP3IE_MASK equ 0002h
PIE2_BCLIE_POSN equ 0003h
PIE2_BCLIE_POSITION equ 0003h
PIE2_BCLIE_SIZE equ 0001h
PIE2_BCLIE_LENGTH equ 0001h
PIE2_BCLIE_MASK equ 0008h
PIE2_LVDIE_POSN equ 0005h
PIE2_LVDIE_POSITION equ 0005h
PIE2_LVDIE_SIZE equ 0001h
PIE2_LVDIE_LENGTH equ 0001h
PIE2_LVDIE_MASK equ 0020h
PIE2_CMIE_POSN equ 0006h
PIE2_CMIE_POSITION equ 0006h
PIE2_CMIE_SIZE equ 0001h
PIE2_CMIE_LENGTH equ 0001h
PIE2_CMIE_MASK equ 0040h
PIE2_OSFIE_POSN equ 0007h
PIE2_OSFIE_POSITION equ 0007h
PIE2_OSFIE_SIZE equ 0001h
PIE2_OSFIE_LENGTH equ 0001h
PIE2_OSFIE_MASK equ 0080h


PCON equ 008Eh

PCON_nBOR_POSN equ 0000h
PCON_nBOR_POSITION equ 0000h
PCON_nBOR_SIZE equ 0001h
PCON_nBOR_LENGTH equ 0001h
PCON_nBOR_MASK equ 0001h
PCON_nPOR_POSN equ 0001h
PCON_nPOR_POSITION equ 0001h
PCON_nPOR_SIZE equ 0001h
PCON_nPOR_LENGTH equ 0001h
PCON_nPOR_MASK equ 0002h
PCON_SBOREN_POSN equ 0002h
PCON_SBOREN_POSITION equ 0002h
PCON_SBOREN_SIZE equ 0001h
PCON_SBOREN_LENGTH equ 0001h
PCON_SBOREN_MASK equ 0004h
PCON_nBO_POSN equ 0000h
PCON_nBO_POSITION equ 0000h
PCON_nBO_SIZE equ 0001h
PCON_nBO_LENGTH equ 0001h
PCON_nBO_MASK equ 0001h


OSCCON equ 008Fh

OSCCON_SCS_POSN equ 0000h
OSCCON_SCS_POSITION equ 0000h
OSCCON_SCS_SIZE equ 0002h
OSCCON_SCS_LENGTH equ 0002h
OSCCON_SCS_MASK equ 0003h
OSCCON_IOFS_POSN equ 0002h
OSCCON_IOFS_POSITION equ 0002h
OSCCON_IOFS_SIZE equ 0001h
OSCCON_IOFS_LENGTH equ 0001h
OSCCON_IOFS_MASK equ 0004h
OSCCON_OSTS_POSN equ 0003h
OSCCON_OSTS_POSITION equ 0003h
OSCCON_OSTS_SIZE equ 0001h
OSCCON_OSTS_LENGTH equ 0001h
OSCCON_OSTS_MASK equ 0008h
OSCCON_IRCF_POSN equ 0004h
OSCCON_IRCF_POSITION equ 0004h
OSCCON_IRCF_SIZE equ 0003h
OSCCON_IRCF_LENGTH equ 0003h
OSCCON_IRCF_MASK equ 0070h
OSCCON_SCS0_POSN equ 0000h
OSCCON_SCS0_POSITION equ 0000h
OSCCON_SCS0_SIZE equ 0001h
OSCCON_SCS0_LENGTH equ 0001h
OSCCON_SCS0_MASK equ 0001h
OSCCON_SCS1_POSN equ 0001h
OSCCON_SCS1_POSITION equ 0001h
OSCCON_SCS1_SIZE equ 0001h
OSCCON_SCS1_LENGTH equ 0001h
OSCCON_SCS1_MASK equ 0002h
OSCCON_IRCF0_POSN equ 0004h
OSCCON_IRCF0_POSITION equ 0004h
OSCCON_IRCF0_SIZE equ 0001h
OSCCON_IRCF0_LENGTH equ 0001h
OSCCON_IRCF0_MASK equ 0010h
OSCCON_IRCF1_POSN equ 0005h
OSCCON_IRCF1_POSITION equ 0005h
OSCCON_IRCF1_SIZE equ 0001h
OSCCON_IRCF1_LENGTH equ 0001h
OSCCON_IRCF1_MASK equ 0020h
OSCCON_IRCF2_POSN equ 0006h
OSCCON_IRCF2_POSITION equ 0006h
OSCCON_IRCF2_SIZE equ 0001h
OSCCON_IRCF2_LENGTH equ 0001h
OSCCON_IRCF2_MASK equ 0040h


OSCTUNE equ 0090h

OSCTUNE_TUN_POSN equ 0000h
OSCTUNE_TUN_POSITION equ 0000h
OSCTUNE_TUN_SIZE equ 0006h
OSCTUNE_TUN_LENGTH equ 0006h
OSCTUNE_TUN_MASK equ 003Fh
OSCTUNE_TUN0_POSN equ 0000h
OSCTUNE_TUN0_POSITION equ 0000h
OSCTUNE_TUN0_SIZE equ 0001h
OSCTUNE_TUN0_LENGTH equ 0001h
OSCTUNE_TUN0_MASK equ 0001h
OSCTUNE_TUN1_POSN equ 0001h
OSCTUNE_TUN1_POSITION equ 0001h
OSCTUNE_TUN1_SIZE equ 0001h
OSCTUNE_TUN1_LENGTH equ 0001h
OSCTUNE_TUN1_MASK equ 0002h
OSCTUNE_TUN2_POSN equ 0002h
OSCTUNE_TUN2_POSITION equ 0002h
OSCTUNE_TUN2_SIZE equ 0001h
OSCTUNE_TUN2_LENGTH equ 0001h
OSCTUNE_TUN2_MASK equ 0004h
OSCTUNE_TUN3_POSN equ 0003h
OSCTUNE_TUN3_POSITION equ 0003h
OSCTUNE_TUN3_SIZE equ 0001h
OSCTUNE_TUN3_LENGTH equ 0001h
OSCTUNE_TUN3_MASK equ 0008h
OSCTUNE_TUN4_POSN equ 0004h
OSCTUNE_TUN4_POSITION equ 0004h
OSCTUNE_TUN4_SIZE equ 0001h
OSCTUNE_TUN4_LENGTH equ 0001h
OSCTUNE_TUN4_MASK equ 0010h
OSCTUNE_TUN5_POSN equ 0005h
OSCTUNE_TUN5_POSITION equ 0005h
OSCTUNE_TUN5_SIZE equ 0001h
OSCTUNE_TUN5_LENGTH equ 0001h
OSCTUNE_TUN5_MASK equ 0020h


SSPCON2 equ 0091h

SSPCON2_SEN_POSN equ 0000h
SSPCON2_SEN_POSITION equ 0000h
SSPCON2_SEN_SIZE equ 0001h
SSPCON2_SEN_LENGTH equ 0001h
SSPCON2_SEN_MASK equ 0001h
SSPCON2_RSEN_POSN equ 0001h
SSPCON2_RSEN_POSITION equ 0001h
SSPCON2_RSEN_SIZE equ 0001h
SSPCON2_RSEN_LENGTH equ 0001h
SSPCON2_RSEN_MASK equ 0002h
SSPCON2_PEN_POSN equ 0002h
SSPCON2_PEN_POSITION equ 0002h
SSPCON2_PEN_SIZE equ 0001h
SSPCON2_PEN_LENGTH equ 0001h
SSPCON2_PEN_MASK equ 0004h
SSPCON2_RCEN_POSN equ 0003h
SSPCON2_RCEN_POSITION equ 0003h
SSPCON2_RCEN_SIZE equ 0001h
SSPCON2_RCEN_LENGTH equ 0001h
SSPCON2_RCEN_MASK equ 0008h
SSPCON2_ACKEN_POSN equ 0004h
SSPCON2_ACKEN_POSITION equ 0004h
SSPCON2_ACKEN_SIZE equ 0001h
SSPCON2_ACKEN_LENGTH equ 0001h
SSPCON2_ACKEN_MASK equ 0010h
SSPCON2_ACKDT_POSN equ 0005h
SSPCON2_ACKDT_POSITION equ 0005h
SSPCON2_ACKDT_SIZE equ 0001h
SSPCON2_ACKDT_LENGTH equ 0001h
SSPCON2_ACKDT_MASK equ 0020h
SSPCON2_ACKSTAT_POSN equ 0006h
SSPCON2_ACKSTAT_POSITION equ 0006h
SSPCON2_ACKSTAT_SIZE equ 0001h
SSPCON2_ACKSTAT_LENGTH equ 0001h
SSPCON2_ACKSTAT_MASK equ 0040h
SSPCON2_GCEN_POSN equ 0007h
SSPCON2_GCEN_POSITION equ 0007h
SSPCON2_GCEN_SIZE equ 0001h
SSPCON2_GCEN_LENGTH equ 0001h
SSPCON2_GCEN_MASK equ 0080h


PR2 equ 0092h


SSPADD equ 0093h


SSPSTAT equ 0094h

SSPSTAT_BF_POSN equ 0000h
SSPSTAT_BF_POSITION equ 0000h
SSPSTAT_BF_SIZE equ 0001h
SSPSTAT_BF_LENGTH equ 0001h
SSPSTAT_BF_MASK equ 0001h
SSPSTAT_UA_POSN equ 0001h
SSPSTAT_UA_POSITION equ 0001h
SSPSTAT_UA_SIZE equ 0001h
SSPSTAT_UA_LENGTH equ 0001h
SSPSTAT_UA_MASK equ 0002h
SSPSTAT_R_nW_POSN equ 0002h
SSPSTAT_R_nW_POSITION equ 0002h
SSPSTAT_R_nW_SIZE equ 0001h
SSPSTAT_R_nW_LENGTH equ 0001h
SSPSTAT_R_nW_MASK equ 0004h
SSPSTAT_S_POSN equ 0003h
SSPSTAT_S_POSITION equ 0003h
SSPSTAT_S_SIZE equ 0001h
SSPSTAT_S_LENGTH equ 0001h
SSPSTAT_S_MASK equ 0008h
SSPSTAT_P_POSN equ 0004h
SSPSTAT_P_POSITION equ 0004h
SSPSTAT_P_SIZE equ 0001h
SSPSTAT_P_LENGTH equ 0001h
SSPSTAT_P_MASK equ 0010h
SSPSTAT_D_nA_POSN equ 0005h
SSPSTAT_D_nA_POSITION equ 0005h
SSPSTAT_D_nA_SIZE equ 0001h
SSPSTAT_D_nA_LENGTH equ 0001h
SSPSTAT_D_nA_MASK equ 0020h
SSPSTAT_CKE_POSN equ 0006h
SSPSTAT_CKE_POSITION equ 0006h
SSPSTAT_CKE_SIZE equ 0001h
SSPSTAT_CKE_LENGTH equ 0001h
SSPSTAT_CKE_MASK equ 0040h
SSPSTAT_SMP_POSN equ 0007h
SSPSTAT_SMP_POSITION equ 0007h
SSPSTAT_SMP_SIZE equ 0001h
SSPSTAT_SMP_LENGTH equ 0001h
SSPSTAT_SMP_MASK equ 0080h
SSPSTAT_R_POSN equ 0002h
SSPSTAT_R_POSITION equ 0002h
SSPSTAT_R_SIZE equ 0001h
SSPSTAT_R_LENGTH equ 0001h
SSPSTAT_R_MASK equ 0004h
SSPSTAT_D_POSN equ 0005h
SSPSTAT_D_POSITION equ 0005h
SSPSTAT_D_SIZE equ 0001h
SSPSTAT_D_LENGTH equ 0001h
SSPSTAT_D_MASK equ 0020h
SSPSTAT_I2C_READ_POSN equ 0002h
SSPSTAT_I2C_READ_POSITION equ 0002h
SSPSTAT_I2C_READ_SIZE equ 0001h
SSPSTAT_I2C_READ_LENGTH equ 0001h
SSPSTAT_I2C_READ_MASK equ 0004h
SSPSTAT_I2C_START_POSN equ 0003h
SSPSTAT_I2C_START_POSITION equ 0003h
SSPSTAT_I2C_START_SIZE equ 0001h
SSPSTAT_I2C_START_LENGTH equ 0001h
SSPSTAT_I2C_START_MASK equ 0008h
SSPSTAT_I2C_STOP_POSN equ 0004h
SSPSTAT_I2C_STOP_POSITION equ 0004h
SSPSTAT_I2C_STOP_SIZE equ 0001h
SSPSTAT_I2C_STOP_LENGTH equ 0001h
SSPSTAT_I2C_STOP_MASK equ 0010h
SSPSTAT_I2C_DATA_POSN equ 0005h
SSPSTAT_I2C_DATA_POSITION equ 0005h
SSPSTAT_I2C_DATA_SIZE equ 0001h
SSPSTAT_I2C_DATA_LENGTH equ 0001h
SSPSTAT_I2C_DATA_MASK equ 0020h
SSPSTAT_nW_POSN equ 0002h
SSPSTAT_nW_POSITION equ 0002h
SSPSTAT_nW_SIZE equ 0001h
SSPSTAT_nW_LENGTH equ 0001h
SSPSTAT_nW_MASK equ 0004h
SSPSTAT_nA_POSN equ 0005h
SSPSTAT_nA_POSITION equ 0005h
SSPSTAT_nA_SIZE equ 0001h
SSPSTAT_nA_LENGTH equ 0001h
SSPSTAT_nA_MASK equ 0020h
SSPSTAT_nWRITE_POSN equ 0002h
SSPSTAT_nWRITE_POSITION equ 0002h
SSPSTAT_nWRITE_SIZE equ 0001h
SSPSTAT_nWRITE_LENGTH equ 0001h
SSPSTAT_nWRITE_MASK equ 0004h
SSPSTAT_nADDRESS_POSN equ 0005h
SSPSTAT_nADDRESS_POSITION equ 0005h
SSPSTAT_nADDRESS_SIZE equ 0001h
SSPSTAT_nADDRESS_LENGTH equ 0001h
SSPSTAT_nADDRESS_MASK equ 0020h
SSPSTAT_R_W_POSN equ 0002h
SSPSTAT_R_W_POSITION equ 0002h
SSPSTAT_R_W_SIZE equ 0001h
SSPSTAT_R_W_LENGTH equ 0001h
SSPSTAT_R_W_MASK equ 0004h
SSPSTAT_D_A_POSN equ 0005h
SSPSTAT_D_A_POSITION equ 0005h
SSPSTAT_D_A_SIZE equ 0001h
SSPSTAT_D_A_LENGTH equ 0001h
SSPSTAT_D_A_MASK equ 0020h
SSPSTAT_READ_WRITE_POSN equ 0002h
SSPSTAT_READ_WRITE_POSITION equ 0002h
SSPSTAT_READ_WRITE_SIZE equ 0001h
SSPSTAT_READ_WRITE_LENGTH equ 0001h
SSPSTAT_READ_WRITE_MASK equ 0004h
SSPSTAT_DATA_ADDRESS_POSN equ 0005h
SSPSTAT_DATA_ADDRESS_POSITION equ 0005h
SSPSTAT_DATA_ADDRESS_SIZE equ 0001h
SSPSTAT_DATA_ADDRESS_LENGTH equ 0001h
SSPSTAT_DATA_ADDRESS_MASK equ 0020h


CCPR3L equ 0095h

CCPR3L_CCPR3L_POSN equ 0000h
CCPR3L_CCPR3L_POSITION equ 0000h
CCPR3L_CCPR3L_SIZE equ 0008h
CCPR3L_CCPR3L_LENGTH equ 0008h
CCPR3L_CCPR3L_MASK equ 00FFh


CCPR3H equ 0096h

CCPR3H_CCPR3H_POSN equ 0000h
CCPR3H_CCPR3H_POSITION equ 0000h
CCPR3H_CCPR3H_SIZE equ 0008h
CCPR3H_CCPR3H_LENGTH equ 0008h
CCPR3H_CCPR3H_MASK equ 00FFh


CCP3CON equ 0097h

CCP3CON_CCP3M_POSN equ 0000h
CCP3CON_CCP3M_POSITION equ 0000h
CCP3CON_CCP3M_SIZE equ 0004h
CCP3CON_CCP3M_LENGTH equ 0004h
CCP3CON_CCP3M_MASK equ 000Fh
CCP3CON_CCP3Y_POSN equ 0004h
CCP3CON_CCP3Y_POSITION equ 0004h
CCP3CON_CCP3Y_SIZE equ 0001h
CCP3CON_CCP3Y_LENGTH equ 0001h
CCP3CON_CCP3Y_MASK equ 0010h
CCP3CON_CCP3X_POSN equ 0005h
CCP3CON_CCP3X_POSITION equ 0005h
CCP3CON_CCP3X_SIZE equ 0001h
CCP3CON_CCP3X_LENGTH equ 0001h
CCP3CON_CCP3X_MASK equ 0020h
CCP3CON_CCP3M0_POSN equ 0000h
CCP3CON_CCP3M0_POSITION equ 0000h
CCP3CON_CCP3M0_SIZE equ 0001h
CCP3CON_CCP3M0_LENGTH equ 0001h
CCP3CON_CCP3M0_MASK equ 0001h
CCP3CON_CCP3M1_POSN equ 0001h
CCP3CON_CCP3M1_POSITION equ 0001h
CCP3CON_CCP3M1_SIZE equ 0001h
CCP3CON_CCP3M1_LENGTH equ 0001h
CCP3CON_CCP3M1_MASK equ 0002h
CCP3CON_CCP3M2_POSN equ 0002h
CCP3CON_CCP3M2_POSITION equ 0002h
CCP3CON_CCP3M2_SIZE equ 0001h
CCP3CON_CCP3M2_LENGTH equ 0001h
CCP3CON_CCP3M2_MASK equ 0004h
CCP3CON_CCP3M3_POSN equ 0003h
CCP3CON_CCP3M3_POSITION equ 0003h
CCP3CON_CCP3M3_SIZE equ 0001h
CCP3CON_CCP3M3_LENGTH equ 0001h
CCP3CON_CCP3M3_MASK equ 0008h


TXSTA equ 0098h

TXSTA_TX9D_POSN equ 0000h
TXSTA_TX9D_POSITION equ 0000h
TXSTA_TX9D_SIZE equ 0001h
TXSTA_TX9D_LENGTH equ 0001h
TXSTA_TX9D_MASK equ 0001h
TXSTA_TRMT_POSN equ 0001h
TXSTA_TRMT_POSITION equ 0001h
TXSTA_TRMT_SIZE equ 0001h
TXSTA_TRMT_LENGTH equ 0001h
TXSTA_TRMT_MASK equ 0002h
TXSTA_BRGH_POSN equ 0002h
TXSTA_BRGH_POSITION equ 0002h
TXSTA_BRGH_SIZE equ 0001h
TXSTA_BRGH_LENGTH equ 0001h
TXSTA_BRGH_MASK equ 0004h
TXSTA_SYNC_POSN equ 0004h
TXSTA_SYNC_POSITION equ 0004h
TXSTA_SYNC_SIZE equ 0001h
TXSTA_SYNC_LENGTH equ 0001h
TXSTA_SYNC_MASK equ 0010h
TXSTA_TXEN_POSN equ 0005h
TXSTA_TXEN_POSITION equ 0005h
TXSTA_TXEN_SIZE equ 0001h
TXSTA_TXEN_LENGTH equ 0001h
TXSTA_TXEN_MASK equ 0020h
TXSTA_TX9_POSN equ 0006h
TXSTA_TX9_POSITION equ 0006h
TXSTA_TX9_SIZE equ 0001h
TXSTA_TX9_LENGTH equ 0001h
TXSTA_TX9_MASK equ 0040h
TXSTA_CSRC_POSN equ 0007h
TXSTA_CSRC_POSITION equ 0007h
TXSTA_CSRC_SIZE equ 0001h
TXSTA_CSRC_LENGTH equ 0001h
TXSTA_CSRC_MASK equ 0080h
TXSTA_TXD8_POSN equ 0000h
TXSTA_TXD8_POSITION equ 0000h
TXSTA_TXD8_SIZE equ 0001h
TXSTA_TXD8_LENGTH equ 0001h
TXSTA_TXD8_MASK equ 0001h
TXSTA_nTX8_POSN equ 0006h
TXSTA_nTX8_POSITION equ 0006h
TXSTA_nTX8_SIZE equ 0001h
TXSTA_nTX8_LENGTH equ 0001h
TXSTA_nTX8_MASK equ 0040h
TXSTA_TX8_9_POSN equ 0006h
TXSTA_TX8_9_POSITION equ 0006h
TXSTA_TX8_9_SIZE equ 0001h
TXSTA_TX8_9_LENGTH equ 0001h
TXSTA_TX8_9_MASK equ 0040h


SPBRG equ 0099h


ADCON2 equ 009Bh

ADCON2_ACQT_POSN equ 0003h
ADCON2_ACQT_POSITION equ 0003h
ADCON2_ACQT_SIZE equ 0003h
ADCON2_ACQT_LENGTH equ 0003h
ADCON2_ACQT_MASK equ 0038h
ADCON2_ACQT0_POSN equ 0003h
ADCON2_ACQT0_POSITION equ 0003h
ADCON2_ACQT0_SIZE equ 0001h
ADCON2_ACQT0_LENGTH equ 0001h
ADCON2_ACQT0_MASK equ 0008h
ADCON2_ACQT1_POSN equ 0004h
ADCON2_ACQT1_POSITION equ 0004h
ADCON2_ACQT1_SIZE equ 0001h
ADCON2_ACQT1_LENGTH equ 0001h
ADCON2_ACQT1_MASK equ 0010h
ADCON2_ACQT2_POSN equ 0005h
ADCON2_ACQT2_POSITION equ 0005h
ADCON2_ACQT2_SIZE equ 0001h
ADCON2_ACQT2_LENGTH equ 0001h
ADCON2_ACQT2_MASK equ 0020h


CMCON equ 009Ch

CMCON_CM_POSN equ 0000h
CMCON_CM_POSITION equ 0000h
CMCON_CM_SIZE equ 0003h
CMCON_CM_LENGTH equ 0003h
CMCON_CM_MASK equ 0007h
CMCON_CIS_POSN equ 0003h
CMCON_CIS_POSITION equ 0003h
CMCON_CIS_SIZE equ 0001h
CMCON_CIS_LENGTH equ 0001h
CMCON_CIS_MASK equ 0008h
CMCON_C1INV_POSN equ 0004h
CMCON_C1INV_POSITION equ 0004h
CMCON_C1INV_SIZE equ 0001h
CMCON_C1INV_LENGTH equ 0001h
CMCON_C1INV_MASK equ 0010h
CMCON_C2INV_POSN equ 0005h
CMCON_C2INV_POSITION equ 0005h
CMCON_C2INV_SIZE equ 0001h
CMCON_C2INV_LENGTH equ 0001h
CMCON_C2INV_MASK equ 0020h
CMCON_C1OUT_POSN equ 0006h
CMCON_C1OUT_POSITION equ 0006h
CMCON_C1OUT_SIZE equ 0001h
CMCON_C1OUT_LENGTH equ 0001h
CMCON_C1OUT_MASK equ 0040h
CMCON_C2OUT_POSN equ 0007h
CMCON_C2OUT_POSITION equ 0007h
CMCON_C2OUT_SIZE equ 0001h
CMCON_C2OUT_LENGTH equ 0001h
CMCON_C2OUT_MASK equ 0080h
CMCON_CM0_POSN equ 0000h
CMCON_CM0_POSITION equ 0000h
CMCON_CM0_SIZE equ 0001h
CMCON_CM0_LENGTH equ 0001h
CMCON_CM0_MASK equ 0001h
CMCON_CM1_POSN equ 0001h
CMCON_CM1_POSITION equ 0001h
CMCON_CM1_SIZE equ 0001h
CMCON_CM1_LENGTH equ 0001h
CMCON_CM1_MASK equ 0002h
CMCON_CM2_POSN equ 0002h
CMCON_CM2_POSITION equ 0002h
CMCON_CM2_SIZE equ 0001h
CMCON_CM2_LENGTH equ 0001h
CMCON_CM2_MASK equ 0004h


CVRCON equ 009Dh

CVRCON_CVR_POSN equ 0000h
CVRCON_CVR_POSITION equ 0000h
CVRCON_CVR_SIZE equ 0004h
CVRCON_CVR_LENGTH equ 0004h
CVRCON_CVR_MASK equ 000Fh
CVRCON_CVRR_POSN equ 0005h
CVRCON_CVRR_POSITION equ 0005h
CVRCON_CVRR_SIZE equ 0001h
CVRCON_CVRR_LENGTH equ 0001h
CVRCON_CVRR_MASK equ 0020h
CVRCON_CVROE_POSN equ 0006h
CVRCON_CVROE_POSITION equ 0006h
CVRCON_CVROE_SIZE equ 0001h
CVRCON_CVROE_LENGTH equ 0001h
CVRCON_CVROE_MASK equ 0040h
CVRCON_CVREN_POSN equ 0007h
CVRCON_CVREN_POSITION equ 0007h
CVRCON_CVREN_SIZE equ 0001h
CVRCON_CVREN_LENGTH equ 0001h
CVRCON_CVREN_MASK equ 0080h
CVRCON_CVR0_POSN equ 0000h
CVRCON_CVR0_POSITION equ 0000h
CVRCON_CVR0_SIZE equ 0001h
CVRCON_CVR0_LENGTH equ 0001h
CVRCON_CVR0_MASK equ 0001h
CVRCON_CVR1_POSN equ 0001h
CVRCON_CVR1_POSITION equ 0001h
CVRCON_CVR1_SIZE equ 0001h
CVRCON_CVR1_LENGTH equ 0001h
CVRCON_CVR1_MASK equ 0002h
CVRCON_CVR2_POSN equ 0002h
CVRCON_CVR2_POSITION equ 0002h
CVRCON_CVR2_SIZE equ 0001h
CVRCON_CVR2_LENGTH equ 0001h
CVRCON_CVR2_MASK equ 0004h
CVRCON_CVR3_POSN equ 0003h
CVRCON_CVR3_POSITION equ 0003h
CVRCON_CVR3_SIZE equ 0001h
CVRCON_CVR3_LENGTH equ 0001h
CVRCON_CVR3_MASK equ 0008h


ADRESL equ 009Eh


ADCON1 equ 009Fh

ADCON1_PCFG_POSN equ 0000h
ADCON1_PCFG_POSITION equ 0000h
ADCON1_PCFG_SIZE equ 0004h
ADCON1_PCFG_LENGTH equ 0004h
ADCON1_PCFG_MASK equ 000Fh
ADCON1_VCFG_POSN equ 0004h
ADCON1_VCFG_POSITION equ 0004h
ADCON1_VCFG_SIZE equ 0002h
ADCON1_VCFG_LENGTH equ 0002h
ADCON1_VCFG_MASK equ 0030h
ADCON1_ADCS2_POSN equ 0006h
ADCON1_ADCS2_POSITION equ 0006h
ADCON1_ADCS2_SIZE equ 0001h
ADCON1_ADCS2_LENGTH equ 0001h
ADCON1_ADCS2_MASK equ 0040h
ADCON1_ADFM_POSN equ 0007h
ADCON1_ADFM_POSITION equ 0007h
ADCON1_ADFM_SIZE equ 0001h
ADCON1_ADFM_LENGTH equ 0001h
ADCON1_ADFM_MASK equ 0080h
ADCON1_PCFG0_POSN equ 0000h
ADCON1_PCFG0_POSITION equ 0000h
ADCON1_PCFG0_SIZE equ 0001h
ADCON1_PCFG0_LENGTH equ 0001h
ADCON1_PCFG0_MASK equ 0001h
ADCON1_PCFG1_POSN equ 0001h
ADCON1_PCFG1_POSITION equ 0001h
ADCON1_PCFG1_SIZE equ 0001h
ADCON1_PCFG1_LENGTH equ 0001h
ADCON1_PCFG1_MASK equ 0002h
ADCON1_PCFG2_POSN equ 0002h
ADCON1_PCFG2_POSITION equ 0002h
ADCON1_PCFG2_SIZE equ 0001h
ADCON1_PCFG2_LENGTH equ 0001h
ADCON1_PCFG2_MASK equ 0004h
ADCON1_PCFG3_POSN equ 0003h
ADCON1_PCFG3_POSITION equ 0003h
ADCON1_PCFG3_SIZE equ 0001h
ADCON1_PCFG3_LENGTH equ 0001h
ADCON1_PCFG3_MASK equ 0008h
ADCON1_VCFG0_POSN equ 0004h
ADCON1_VCFG0_POSITION equ 0004h
ADCON1_VCFG0_SIZE equ 0001h
ADCON1_VCFG0_LENGTH equ 0001h
ADCON1_VCFG0_MASK equ 0010h
ADCON1_VCFG1_POSN equ 0005h
ADCON1_VCFG1_POSITION equ 0005h
ADCON1_VCFG1_SIZE equ 0001h
ADCON1_VCFG1_LENGTH equ 0001h
ADCON1_VCFG1_MASK equ 0020h


WDTCON equ 0105h

WDTCON_SWDTEN_POSN equ 0000h
WDTCON_SWDTEN_POSITION equ 0000h
WDTCON_SWDTEN_SIZE equ 0001h
WDTCON_SWDTEN_LENGTH equ 0001h
WDTCON_SWDTEN_MASK equ 0001h
WDTCON_WDTPS_POSN equ 0001h
WDTCON_WDTPS_POSITION equ 0001h
WDTCON_WDTPS_SIZE equ 0004h
WDTCON_WDTPS_LENGTH equ 0004h
WDTCON_WDTPS_MASK equ 001Eh
WDTCON_SWDTE_POSN equ 0000h
WDTCON_SWDTE_POSITION equ 0000h
WDTCON_SWDTE_SIZE equ 0001h
WDTCON_SWDTE_LENGTH equ 0001h
WDTCON_SWDTE_MASK equ 0001h
WDTCON_WDTPS0_POSN equ 0001h
WDTCON_WDTPS0_POSITION equ 0001h
WDTCON_WDTPS0_SIZE equ 0001h
WDTCON_WDTPS0_LENGTH equ 0001h
WDTCON_WDTPS0_MASK equ 0002h
WDTCON_WDTPS1_POSN equ 0002h
WDTCON_WDTPS1_POSITION equ 0002h
WDTCON_WDTPS1_SIZE equ 0001h
WDTCON_WDTPS1_LENGTH equ 0001h
WDTCON_WDTPS1_MASK equ 0004h
WDTCON_WDTPS2_POSN equ 0003h
WDTCON_WDTPS2_POSITION equ 0003h
WDTCON_WDTPS2_SIZE equ 0001h
WDTCON_WDTPS2_LENGTH equ 0001h
WDTCON_WDTPS2_MASK equ 0008h
WDTCON_WDTPS3_POSN equ 0004h
WDTCON_WDTPS3_POSITION equ 0004h
WDTCON_WDTPS3_SIZE equ 0001h
WDTCON_WDTPS3_LENGTH equ 0001h
WDTCON_WDTPS3_MASK equ 0010h


LVDCON equ 0109h

LVDCON_LVDL_POSN equ 0000h
LVDCON_LVDL_POSITION equ 0000h
LVDCON_LVDL_SIZE equ 0004h
LVDCON_LVDL_LENGTH equ 0004h
LVDCON_LVDL_MASK equ 000Fh
LVDCON_LVDEN_POSN equ 0004h
LVDCON_LVDEN_POSITION equ 0004h
LVDCON_LVDEN_SIZE equ 0001h
LVDCON_LVDEN_LENGTH equ 0001h
LVDCON_LVDEN_MASK equ 0010h
LVDCON_IRVST_POSN equ 0005h
LVDCON_IRVST_POSITION equ 0005h
LVDCON_IRVST_SIZE equ 0001h
LVDCON_IRVST_LENGTH equ 0001h
LVDCON_IRVST_MASK equ 0020h
LVDCON_LVDL0_POSN equ 0000h
LVDCON_LVDL0_POSITION equ 0000h
LVDCON_LVDL0_SIZE equ 0001h
LVDCON_LVDL0_LENGTH equ 0001h
LVDCON_LVDL0_MASK equ 0001h
LVDCON_LVDL1_POSN equ 0001h
LVDCON_LVDL1_POSITION equ 0001h
LVDCON_LVDL1_SIZE equ 0001h
LVDCON_LVDL1_LENGTH equ 0001h
LVDCON_LVDL1_MASK equ 0002h
LVDCON_LVDL2_POSN equ 0002h
LVDCON_LVDL2_POSITION equ 0002h
LVDCON_LVDL2_SIZE equ 0001h
LVDCON_LVDL2_LENGTH equ 0001h
LVDCON_LVDL2_MASK equ 0004h
LVDCON_LVDL3_POSN equ 0003h
LVDCON_LVDL3_POSITION equ 0003h
LVDCON_LVDL3_SIZE equ 0001h
LVDCON_LVDL3_LENGTH equ 0001h
LVDCON_LVDL3_MASK equ 0008h


PMDATA equ 010Ch


PMADR equ 010Dh


PMDATH equ 010Eh


PMADRH equ 010Fh


PMCON1 equ 018Ch

PMCON1_RD_POSN equ 0000h
PMCON1_RD_POSITION equ 0000h
PMCON1_RD_SIZE equ 0001h
PMCON1_RD_LENGTH equ 0001h
PMCON1_RD_MASK equ 0001h

# 8 "/opt/microchip/xc8/v2.05/pic/include/pic.inc"
stk_offset SET 0
auto_size SET 0


; stack_auto defines a symbol /name/_offset which equates to the
; stack offset of the auto object in question

stack_auto MACRO name, size
name&_offset EQU stk_offset-size
stk_offset SET name&_offset
auto_size SET -stk_offset
ENDM


; stack_param defines a symbol /name/_offset which equates to the
; stack offset of the parameter object in question

stack_param MACRO name, size
name&_offset EQU stk_offset-size
stk_offset SET name&_offset
ENDM


; alloc_stack adjusts the SP to allocate space for auto objects
; it also links in to the btemp symbol so that can be used

alloc_stack MACRO
GLOBAL btemp
addfsr FSR1,auto_size
ENDM


; restore_stack adjusts the SP to remove all auto and parameter
; objects from the stack prior to returning from a function

restore_stack MACRO
addfsr FSR1,stk_offset
stk_offset SET 0
auto_size SET 0
ENDM

# 24 "core.asm"
;PIN USAGE:
; PORTA,0 UNUSED OUTPUT
; PORTA,1 UNUSED OUTPUT
; PORTA,2 DISPLAY CE OUTPUT
; PORTA,3 DISPLAY RS OUTPUT
; PORTA,4 UNUSED (OPEN DRAIN) OUTPUT
; PORTA,5 UNUSED OUTPUT
; PORTA,6 CLOCK INPUT
; PORTA,7 CLOCK INPUT
; PORTB,0 CH376S INTERRUPT INPUT
; PORTB,1 TAPE INPUT
; PORTB,2 TAPE OUTPUT
; PORTB,3 BUTTON 1 INPUT
; PORTB,4 BUTTON 2 INPUT
; PORTB,5 BUTTON 3 INPUT
; PORTB,6 BUTTON 4 INPUT ICSP CLOCK
; PORTB,7 RAM CE OUTPUT ICSP DATA
; PORTC,0 UNUSED OUTPUT
; PORTC,1 UNUSED OUTPUT
; PORTC,2 UNUSED OUTPUT
; PORTC,3 SCK (HARDWARE SPI) OUTPUT
; PORTC,4 SDI (HARDWARE SPI) INPUT
; PORTC,5 SDO (HARDWARE SPI) OUTPUT
; PORTC,6 TXD (HARDWARE UART) INPUT (MUST BE CONFIGURED AS INPUT FOR UART MODULE TO WORK. THIS IS ACTUALLY AN OUTPUT)
; PORTC,7 RXD (HARDWARE UART) INPUT
; PORTD,0 UNUSED OUTPUT
; PORTD,1 UNUSED OUTPUT
; PORTD,2 CH376S CE OUTPUT
; PORTD,3 CH376S RESET OUTPUT
; PORTD,4 TEST OUTPUT
; PORTD,5 UNUSED OUTPUT
; PORTD,6 DISPLAY CLOCK OUTPUT
; PORTD,7 DISPLAY DATA OUTPUT
; PORTE,0 UNUSED OUTPUT
; PORTE,1 UNUSED OUTPUT
; PORTE,2 UNUSED OUTPUT

;FLAG REG USAGE:
;BIT0 SET IF S_REG_LOW CONTAINS VALID DATA
;BIT1 SET IF BUILD_BYTE IS WAITING FOR THE FIRST BYTE OF A TRANSMISSION (PREVENTS RESET IF TRANSMISSION FAILS)
;BIT2 SET IF TIMEOUT OCCURED WHILE WAITING FOR USB STATUS
;BIT3 SET IF FREE SPACE EXCEEDS TAPE SIZE
;BIT4 SET IF FREE SPCAE EXCEEDS 0x20000
;BIT5 UNUSED
;BIT6 UNUSED
;BIT7 UNUSED

; When assembly code is placed in a psect, it can be manipulated as a
; whole by the linker and placed in memory.
;
; In this example, barfunc is the program section (psect) name, 'local' means
; that the section will not be combined with other sections even if they have
; the same name. class=CODE means the barfunc must go in the CODE container.
; PIC18s should have a delta (addressible unit size) of 1 (default) since they
; are byte addressible. PIC10/12/16s have a delta of 2 since they are word
; addressible. PIC18s should have a reloc (alignment) flag of 2 for any
; psect which contains executable code. PIC10/12/16s can use the default
; reloc value of 1. Use one of the psects below for the device you use:

psect barfunc,local,class=CODE,delta=2 ; PIC10/12/16
; psect barfunc,local,class=CODE,reloc=2 ; PIC18

global _temp3
global _temp4
global _temp5
global _ram_address_h
global _ram_address_l
global _sdel_count
global _ldel_count
global _gen_count
global _gen_count2
global _gen_count3
global _gen_count4
global _tape_size_high
global _tape_size_low
global _hex_char_high
global _hex_char_low
global _usb_file_size_high
global _usb_file_size_low
global _usb_bytes_read_high
global _usb_bytes_read_low
global _usb_drive_size1
global _usb_drive_size2
global _usb_drive_size3
global _usb_free_space1
global _usb_free_space2
global _usb_free_space3
global _usb_logical_bytes1
global _usb_logical_bytes2
global _usb_logical_bytes3
global _usb_target_status
global _s_reg_high
global _s_reg_low
global _timeout_high
global _timeout_low
global _delay_counter
global _flag_reg
global _fifo_read_idx
global _fifo_read_bank
global _fifo_write_idx
global _fifo_write_bank
global _fifo_num_bytes

global _tape_name


;extern entry__byte_to_hex
global _byte_to_hex
global _fifo_push
global _fifo_pop


global _initialize
_initialize
BANKSEL PORTA
CLRF PORTA
CLRF PORTB
CLRF PORTC
CLRF PORTD
COMF PORTB, F
COMF PORTC, F
COMF PORTD, F
BANKSEL TRISA ;SWITCH TO BANK 1
MOVLW 0b11000000
MOVWF TRISA ;CONFIGURE PORTA
MOVLW 0b01111011
MOVWF TRISB ;CONFIGURE PORTB
MOVLW 0b11010000
MOVWF TRISC ;CONFIGURE PORTC
MOVLW 0b00000000
MOVWF TRISD ;CONFIGURE PORTD
MOVLW 0b11111000
MOVWF TRISE ;CONFIGURE PORTE
MOVLW 0b00000000 ;((SSPSTAT) and 07Fh), 7=0, ((SSPSTAT) and 07Fh), 6=0, DA=0, P=0, S=0, RW=0, ((SSPSTAT) and 07Fh), 1=0, ((SSPSTAT) and 07Fh), 0=0
MOVWF SSPSTAT ;CONFIGURE SPI
MOVLW 0b00001111 ;PCFG=1111
MOVWF ADCON1 ;DISABLE ANALOG INPUTS
MOVLW 0b00100110 ;((TXSTA) and 07Fh), 7=0, ((TXSTA) and 07Fh), 6=0, ((TXSTA) and 07Fh), 5=1, ((TXSTA) and 07Fh), 4=0, UNIMPLEMENTED=0, ((TXSTA) and 07Fh), 2=1, ((TXSTA) and 07Fh), 1=1, ((TXSTA) and 07Fh), 0=0
MOVWF TXSTA ;CONFIGURE UART
MOVLW 25
MOVWF SPBRG ;CONFIGURE BAUD RATE
MOVLW 0b11011000 ;RBPU = 1, ((OPTION_REG) and 07Fh), 6 = 1, ((OPTION_REG) and 07Fh), 5 = 0, ((OPTION_REG) and 07Fh), 4 = 1, ((OPTION_REG) and 07Fh), 3 = 1, ((OPTION_REG) and 07Fh), 2 = 0, ((OPTION_REG) and 07Fh), 1 = 0, ((OPTION_REG) and 07Fh), 0 = 0
MOVWF OPTION_REG ;CONFIGURE TIMER
BANKSEL SSPCON
MOVLW 0b00110000 ;((SSPCON) and 07Fh), 7=0, ((SSPCON) and 07Fh), 6=0, ((SSPCON) and 07Fh), 5=1, ((SSPCON) and 07Fh), 4=1, SSPM=0000
MOVWF SSPCON ;CONFIGURE SPI
MOVLW 0b10010000 ;((RCSTA) and 07Fh), 7=1, ((RCSTA) and 07Fh), 6=0,((RCSTA) and 07Fh), 5=0, ((RCSTA) and 07Fh), 4=1, ((RCSTA) and 07Fh), 3=0, ((RCSTA) and 07Fh), 2=0, ((RCSTA) and 07Fh), 1=0, ((RCSTA) and 07Fh), 0=0
MOVWF RCSTA ;CONFIGURE UART
MOVLW 0b00100000
MOVWF INTCON ;ENABLE TIMER 0 INTERRUPT
CLRF _flag_reg
CLRF _s_reg_high
CLRF _s_reg_low
BCF PORTD, 3
MOVLW 50
CALL _delay_millis ;100 MS DELAY AT STARTUP
CALL _fifo_init
CALL RAM_CONFIG
CLRF _ram_address_h
CLRF _ram_address_l
MOVLW 0x55
CALL RAM_WRITE
MOVLW 0xAA
CALL RAM_WRITE_AUTO
;CALL _mem_clear
CALL FUNCTIONSET_LCD ;INITIALIZE DISPLAY
CALL DISPLAYON ;POWER ON THE DISPLAY
CALL CLEARDISPLAY ;CLEAR THE DISPLAY
CALL SETHOME_LCD ;SET CURSOR TO THE START OF LINE 1
RETURN

global _mem_clear
_mem_clear
MOVLW 0xFF
MOVWF _ram_address_l
MOVWF _ram_address_h
MEM_CLEAR_LOOP
;BSF PORTD, 4
MOVLW 0xFF
CALL RAM_WRITE_AUTO
;BCF PORTD, 4 ;PORTD 4 IS A DEBUG OUTPUT TO MEASURE THE DURATION OF RAM_WRITE
MOVF _ram_address_l, W
XORLW 0xFF
BTFSS ((STATUS) and 07Fh), 2
GOTO MEM_CLEAR_LOOP
MOVF _ram_address_h, W
XORLW 0xFF
BTFSS ((STATUS) and 07Fh), 2
GOTO MEM_CLEAR_LOOP
RETURN

global _mem_dump
_mem_dump
MOVLW 0xFF
MOVWF _ram_address_l
MOVWF _ram_address_h
MEM_DUMP_LOOP
CALL RAM_READ_AUTO
CALL _uart_send
MOVF _ram_address_l, W
XORLW 0xFF
BTFSS ((STATUS) and 07Fh), 2
GOTO MEM_DUMP_LOOP
MOVF _ram_address_h, W
XORLW 0xFF
BTFSS ((STATUS) and 07Fh), 2
GOTO MEM_DUMP_LOOP
RETURN

global _file_dump
_file_dump
MOVF _usb_file_size_high, W
IORWF _usb_file_size_low, W
BTFSC ((STATUS) and 07Fh), 2
RETURN
MOVF _usb_file_size_high, W
MOVWF _gen_count
MOVF _usb_file_size_low, W
MOVWF _gen_count2
MOVLW 0xFF
MOVWF _ram_address_l
MOVWF _ram_address_h
INCF _gen_count, F
FD_INNER
CALL RAM_READ_AUTO
CALL _uart_send
DECFSZ _gen_count2, F
GOTO FD_INNER
DECFSZ _gen_count, F
GOTO FD_INNER
RETURN

global _uart_read
_uart_read
BTFSS ((PIR1) and 07Fh), 5 ;CHECK IF UART RECEIVE BUFFER IS FULL
GOTO _uart_read ;IF NOT WAIT UNTIL ITS FULL
MOVF RCREG, W ;COPY DATA TO W
RETURN

global _uart_send
_uart_send
BTFSS ((PIR1) and 07Fh), 4 ;CHECK IF UART TRANSMIT BUFFER IS EMPTY
GOTO _uart_send ;IF NOT WAIT UNTIL IT IS
MOVWF TXREG ;COPY DATA TO TXREG
RETURN

RAM_READ_AUTO
INCFSZ _ram_address_l, F ;INCREMENT LOW ADDRESS
DECF _ram_address_h, F
INCF _ram_address_h, F ;IF LOW ADDRESS IS ((STATUS) and 07Fh), 2 INCREMENT THE HIGH ADDRESS TOO
RAM_READ
BCF PORTB, 7 ;CHIP ENABLE
MOVLW 0x03 ;PUT WRITE COMMAND IN W
MOVWF SSPBUF ;SEND COMMAND
MOVF _ram_address_h, W ;COPY ADDRESS TO W
BANKSEL SSPSTAT
RAM_WAIT_AH
BTFSS ((SSPSTAT) and 07Fh), 0 ;IS THE TRANSMISSION READY
GOTO RAM_WAIT_AH ;IF NOT WAIT UNTIL IT IS
BANKSEL SSPBUF
MOVWF SSPBUF ;SEND ADDRESS HIGH BYTE
MOVF _ram_address_l, W ;COPY ADDRESS TO W
BANKSEL SSPSTAT
RAM_WAIT_AL
BTFSS ((SSPSTAT) and 07Fh), 0
GOTO RAM_WAIT_AL
BANKSEL SSPBUF
MOVWF SSPBUF ;SEND ADDRESS LOW BYTE
BANKSEL SSPSTAT
RAM_WAIT_D
BTFSS ((SSPSTAT) and 07Fh), 0
GOTO RAM_WAIT_D
BANKSEL SSPBUF
CLRF SSPBUF
BANKSEL SSPSTAT
RAM_WAIT_R
BTFSS ((SSPSTAT) and 07Fh), 0
GOTO RAM_WAIT_R
BANKSEL SSPBUF
MOVF SSPBUF, W ;COPY DATA TO W
BSF PORTB, 7
RETURN

RAM_WRITE_AUTO
INCFSZ _ram_address_l, F ;INCREMENT LOW ADDRESS
DECF _ram_address_h, F
INCF _ram_address_h, F ;IF LOW ADDRESS IS ((STATUS) and 07Fh), 2 INCREMENT THE HIGH ADDRESS TOO
RAM_WRITE
MOVWF _temp5
BCF PORTB, 7 ;CHIP ENABLE
MOVLW 0x02 ;PUT WRITE COMMAND IN W
MOVWF SSPBUF ;SEND COMMAND
MOVF _ram_address_h, W ;COPY ADDRESS TO W
BANKSEL SSPSTAT
RAM_WRITE_AH
BTFSS ((SSPSTAT) and 07Fh), 0 ;IS THE TRANSMISSION READY
GOTO RAM_WRITE_AH ;IF NOT WAIT UNTIL IT IS
BANKSEL SSPBUF
MOVWF SSPBUF ;SEND ADDRESS HIGH BYTE
MOVF _ram_address_l, W ;COPY ADDRESS TO W
BANKSEL SSPSTAT
RAM_WRITE_AL
BTFSS ((SSPSTAT) and 07Fh), 0
GOTO RAM_WRITE_AL
BANKSEL SSPBUF
MOVWF SSPBUF ;SEND ADDRESS LOW BYTE
MOVF _temp5, W ;COPY DATA TO W
BANKSEL SSPSTAT
RAM_WRITE_D
BTFSS ((SSPSTAT) and 07Fh), 0
GOTO RAM_WRITE_D
BANKSEL SSPBUF
MOVWF SSPBUF ;SEND DATA
BANKSEL SSPSTAT
RAM_WRITE_R
BTFSS ((SSPSTAT) and 07Fh), 0
GOTO RAM_WRITE_R
BANKSEL SSPBUF
MOVF SSPBUF, W ;COPY DUMMY DATA TO W
BSF PORTB, 7
RETURN

RAM_CONFIG
BCF PORTB, 7 ;CHIP ENABLE
MOVLW 0x01 ;PUT WRITE COMMAND IN W
MOVWF SSPBUF ;SEND COMMAND
MOVLW 0x00 ;CONFIGURE FOR BYTE MODE
BANKSEL SSPSTAT
RAM_CONFIG_C
BTFSS ((SSPSTAT) and 07Fh), 0 ;IS THE TRANSMISSION READY
GOTO RAM_CONFIG_C ;IF NOT WAIT UNTIL IT IS
BANKSEL SSPBUF
MOVWF SSPBUF ;SEND CONFIG DATA
BANKSEL SSPSTAT
RAM_CONFIG_D
BTFSS ((SSPSTAT) and 07Fh), 0
GOTO RAM_CONFIG_D
BANKSEL SSPBUF
MOVF SSPBUF, W ;COPY DUMMY DATA TO W
BSF PORTB, 7
RETURN

global _lcd_putc
_lcd_putc
BSF PORTA, 3 ;RS LINE TO 1 (PORT A BIT 3)
CALL _lcd_send
CALL _pulse_e
MOVLW 0x02
CALL _delay_millis
RETURN

global _lcd_send
_lcd_send ;SENDS DATA OR COMMAND TO LCD SHIFT REGISTER
MOVWF _temp3 ;COPY DATA TO TEMP VARIABLE
MOVLW 0x08
MOVWF _gen_count3 ;COUNT 8 BITS
LCD_SEND_LOOP
BTFSC _temp3,7
BSF PORTD, 7
BTFSS _temp3,7
BCF PORTD, 7
RLF _temp3,F
BSF PORTD, 6
NOP
NOP
BCF PORTD, 6
DECFSZ _gen_count3,F
GOTO LCD_SEND_LOOP
RETURN

FUNCTIONSET_LCD
BCF PORTA, 2 ;MAKE SURE THAT E STARTS LOW
BCF PORTD, 6 ;MAKE SURE DISPLAY CLOCK STARTS LOW
BCF PORTA, 3 ;RS LINE TO 0 (PORT A BIT 3)
MOVLW 0b00111000 ;FUNCTION SET COMMAND
CALL _lcd_send
CALL _pulse_e ;PULSE E LINE HIGH (PORT A BIT 2)
MOVLW 10
CALL _delay_millis
RETURN

DISPLAYON
BCF PORTA, 3 ;RS LINE TO 0 (PORT A BIT 3)
MOVLW 0x0F ;DISPLAY ON/OFF AND CURSOR COMMAND
CALL _lcd_send
CALL _pulse_e
MOVLW 10
CALL _delay_millis
RETURN

CLEARDISPLAY
BCF PORTA, 3 ;RS LINE LOW
MOVLW 0x01 ;CLEAR DISPLAY COMMAND
CALL _lcd_send ;WRITE TO DATA LINES
CALL _pulse_e
MOVLW 10
CALL _delay_millis
RETURN

SETHOME_LCD
BCF PORTA, 3 ;RS LINE LOW
MOVLW 0x03 ;DISPLAY AND CURSOR HOME COMMAND
CALL _lcd_send ;WRITE TO DATA LINES
CALL _pulse_e
MOVLW 5
CALL _delay_millis
RETURN

global _lcd_line2
_lcd_line2
CALL SETHOME_LCD
MOVLW 28H ;SET COUNTER TO 40
MOVWF _gen_count2
MOVLW 0b00010000 ;CURSOR LEFT COMMAND
CALL _lcd_send ;WRITE COMMAND TO DATA LINES
CLLOOP40
BCF PORTA, 3 ;RS LINE LOW (COMMAND MODE)
CALL _pulse_e
MOVLW 2
CALL _delay_millis
DECFSZ _gen_count2, F
GOTO CLLOOP40
RETURN

LCD_CLEAR1
CALL SETHOME_LCD
MOVLW 0x20 ;SPACE CHAR
BSF PORTA, 3 ;RS LINE HIGH FOR DATA
CALL _lcd_send ;PUT CHAR ON THE DATA LINES
MOVLW 20 ;COUNT 20 SPACE CHARS
MOVWF _gen_count2
LCD_CLEAR12
CALL _pulse_e
MOVLW 2
CALL _delay_millis
DECFSZ _gen_count2, F
GOTO LCD_CLEAR12
CALL SETHOME_LCD
RETURN

global _lcd_clear2
_lcd_clear2
CALL _lcd_line2
MOVLW 0x20 ;SPACE CHAR
BSF PORTA, 3 ;RS LINE HIGH FOR DATA
CALL _lcd_send ;PUT CHAR ON THE DATA LINES
MOVLW 20 ;COUNT 20 SPACE CHARS
MOVWF _gen_count2
LCD_CLEAR22
CALL _pulse_e
MOVLW 2
CALL _delay_millis
DECFSZ _gen_count2, F
GOTO LCD_CLEAR22
CALL _lcd_line2
RETURN

global _pulse_e
_pulse_e
BSF PORTA, 2 ;SET E LINE HIGH
NOP
NOP
NOP
NOP
NOP ;MODIFIED FOR 4MHZ CLOCK
NOP
NOP
NOP
BCF PORTA, 2 ;SET E LINE LOW
RETURN

global _print_name
_print_name
BCF STATUS, 7 ;SET BANK 0 AND 1
MOVLW _tape_name
MOVWF FSR
MOVLW 8 ;COUNT 8 CHARS
MOVWF _gen_count2
BSF PORTA, 3 ;RS LINE HIGH FOR DATA
PN_LOOP
MOVF INDF, W
CALL _lcd_send
CALL _pulse_e
MOVLW 2
CALL _delay_millis
INCF FSR, F
DECFSZ _gen_count2, F
GOTO PN_LOOP
RETURN

;PORTB, 1
; MOVLW H'FF'
; MOVWF RAM_ADDRESS_H
; MOVWF RAM_ADDRESS_L
; BSF FLAG_REG,1 ;DISSABLE RESET IF TRANSMISSION FAILS
; CALL GET_LEADER
; BCF FLAG_REG,1 ;ENABLE RESET IF TRANSMISSION FAILS
; CALL SAVE_FIRST_BLOCK
; INCFSZ RAM_ADDRESS_L, F ;INCREMENT LOW ADDRESS
; DECF RAM_ADDRESS_H, F
; INCF RAM_ADDRESS_H, F ;IF LOW ADDRESS IS ((STATUS) and 07Fh), 2 INCREMENT THE HIGH ADDRESS TOO
; MOVF RAM_ADDRESS_H, W
; MOVWF TAPE_SIZE_HIGH
; MOVF RAM_ADDRESS_L, W
; MOVWF TAPE_SIZE_LOW
; CLRF RAM_ADDRESS_H
; MOVLW H'03'
; MOVWF RAM_ADDRESS_L
; BCF STATUS, 7 ;SET BANKS 0 AND 1
; MOVLW TAPE_NAME
; MOVWF FSR
; MOVLW D'08'
; MOVWF GEN_COUNT
;NAME_COPY
; CALL RAM_READ_AUTO
; MOVF DREG, W
; MOVWF INDF
; INCF FSR, F
; DECFSZ GEN_COUNT, F
; GOTO NAME_COPY
; RETURN

;GET_LEADER
; MOVLW D'128' ;LENGTH OF LEADER
; MOVWF GEN_COUNT2
;LEADER_LOOP
; CALL BUILD_BYTE
; MOVF DREG,W
; XORLW H'55'
; BTFSS STATUS, Z
; GOTO GL_FIX
; DECFSZ GEN_COUNT2, F
; GOTO LEADER_LOOP
; RETURN
;GL_FIX
; DECFSZ GEN_COUNT2, F
; GOTO GL_FIX2
; GOTO BUILD_PANIC
;GL_FIX2
; CALL BUILD_ALIGN
; MOVF DREG,W
; XORLW H'55'
; BTFSS STATUS,Z
; GOTO BUILD_PANIC
; DECFSZ GEN_COUNT2, F
; GOTO LEADER_LOOP
; GOTO BUILD_PANIC

;SAVE_FIRST_BLOCK
; CALL BUILD_BYTE
; BTFSS DREG,0 ;CHECK IF BIT 0 IS SET (IF IT IS CLEARED THERE HAS BEEN AN ALIGNMENT ERROR)
; GOTO BUILD_PANIC
; CALL RAM_WRITE_AUTO ;SAVE LEADER BYTE
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE ((TXSTA) and 07Fh), 4 BYTE
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE BLOCK TYPE BYTE
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE BLOCK LENGTH
; MOVF DREG, W
; MOVWF GEN_COUNT2
;FIRST_BLOCK_LOOP
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO
; DECFSZ GEN_COUNT2, F
; GOTO FIRST_BLOCK_LOOP
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE CHECKSUM
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE LEADER BYTE
; CALL GET_LEADER ;GETS THE SECOND LEADER
;SAVE_BLOCKS
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE LEADER BYTE
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE ((TXSTA) and 07Fh), 4 BYTE
; CALL BUILD_BYTE
; INCFSZ DREG, W ;CHECK IF BLOCK IS END OF FILE
; GOTO NOT_EOF_BLOCK
; CALL RAM_WRITE_AUTO ;SAVE BLOCK TYPE
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE BLOCK LENGTH
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE CHECKSUM
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE LEADER BYTE
; RETURN
;NOT_EOF_BLOCK
; CALL RAM_WRITE_AUTO ;SAVE BLOCK TYPE
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE LENGTH BYTE
; MOVF DREG, W
; MOVWF GEN_COUNT2 ;COPY LENGTH TO GEN_COUNT2
;BLOCK_DATA_LOOP
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO
; DECFSZ GEN_COUNT2, F
; GOTO BLOCK_DATA_LOOP
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE CHECKSUM
; CALL BUILD_BYTE
; CALL RAM_WRITE_AUTO ;SAVE LEADER BYTE
; GOTO SAVE_BLOCKS

;BUILD_ALIGN ;SKIPS INITIAL WAIT IN AN ATTEMPT TO FIX ALIGNMENT. BUILD_BYTE IS THE NORMAL ENTRY POINT
; MOVLW H'08'
; MOVWF GEN_COUNT ;INITIALIZE COUNTER TO 8
; MOVF PORTB, W
; XORLW H'02' ;INVERT TAPE BIT
; MOVWF TEMP1 ;COPY PORTB TO TEMP1
; GOTO WAIT_STOP
;BUILD_BYTE
; MOVLW H'08'
; MOVWF GEN_COUNT ;INITIALIZE COUNTER TO 8
;BUILD_LOOP
; MOVF PORTB, W
; MOVWF TEMP1 ;COPY PORTB TO TEMP1
; CLRF PULSE_LENGTH
; RRF DREG, F
; BCF DREG, 7
;WAIT_START
; MOVF PORTB, W
; XORWF TEMP1, W ;COMPARE PORTB WITH PREVIOUS STATE
; MOVWF TEMP2 ;STORE RESULT IN TEMP2
; BTFSS TEMP2, 1
; GOTO WAIT_START ;IF STATE HAS NOT CHANGED KEEP WAITING
;WAIT_STOP
; CALL TAPE_DELAY
; INCF PULSE_LENGTH, F ;#1
; MOVF PULSE_LENGTH, W ;#2
; SUBLW D'22' ;#3
; BTFSC STATUS, C ;CHECK IF LENGTH IS GREATER THAN 22 #4
; GOTO BUILD_NO_ERROR ;IF NOT CONTINUE NORMALLY #6
;BUILD_ERROR
; BTFSS FLAG_REG, 1 ;IF ERROR IS IN FIRST BYTE TRY TO RECOVER
; GOTO BUILD_PANIC ;IF NOT RESET TO AVOID INFINITE LOOP
; ;MOVF GEN_COUNT, W
; ;SUBLW H'08'
; ;BTFSS STATUS, Z ;CHECK IF ERROR IS IN FIRST BIT
; ;GOTO BUILD_PANIC ; IF NOT RESET TO AVOID INFINITE LOOP
; GOTO BUILD_BYTE ;IF IT IS IN FIRST BIT OF FIRST BYTE RESTART SUBROUTINE
;BUILD_NO_ERROR
; MOVF PORTB, W ;#7
; XORWF TEMP1, W ;#8
; MOVWF TEMP2 ;#9
; BTFSC TEMP2, 1 ;#10
; GOTO WAIT_STOP ;WAIT UNTIL TAPE INPUT RETURNS TO ORIGINAL STATE #12
; MOVF PULSE_LENGTH, W
; SUBLW D'08'
; BTFSC STATUS, C ;CHECK IF LENGTH IS LESS THAN 8
; GOTO BUILD_ERROR ;IF IT IS ((ADCON0) and 07Fh), 2 TO LOCAL ERROR HANDLER
; MOVLW D'15'
; SUBWF PULSE_LENGTH, F ;SUBTRACT THRESHOLD FROM PULSE LENGTH
; BTFSC PULSE_LENGTH, 7 ;CHECK IF PULSE LENGHT IS NEGATIVE
; BSF DREG, 7 ;IF IT IS SET BIT IN DREG
; DECFSZ GEN_COUNT, F
; GOTO BUILD_LOOP
; RETLW H'00' ;RETURN ((STATUS) and 07Fh), 2 TO INDICATE SUCCESS

;BUILD_PANIC ;ENABLES THE WATCHDOG TO CAUSE A RESET
; BANKSEL WDTCON
; BSF WDTCON, ((WDTCON) and 07Fh), 0 ;ENABLE WATCHDOG
;BP_HALT
; GOTO BP_HALT ;WAIT FOR THE WATCHDOG TO DO THE THING

;TAPE_DELAY
; NOP
; NOP
; NOP
; NOP
; NOP ;5 CYCLE DELAY
; RETURN

;PORTB, 2
; CLRF TEMP1
; CLRF BIT_COUNT
; MOVLW H'FF'
; MOVWF RAM_ADDRESS_H
; MOVWF RAM_ADDRESS_L ;RAM READ FUNCTION WILL AUTO INCREMENT ADDRESS, SO IT SHOULD OVERFLOW WHEN IT IS FIRST CALLED
; MOVLW H'55'
; MOVWF DREG ;TAPE LEADER VALUE
; MOVLW D'127'
; MOVWF GEN_COUNT ;128 LEADER BYTES
; CLRF TMR0
; NOP
; BCF INTCON, ((INTCON) and 07Fh), 2
; BSF INTCON, ((INTCON) and 07Fh), 7 ;ENABLE INTERRUPT
;LEADER_OUT
; BTFSS BIT_COUNT, 2
; GOTO LEADER_OUT ;WAIT UNTIL BIT COUNT IS NOT ((STATUS) and 07Fh), 2
;LEADER_WAIT
; BTFSC BIT_COUNT, 2
; GOTO LEADER_WAIT ;WAIT UNTIL BIT_COUNT IS ((STATUS) and 07Fh), 2
; DECFSZ GEN_COUNT, F
; GOTO LEADER_OUT ;LOOP UNTIL 128 LEADER BYTES HAVE BEEN SENT
; MOVLW D'22'
; MOVWF GEN_COUNT ;ONE PAST THE END OF THE NAME FILE
;TAPE_NAMEBLOCK
; CALL RAM_READ_AUTO ;GET FIRST BYTE
;TAPE_W1
; BTFSS BIT_COUNT, 2
; GOTO TAPE_W1 ;WAIT UNTIL BIT COUNT IS NOT ((STATUS) and 07Fh), 2
;TAPE_W2
; BTFSC BIT_COUNT, 2
; GOTO TAPE_W2
; DECFSZ GEN_COUNT, F
; GOTO TAPE_NAMEBLOCK
; BCF INTCON, ((INTCON) and 07Fh), 7 ;STOP INTERRUPT
; CALL TAPE_PAUSE ;1/2 SECOND SILENCE
; MOVLW D'127'
; MOVWF GEN_COUNT ;128 LEADER BYTES
; CLRF TMR0
; CLRF TEMP1
; NOP
; BCF INTCON, ((INTCON) and 07Fh), 2
; BSF INTCON, ((INTCON) and 07Fh), 7 ;ENABLE INTERRUPT
;LEADER_OUT2
; BTFSS BIT_COUNT, 2
; GOTO LEADER_OUT2 ;WAIT UNTIL BIT COUNT IS NOT ((STATUS) and 07Fh), 2
;LEADER_WAIT2
; BTFSC BIT_COUNT, 2
; GOTO LEADER_WAIT2 ;WAIT UNTIL BIT_COUNT IS ((STATUS) and 07Fh), 2
; DECFSZ GEN_COUNT, F
; GOTO LEADER_OUT2 ;LOOP UNTIL 128 LEADER BYTES HAVE BEEN SENT
;TAPE_NE
; CALL RAM_READ_AUTO
;TAPE_W3
; BTFSS BIT_COUNT, 2
; GOTO TAPE_W3 ;WAIT UNTIL BIT_COUNT IS NOT ((STATUS) and 07Fh), 2
;TAPE_W4
; BTFSC BIT_COUNT, 2
; GOTO TAPE_W4
; MOVF TAPE_SIZE_HIGH, W
; XORWF RAM_ADDRESS_H, W
; MOVWF TEMP3 ;STORE RESULT IN TEMP3
; INCF TEMP3, F ;INCREMENT RESULT
; DECFSZ TEMP3, F
; GOTO TAPE_NE
; MOVF TAPE_SIZE_LOW, W
; XORWF RAM_ADDRESS_L, W
; MOVWF TEMP3 ;STORE RESULT IN TEMP3
; INCF TEMP3, F
; DECFSZ TEMP3, F
; GOTO TAPE_NE
; BCF INTCON, ((INTCON) and 07Fh), 7
; RETURN

;TAPE_INT
; MOVWF TEMP4 ;SAVE W REG
; BCF INTCON, ((INTCON) and 07Fh), 2
; MOVLW D'59' ;USED TO BE 58, CHANGED IT BECAUSE I ADDED THE SAVE W INSTRUCTION
; MOVWF TMR0 ;PRELOAD TIMER
; BTFSC TEMP1, 0 ;IDENTIFY PHASE
; GOTO PHASE1
; BTFSC TEMP1, 1
; GOTO PHASE2
; BTFSC TEMP1, 2
; GOTO PHASE3
; BTFSC TEMP1, 3
; GOTO PHASE4
; MOVLW B'00000100' ;DEFAULT PHASE - LOAD NEW DATA AND INITIALIZE VARIABLES
; XORWF PORTB, F ;TOGGLE TAPE OUT
; MOVF DREG, W
; MOVWF TEMP2 ;COPY NEW DATA TO BUFFER
; CLRF BIT_COUNT
; MOVLW H'01'
; MOVWF TEMP1 ;SET PHASE TO 1
; MOVF TEMP4, W ;RESTORE W
; RETFIE
;PHASE1 ;TOGGLE IF BIT IS 1
; MOVLW B'00000100' ;WILL USE THIS TO TOGGLE OUTPUT
; BTFSC TEMP2, 0 ;CHECK IF BIT IS 1 OR 0
; XORWF PORTB, F ;IF BIT IS 1 TOGGLE OUTPUT
; MOVLW H'02'
; MOVWF TEMP1 ;SET PHASE TO 2
; MOVF TEMP4, W ;RESTORE W
; RETFIE
;PHASE2 ;ALWAYS TOGGLE
; MOVLW B'00000100'
; XORWF PORTB, F ;TOGGLE OUTPUT
; BTFSC TEMP2, 0 ;CHECK IF BIT IS 1 OR 0
; GOTO PHASE2_NEXT ;IF BIT IS SET THEN LOAD NEXT BIT AND RESET PHASE
; MOVLW H'04'
; MOVWF TEMP1 ;SET PHASE TO 3
; MOVF TEMP4, W ;RESTORE W
; RETFIE
;PHASE3 ;NEVER TOGGLE
; MOVLW H'08'
; MOVWF TEMP1 ;SET PHASE TO 4
; MOVF TEMP4, W
; RETFIE
;PHASE4 ;ALWAYS TOGGLE
; MOVLW B'00000100'
; XORWF PORTB, F ;TOGGLE OUTPUT
;PHASE2_NEXT
; MOVLW H'01'
; MOVWF TEMP1 ;SET PHASE TO 1
; RRF TEMP2, F ;SHIFT TO NEXT BIT
; INCF BIT_COUNT, F ;NEXT BIT COUNT
; BTFSS BIT_COUNT, 3 ;CHECK IF BIT COUNT HAS REACHED 8
; GOTO PHASE_DONE ;IF NOT, RETURN
; CLRF BIT_COUNT ;CLEAR BIT COUNT
; MOVF DREG, W
; MOVWF TEMP2 ;COPY NEW DATA TO BUFFER
;PHASE_DONE
; MOVF TEMP4, W
; RETFIE

;TAPE_PAUSE
; MOVLW D'32'
; MOVWF GEN_COUNT
;TP1
; MOVLW D'54'
; MOVWF GEN_COUNT2
;TP2
; MOVLW D'95'
; MOVWF LDEL_COUNT
;TP3
; DECFSZ LDEL_COUNT, F
; GOTO TP3
; DECFSZ GEN_COUNT2, F
; GOTO TP2
; DECFSZ GEN_COUNT, F
; GOTO TP1
; RETURN

SPI_TRANSFER
MOVWF SSPBUF ;SEND DATA
BANKSEL SSPSTAT
SPI_WAIT
BTFSS ((SSPSTAT) and 07Fh), 0 ;IS THE TRANSMISSION READY
GOTO SPI_WAIT ;IF NOT WAIT UNTIL IT IS
BANKSEL SSPBUF
MOVF SSPBUF, W ;COPY DATA TO W
RETURN

BUILD_WORD ;GENERATES PSEUDO-RANDOM TEST DATA
MOVLW 16
MOVWF _gen_count4
BUILD_WORD_LOOP
;GET WORD HERE
CLRF _temp3 ;THIS WILL CONTAIN BIT 7 OF S_REG_LOW
BTFSC _s_reg_low, 7
BSF _temp3, 0
MOVF _s_reg_low, W
ANDLW 0x01 ;GET BIT 0
XORLW 0x01 ;FLIP BIT 0
XORWF _temp3, F ;TEMP3 NOW CONTAINS BIT0 ^ BIT7 ^ 1
RRF _temp3, F
RRF _s_reg_high, F
RRF _s_reg_low, F
DECFSZ _gen_count4, F
GOTO BUILD_WORD_LOOP
RETURN

GET_TEST_BYTE ;SPLITS PSEUDO-RANDOM TEST DATA INTO SINGLE BYTES
BTFSS _flag_reg, 0
GOTO GTB_UPDATE
MOVF _s_reg_low, W
BCF _flag_reg, 0
RETURN
GTB_UPDATE
CALL BUILD_WORD
BSF _flag_reg, 0
MOVF _s_reg_high, W
RETURN

global _delay_millis
_delay_millis ;DESIGNED FOR 4MHZ CLOCK
MOVWF _delay_counter
DM_MILLIS
MOVLW 20
MOVWF _ldel_count
DM_OUTER
MOVLW 16
MOVWF _sdel_count
DM_INNER
DECFSZ _sdel_count,F
GOTO DM_INNER
DECFSZ _ldel_count,F
GOTO DM_OUTER
DECFSZ _delay_counter,F
GOTO DM_MILLIS
RETURN

global _print_test_data
_print_test_data
CLRF _gen_count
PTD_OUTER
CLRF _gen_count2
PTD_INNER
MOVF _gen_count2, W
ANDLW 0x0F
BTFSS ((STATUS) and 07Fh), 2 ;EVERY 16 WORDS PRINT A NEWLINE
GOTO PTD_NO_NEWLINE
MOVLW 0x0A ;NEWLINE CHAR
CALL _uart_send
PTD_NO_NEWLINE
CALL GET_TEST_BYTE ;GET MSB
CALL _byte_to_hex
MOVF _hex_char_high, W
CALL _uart_send ;HIGH NIBBLE HIGH BYTE
MOVF _hex_char_low ,W
CALL _uart_send ;LOW NIBBLE HIGH BYTE
CALL GET_TEST_BYTE ;GET LSB
CALL _byte_to_hex
MOVF _hex_char_high, W
CALL _uart_send ;HIGH NIBBLE LOW BYTE
MOVF _hex_char_low, W
CALL _uart_send ;LOW NIBBLE LOW BYTE
DECFSZ _gen_count2, F
GOTO PTD_INNER
DECFSZ _gen_count, F
GOTO PTD_OUTER
RETURN

;CHECK_FREE_SPACE
; BCF FLAG_REG, 3
; BCF FLAG_REG, 4
; MOVF USB_FREE_SPACE3, F
; BTFSS STATUS, Z
; GOTO CFS2
; BSF FLAG_REG, 3
; BSF FLAG_REG, 4
; RETURN
;CFS2
; MOVF USB_FREE_SPACE2, W
; SUBLW H'02'
; BTFSS STATUS, C
; GOTO CFS3
; BSF FLAG_REG, 3
; BSF FLAG_REG, 4
; RETURN
;CFS3
; MOVF USB_FREE_SPACE1, W
; XORWF TAPE_SIZE_HIGH, W
; BTFSC STATUS, Z
; GOTO CFS4
; MOVF TAPE_SIZE_HIGH, W
; SUBWF USB_FREE_SPACE1, W
; BTFSC STATUS, C
; BSF FLAG_REG, 3
; RETURN
;CFS4
; MOVF TAPE_SIZE_LOW, F
; BTFSC STATUS, Z
; BSF FLAG_REG, 3
; RETURN

global _usb_reset_all
_usb_reset_all
BCF PORTD, 2 ;CH376 CE LINE LOW
MOVLW 0x05 ;RESET ALL COMMAND
CALL SPI_TRANSFER
BSF PORTD, 2 ;CH376S CE LINE HIGH
RETURN

global _usb_set_file_name
_usb_set_file_name
BCF STATUS, 7
MOVLW _tape_name ;NAME ADDRESS
MOVWF FSR
MOVLW 0x08 ;NAME LENGTH
MOVWF _gen_count4
BCF PORTD, 2
MOVLW 0x2F ;SET FILE NAME COMMAND
CALL SPI_TRANSFER
MOVLW 0x2F ;'\' CHAR NEEDED AT START OF NAME
CALL SPI_TRANSFER
USFN_LOOP
MOVF INDF, W
CALL SPI_TRANSFER
INCF FSR, F
DECFSZ _gen_count4, F
GOTO USFN_LOOP
CLRW ;NULL CHAR AT END OF NAME
CALL SPI_TRANSFER
BSF PORTD, 2 ;CE LINE HIGH
RETURN

global _usb_file_open
_usb_file_open
BCF PORTD, 2
MOVLW 0x32 ;FILE OPEN COMMAND
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

global _usb_file_close
_usb_file_close
BCF PORTD, 2
MOVLW 0x36 ;FILE CLOSE COMMAND
CALL SPI_TRANSFER
MOVLW 0x01 ;UPDATE FILE LENGTH
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

USB_BYTE_READ
BCF PORTD, 2
MOVLW 0x3A ;BYTE READ COMMAND
CALL SPI_TRANSFER
MOVF _usb_file_size_low, W
CALL SPI_TRANSFER
MOVF _usb_file_size_high, W
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

USB_BYTE_READ_GO
BCF PORTD, 2
MOVLW 0x3B ;BYTE READ ((ADCON0) and 07Fh), 2 COMMAND
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

USB_READ_DATA0
BCF PORTD, 2
MOVLW 0x27 ;READ DATA0 COMMAND
CALL SPI_TRANSFER
CLRW
CALL SPI_TRANSFER ;GET NUMBER OF BYTES TO READ
ADDWF _usb_bytes_read_low, F
BTFSC ((STATUS) and 07Fh), 0
INCF _usb_bytes_read_high, F
MOVWF _gen_count4
URD_LOOP
CLRW
CALL SPI_TRANSFER
;CALL RAM_WRITE_AUTO ;this is a problem, two active spi devices
CALL _fifo_push
DECFSZ _gen_count4, F
GOTO URD_LOOP
BSF PORTD, 2
CALL _fifo_tf_to_mem
RETURN

global _usb_get_file_size
_usb_get_file_size
BCF PORTD, 2
MOVLW 0x0C ;GET FILE SIZE COMMAND
CALL SPI_TRANSFER
MOVLW 0x68 ;COMMAND DATA
CALL SPI_TRANSFER
CLRW
CALL SPI_TRANSFER
MOVWF _usb_file_size_low
CLRW
CALL SPI_TRANSFER
MOVWF _usb_file_size_high
CLRW
CALL SPI_TRANSFER
CLRW
CALL SPI_TRANSFER ;DISCARD UPPER BYTES OF FILE SIZE
BSF PORTD, 2
RETURN

global _usb_check_exists
_usb_check_exists
BCF PORTD, 2
MOVWF _temp4
MOVLW 0x06
CALL SPI_TRANSFER ;SEND CHECK_EXISTS COMMAND
MOVF _temp4, W
CALL SPI_TRANSFER ;SEND TEST DATA
CLRW
CALL SPI_TRANSFER ;GET RESULT
BSF PORTD, 2
RETURN

global _usb_file_create
_usb_file_create
BCF PORTD, 2
MOVLW 0x34
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

USB_BYTE_WRITE
BCF PORTD, 2
MOVLW 0x3C
CALL SPI_TRANSFER
MOVF _usb_file_size_low, W
CALL SPI_TRANSFER
MOVF _usb_file_size_high, W
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

USB_BYTE_WR_GO
BCF PORTD, 2
MOVLW 0x3D
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

global _usb_get_status
_usb_get_status
BCF PORTD, 2
MOVLW 0x22
CALL SPI_TRANSFER
CLRW
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

global _usb_disk_mount
_usb_disk_mount
BCF PORTD, 2
MOVLW 0x31
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

global _usb_disk_connect
_usb_disk_connect
BCF PORTD, 2
MOVLW 0x30
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

global _usb_set_mode
_usb_set_mode
MOVWF _temp5
BCF PORTD, 2
MOVLW 0X15
CALL SPI_TRANSFER
MOVF _temp5, W
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

global _usb_get_version
_usb_get_version
BCF PORTD, 2
MOVLW 0x01
CALL SPI_TRANSFER
CLRW
CALL SPI_TRANSFER
BSF PORTD, 2
RETURN

USB_WAIT_STATUS
BCF _flag_reg, 2
INCF _timeout_high, F
INCF _timeout_low, F
UWS_LOOP
MOVLW 0x01
CALL _delay_millis ;DELAY 1 MILLISECOND
CALL _usb_get_status
MOVWF _temp5
XORWF _usb_target_status, W
BTFSC ((STATUS) and 07Fh), 2
RETLW 0x00
DECFSZ _timeout_low, F
GOTO UWS_LOOP
DECFSZ _timeout_high, F
GOTO UWS_LOOP
BSF _flag_reg, 2 ;SET FLAG TO INDICATE A TIMEOUT
MOVF _temp5, W
RETURN

global _usb_disk_capacity
_usb_disk_capacity
BCF PORTD, 2
MOVLW 0x3E
CALL SPI_TRANSFER ;SEND DISK CAPACITY COMMAND
BSF PORTD, 2
MOVLW 0x14
MOVWF _usb_target_status ;SET TARGET STATUS TO 14 (DEVICE READY)
CLRF _timeout_high
MOVLW 100
MOVWF _timeout_low ;SET TIMEOUT TO 16 MILLISECONDS
CALL USB_WAIT_STATUS
BTFSC _flag_reg, 2 ;CHECK TIMEOUT FLAG
RETURN
BCF PORTD, 2
MOVLW 0x27
CALL SPI_TRANSFER ;SEND READ DATA0 COMMAND
CLRW
CALL SPI_TRANSFER ;GET NUMBER OF BYTES TO READ (ALWAYS 4)
CLRW
CALL SPI_TRANSFER ;GET LSB OF DISK SIZE
;THE DISK SIZE IS GIVEN IN SECTORS, SO TO GET THE NUMBER OF BYTES WE MULTIPLY BY 512 WHICH IS THE SAME AS SHIFTING BY 9
;THIS MEANS THE LSB IS ALWAYS ((STATUS) and 07Fh), 2 AND THERE IS NO NEED TO HAVE A REGISTER FOR IT.
;INSTEAD WE PUT THE LSB IN USB_DRIVE_SIZE1 WHICH CORRESPONDS TO SHIFTING BY 8.
MOVWF _usb_drive_size1
CLRW
CALL SPI_TRANSFER
MOVWF _usb_drive_size2
CLRW
CALL SPI_TRANSFER
MOVWF _usb_drive_size3
CLRW
CALL SPI_TRANSFER
BSF PORTD, 2
BCF ((STATUS) and 07Fh), 0 ;CLEAR ((STATUS) and 07Fh), 0 FLAG
RLF _usb_drive_size1, F
RLF _usb_drive_size2, F
RLF _usb_drive_size3, F
RETURN

global _usb_disk_query
_usb_disk_query
BCF PORTD, 2
MOVLW 0x3F
CALL SPI_TRANSFER ;SEND DISK QUERY COMMAND
BSF PORTD, 2
MOVLW 0x14
MOVWF _usb_target_status ;SET TARGET STATUS TO 14 (DEVICE READY)
CLRF _timeout_high
MOVLW 100
MOVWF _timeout_low ;SET TIMEOUT TO 16 MILLISECONDS
CALL USB_WAIT_STATUS
BTFSC _flag_reg, 2 ;CHECK TIMEOUT FLAG
RETURN
BCF PORTD, 2
MOVLW 0x27
CALL SPI_TRANSFER ;SEND READ DATA0 COMMAND
CLRW
CALL SPI_TRANSFER ;GET NUMBER OF BYTES TO READ (ALWAYS 8)
CLRW
CALL SPI_TRANSFER ;GET LSB OF LOGICAL BYTES
MOVWF _usb_logical_bytes1
CLRW
CALL SPI_TRANSFER
MOVWF _usb_logical_bytes2
CLRW
CALL SPI_TRANSFER
MOVWF _usb_logical_bytes3
CLRW
CALL SPI_TRANSFER ;DISCARD MSB OF LOGICAL BYTES
CLRW
CALL SPI_TRANSFER ;GET LSB OF FREE SPACE
MOVWF _usb_free_space1
CLRW
CALL SPI_TRANSFER
MOVWF _usb_free_space2
CLRW
CALL SPI_TRANSFER
MOVWF _usb_free_space3
CLRW
CALL SPI_TRANSFER ;DISCARD MSB OF FREE SPACE
BSF PORTD, 2
BCF ((STATUS) and 07Fh), 0
RLF _usb_logical_bytes1, F
RLF _usb_logical_bytes2, F
RLF _usb_logical_bytes3, F
BCF ((STATUS) and 07Fh), 0
RLF _usb_free_space1, F
RLF _usb_free_space2, F
RLF _usb_free_space3, F
RETURN

;USB_WRITE_TEST_DATA
; CLRF S_REG_LOW
; CLRF S_REG_HIGH
; BCF FLAG_REG, 0 ;INITIALIZE PSUEDO-RANDOM DATA GENERATOR
; CALL USB_FILE_CREATE
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH ;SET TIMEOUT TO 3 SECONDS
; MOVLW H'14'
; MOVWF USB_TARGET_STATUS ;SET TARGET STATUS TO 0x14
; CALL USB_WAIT_STATUS
; MOVLW H'04'
; MOVWF GEN_COUNT6
;UWTD_L4
; CLRF USB_BYTES_SENT_HIGH
; CLRF USB_BYTES_SENT_LOW
; MOVLW H'80'
; MOVWF USB_FILE_SIZE_HIGH
; CLRF USB_FILE_SIZE_LOW
; CALL USB_BYTE_WRITE
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'1E'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
;UWTD_ND_LOOP
; BCF PORTD, 2
; MOVLW H'2D'
; MOVWF DREG
; CALL SPI_TRANSFER ;SEND WR_REQ_DATA
; CLRF DREG
; CALL SPI_TRANSFER ;GET NUMBER OF BYTES TO SEND
; MOVF DREG, W
; MOVWF GEN_COUNT5
;UWTD_WR_LOOP
; CALL GET_TEST_BYTE
; CALL SPI_TRANSFER
; INCFSZ USB_BYTES_SENT_LOW, F
; DECF USB_BYTES_SENT_HIGH, F
; INCF USB_BYTES_SENT_HIGH, F
; MOVF USB_BYTES_SENT_HIGH, W
; XORWF USB_FILE_SIZE_HIGH, W
; BTFSS STATUS, Z
; GOTO UWTD_NB
; MOVF USB_BYTES_SENT_LOW, W
; XORWF USB_FILE_SIZE_LOW, W
; BTFSC STATUS, Z
; GOTO UWTD_BREAK
;UWTD_NB
; DECFSZ GEN_COUNT5, F
; GOTO UWTD_WR_LOOP
;UWTD_BREAK
; BSF PORTD, 2
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'1E'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
; MOVF USB_BYTES_SENT_HIGH, W
; XORWF USB_FILE_SIZE_HIGH, W
; BTFSS STATUS, Z
; GOTO UWTD_NE
; MOVF USB_BYTES_SENT_LOW, W
; XORWF USB_FILE_SIZE_LOW, W
; BTFSC STATUS, Z
; GOTO UWTD_EQUAL
;UWTD_NE
; CALL USB_BYTE_WR_GO
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'1E'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
; GOTO UWTD_ND_LOOP
;UWTD_EQUAL
; CALL USB_BYTE_WR_GO
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'14'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
; DECFSZ GEN_COUNT6, F
; GOTO UWTD_L4
; CALL USB_FILE_CLOSE
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'14'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
; RETURN

;USB_FILE_WRITE
; CALL USB_SET_FILE_NAME
; MOVLW H'10'
; MOVWF TIMEOUT_LOW
; CLRF TIMEOUT_HIGH
; MOVLW H'14'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
; CALL USB_FILE_CREATE
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH ;SET TIMEOUT TO 3 SECONDS
; MOVLW H'14'
; MOVWF USB_TARGET_STATUS ;SET TARGET STATUS TO 0x14
; CALL USB_WAIT_STATUS
; CLRF USB_BYTES_SENT_HIGH
; CLRF USB_BYTES_SENT_LOW
; MOVF TAPE_SIZE_HIGH, W
; MOVWF USB_FILE_SIZE_HIGH
; MOVF TAPE_SIZE_LOW, W
; MOVWF USB_FILE_SIZE_LOW
; CALL USB_BYTE_WRITE
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'1E'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
;UFW_ND_LOOP
; CALL BUFF_INIT
; MOVF USB_BYTES_SENT_LOW, W
; MOVWF RAM_ADDRESS_L
; MOVF USB_BYTES_SENT_HIGH, W
; MOVWF RAM_ADDRESS_H
; DECF RAM_ADDRESS_L, F
; BTFSS STATUS, C
; DECF RAM_ADDRESS_H, F
; CALL BUFF_FILL
; BCF PORTD, 2
; MOVLW H'2D'
; MOVWF DREG
; CALL SPI_TRANSFER ;SEND WR_REQ_DATA
; CLRF DREG
; CALL SPI_TRANSFER ;GET NUMBER OF BYTES TO SEND
; MOVF DREG, W
; MOVWF GEN_COUNT5
;UFW_WR_LOOP
; CALL BUFF_READ_AUTO
; CALL SPI_TRANSFER
; INCFSZ USB_BYTES_SENT_LOW, F
; DECF USB_BYTES_SENT_HIGH, F
; INCF USB_BYTES_SENT_HIGH, F
; MOVF USB_BYTES_SENT_HIGH, W
; XORWF USB_FILE_SIZE_HIGH, W
; BTFSS STATUS, Z
; GOTO UFW_NB
; MOVF USB_BYTES_SENT_LOW, W
; XORWF USB_FILE_SIZE_LOW, W
; BTFSC STATUS, Z
; GOTO UFW_BREAK
;UFW_NB
; DECFSZ GEN_COUNT5, F
; GOTO UFW_WR_LOOP
;UFW_BREAK
; BSF PORTD, 2
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'1E'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
; MOVF USB_BYTES_SENT_HIGH, W
; XORWF USB_FILE_SIZE_HIGH, W
; BTFSS STATUS, Z
; GOTO UFW_NE
; MOVF USB_BYTES_SENT_LOW, W
; XORWF USB_FILE_SIZE_LOW, W
; BTFSC STATUS, Z
; GOTO UFW_EQUAL
;UFW_NE
; CALL USB_BYTE_WR_GO
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'1E'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
; GOTO UFW_ND_LOOP
;UFW_EQUAL
; CALL USB_BYTE_WR_GO
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'14'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
; CALL USB_FILE_CLOSE
; MOVLW H'0B'
; MOVWF TIMEOUT_HIGH
; MOVLW H'B8'
; MOVWF TIMEOUT_LOW
; MOVLW H'14'
; MOVWF USB_TARGET_STATUS
; CALL USB_WAIT_STATUS
; RETURN

global _usb_file_read
_usb_file_read
MOVLW 0xFF
MOVWF _ram_address_h
MOVWF _ram_address_l ;RAM ADDRESS WILL OVERFLOW BEFORE FIRST WRITE
CALL USB_BYTE_READ
CLRF _timeout_high
MOVLW 0x80
MOVWF _timeout_low
MOVLW 0x1D
MOVWF _usb_target_status
CALL USB_WAIT_STATUS
BTFSC _flag_reg, 2 ;CHECK TIMEOUT FLAG
RETURN
UFR_LOOP
CALL USB_READ_DATA0
MOVLW 0x01
CALL _delay_millis
MOVF _usb_file_size_low, W
XORWF _usb_bytes_read_low, W
BTFSS ((STATUS) and 07Fh), 2
GOTO UFR_GO
MOVF _usb_file_size_high, W
XORWF _usb_bytes_read_high, W
BTFSC ((STATUS) and 07Fh), 2
GOTO UFR_DONE
UFR_GO
CALL USB_BYTE_READ_GO
CLRF _timeout_high
MOVLW 0xFF
MOVWF _timeout_low
MOVLW 0x1D
MOVWF _usb_target_status
CALL USB_WAIT_STATUS
BTFSC _flag_reg, 2 ;CHECK TIMEOUT FLAG
RETURN
GOTO UFR_LOOP
UFR_DONE
MOVF _usb_file_size_low, W
MOVWF _tape_size_low
MOVF _usb_file_size_high, W
MOVWF _tape_size_high
BCF PORTD, 2
MOVLW 0x36
CALL SPI_TRANSFER ;SEND FILE CLOSE COMMAND
CLRW
CALL SPI_TRANSFER ;FILE CLOSE PARAMETER IS 0 (DO NOT UPDATE FILE SIZE)
BSF PORTD, 2
CLRF _timeout_high
MOVLW 0x80
MOVWF _timeout_low
MOVLW 0x14
MOVWF _usb_target_status
CALL USB_WAIT_STATUS
RETURN

_fifo_init
CLRF _fifo_write_idx
CLRF _fifo_write_bank
CLRF _fifo_read_idx
CLRF _fifo_read_bank
CLRF _fifo_num_bytes
RETURN

_fifo_tf_to_mem
MOVF _fifo_num_bytes, F
BTFSC ((STATUS) and 07Fh), 2
RETURN
CALL _fifo_pop
CALL RAM_WRITE_AUTO
GOTO _fifo_tf_to_mem

_fifo_tf_from_mem
COMF _fifo_num_bytes, W
BTFSC ((STATUS) and 07Fh), 2
RETURN
CALL RAM_READ_AUTO
CALL _fifo_push
GOTO _fifo_tf_from_mem
